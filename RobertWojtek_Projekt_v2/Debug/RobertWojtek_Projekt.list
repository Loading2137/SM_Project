
RobertWojtek_Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082bc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08008490  08008490  00018490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088c4  080088c4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080088c4  080088c4  000188c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088cc  080088cc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088cc  080088cc  000188cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088d0  080088d0  000188d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080088d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c4  200001e0  08008ab4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007a4  08008ab4  000207a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013af1  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027f6  00000000  00000000  00033d01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  000364f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  00037298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000275f4  00000000  00000000  00037f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010dcb  00000000  00000000  0005f534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed064  00000000  00000000  000702ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015d363  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a5c  00000000  00000000  0015d3b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008474 	.word	0x08008474

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08008474 	.word	0x08008474

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_ldivmod>:
 8000be8:	b97b      	cbnz	r3, 8000c0a <__aeabi_ldivmod+0x22>
 8000bea:	b972      	cbnz	r2, 8000c0a <__aeabi_ldivmod+0x22>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bfbe      	ittt	lt
 8000bf0:	2000      	movlt	r0, #0
 8000bf2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bf6:	e006      	blt.n	8000c06 <__aeabi_ldivmod+0x1e>
 8000bf8:	bf08      	it	eq
 8000bfa:	2800      	cmpeq	r0, #0
 8000bfc:	bf1c      	itt	ne
 8000bfe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c02:	f04f 30ff 	movne.w	r0, #4294967295
 8000c06:	f000 b9b9 	b.w	8000f7c <__aeabi_idiv0>
 8000c0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c12:	2900      	cmp	r1, #0
 8000c14:	db09      	blt.n	8000c2a <__aeabi_ldivmod+0x42>
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db1a      	blt.n	8000c50 <__aeabi_ldivmod+0x68>
 8000c1a:	f000 f84d 	bl	8000cb8 <__udivmoddi4>
 8000c1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c26:	b004      	add	sp, #16
 8000c28:	4770      	bx	lr
 8000c2a:	4240      	negs	r0, r0
 8000c2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db1b      	blt.n	8000c6c <__aeabi_ldivmod+0x84>
 8000c34:	f000 f840 	bl	8000cb8 <__udivmoddi4>
 8000c38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c40:	b004      	add	sp, #16
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	4252      	negs	r2, r2
 8000c4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c4e:	4770      	bx	lr
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	f000 f82f 	bl	8000cb8 <__udivmoddi4>
 8000c5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c62:	b004      	add	sp, #16
 8000c64:	4240      	negs	r0, r0
 8000c66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6a:	4770      	bx	lr
 8000c6c:	4252      	negs	r2, r2
 8000c6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c72:	f000 f821 	bl	8000cb8 <__udivmoddi4>
 8000c76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7e:	b004      	add	sp, #16
 8000c80:	4252      	negs	r2, r2
 8000c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af02      	add	r7, sp, #8
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
  return tmp;
#endif
#if(BMP_SPI == 1)
    uint8_t tmp[2];
	tmp[0] = addr;
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 8000f8e:	7b3b      	ldrb	r3, [r7, #12]
 8000f90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2110      	movs	r1, #16
 8000f9c:	480b      	ldr	r0, [pc, #44]	; (8000fcc <BMP280_Read8+0x4c>)
 8000f9e:	f001 fc89 	bl	80028b4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <BMP280_Read8+0x50>)
 8000fa4:	6818      	ldr	r0, [r3, #0]
 8000fa6:	f107 020c 	add.w	r2, r7, #12
 8000faa:	f107 010c 	add.w	r1, r7, #12
 8000fae:	230a      	movs	r3, #10
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	f002 ff4b 	bl	8003e4e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2110      	movs	r1, #16
 8000fbc:	4803      	ldr	r0, [pc, #12]	; (8000fcc <BMP280_Read8+0x4c>)
 8000fbe:	f001 fc79 	bl	80028b4 <HAL_GPIO_WritePin>
	return tmp[1];
 8000fc2:	7b7b      	ldrb	r3, [r7, #13]
#endif
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40020000 	.word	0x40020000
 8000fd0:	20000280 	.word	0x20000280

08000fd4 <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af02      	add	r7, sp, #8
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
	return ((tmp[0] << 8) | tmp[1]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[3];
	tmp[0] = addr;
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 8000fe2:	7b3b      	ldrb	r3, [r7, #12]
 8000fe4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2110      	movs	r1, #16
 8000ff0:	480f      	ldr	r0, [pc, #60]	; (8001030 <BMP280_Read16+0x5c>)
 8000ff2:	f001 fc5f 	bl	80028b4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <BMP280_Read16+0x60>)
 8000ff8:	6818      	ldr	r0, [r3, #0]
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	f107 010c 	add.w	r1, r7, #12
 8001002:	230a      	movs	r3, #10
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2303      	movs	r3, #3
 8001008:	f002 ff21 	bl	8003e4e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	2110      	movs	r1, #16
 8001010:	4807      	ldr	r0, [pc, #28]	; (8001030 <BMP280_Read16+0x5c>)
 8001012:	f001 fc4f 	bl	80028b4 <HAL_GPIO_WritePin>
	return ((tmp[1] << 8) | tmp[2]);
 8001016:	7b7b      	ldrb	r3, [r7, #13]
 8001018:	021b      	lsls	r3, r3, #8
 800101a:	b21a      	sxth	r2, r3
 800101c:	7bbb      	ldrb	r3, [r7, #14]
 800101e:	b21b      	sxth	r3, r3
 8001020:	4313      	orrs	r3, r2
 8001022:	b21b      	sxth	r3, r3
 8001024:	b29b      	uxth	r3, r3
#endif
}
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40020000 	.word	0x40020000
 8001034:	20000280 	.word	0x20000280

08001038 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ffc5 	bl	8000fd4 <BMP280_Read16>
 800104a:	4603      	mov	r3, r0
 800104c:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 800104e:	89fb      	ldrh	r3, [r7, #14]
 8001050:	0a1b      	lsrs	r3, r3, #8
 8001052:	b29b      	uxth	r3, r3
 8001054:	b21a      	sxth	r2, r3
 8001056:	89fb      	ldrh	r3, [r7, #14]
 8001058:	021b      	lsls	r3, r3, #8
 800105a:	b21b      	sxth	r3, r3
 800105c:	4313      	orrs	r3, r2
 800105e:	b21b      	sxth	r3, r3
 8001060:	b29b      	uxth	r3, r3
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af02      	add	r7, sp, #8
 8001072:	4603      	mov	r3, r0
 8001074:	460a      	mov	r2, r1
 8001076:	71fb      	strb	r3, [r7, #7]
 8001078:	4613      	mov	r3, r2
 800107a:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[2];
	tmp[0] = address;
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	733b      	strb	r3, [r7, #12]
	tmp[0] &= ~(1<<7);
 8001080:	7b3b      	ldrb	r3, [r7, #12]
 8001082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001086:	b2db      	uxtb	r3, r3
 8001088:	733b      	strb	r3, [r7, #12]
	tmp[1] = data;
 800108a:	79bb      	ldrb	r3, [r7, #6]
 800108c:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	2110      	movs	r1, #16
 8001092:	480b      	ldr	r0, [pc, #44]	; (80010c0 <BMP280_Write8+0x54>)
 8001094:	f001 fc0e 	bl	80028b4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 8001098:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <BMP280_Write8+0x58>)
 800109a:	6818      	ldr	r0, [r3, #0]
 800109c:	f107 020c 	add.w	r2, r7, #12
 80010a0:	f107 010c 	add.w	r1, r7, #12
 80010a4:	230a      	movs	r3, #10
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2302      	movs	r3, #2
 80010aa:	f002 fed0 	bl	8003e4e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 80010ae:	2201      	movs	r2, #1
 80010b0:	2110      	movs	r1, #16
 80010b2:	4803      	ldr	r0, [pc, #12]	; (80010c0 <BMP280_Write8+0x54>)
 80010b4:	f001 fbfe 	bl	80028b4 <HAL_GPIO_WritePin>
#endif
}
 80010b8:	bf00      	nop
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40020000 	.word	0x40020000
 80010c4:	20000280 	.word	0x20000280

080010c8 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[4];
	tmp[0] = addr;
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 80010d6:	7b3b      	ldrb	r3, [r7, #12]
 80010d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2110      	movs	r1, #16
 80010e4:	480e      	ldr	r0, [pc, #56]	; (8001120 <BMP280_Read24+0x58>)
 80010e6:	f001 fbe5 	bl	80028b4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <BMP280_Read24+0x5c>)
 80010ec:	6818      	ldr	r0, [r3, #0]
 80010ee:	f107 020c 	add.w	r2, r7, #12
 80010f2:	f107 010c 	add.w	r1, r7, #12
 80010f6:	230a      	movs	r3, #10
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	2303      	movs	r3, #3
 80010fc:	f002 fea7 	bl	8003e4e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8001100:	2201      	movs	r2, #1
 8001102:	2110      	movs	r1, #16
 8001104:	4806      	ldr	r0, [pc, #24]	; (8001120 <BMP280_Read24+0x58>)
 8001106:	f001 fbd5 	bl	80028b4 <HAL_GPIO_WritePin>
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
 800110a:	7b7b      	ldrb	r3, [r7, #13]
 800110c:	041a      	lsls	r2, r3, #16
 800110e:	7bbb      	ldrb	r3, [r7, #14]
 8001110:	021b      	lsls	r3, r3, #8
 8001112:	4313      	orrs	r3, r2
 8001114:	7bfa      	ldrb	r2, [r7, #15]
 8001116:	4313      	orrs	r3, r2
#endif
}
 8001118:	4618      	mov	r0, r3
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40020000 	.word	0x40020000
 8001124:	20000280 	.word	0x20000280

08001128 <BMP280_Init>:
{
	i2c_h = i2c_handler;
#endif
#if(BMP_SPI == 1)
void BMP280_Init(SPI_HandleTypeDef *spi_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	4608      	mov	r0, r1
 8001132:	4611      	mov	r1, r2
 8001134:	461a      	mov	r2, r3
 8001136:	4603      	mov	r3, r0
 8001138:	70fb      	strb	r3, [r7, #3]
 800113a:	460b      	mov	r3, r1
 800113c:	70bb      	strb	r3, [r7, #2]
 800113e:	4613      	mov	r3, r2
 8001140:	707b      	strb	r3, [r7, #1]
	spi_h = spi_handler;
 8001142:	4a4e      	ldr	r2, [pc, #312]	; (800127c <BMP280_Init+0x154>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	2110      	movs	r1, #16
 800114c:	484c      	ldr	r0, [pc, #304]	; (8001280 <BMP280_Init+0x158>)
 800114e:	f001 fbb1 	bl	80028b4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001152:	2005      	movs	r0, #5
 8001154:	f001 f8f8 	bl	8002348 <HAL_Delay>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8001158:	2201      	movs	r2, #1
 800115a:	2110      	movs	r1, #16
 800115c:	4848      	ldr	r0, [pc, #288]	; (8001280 <BMP280_Init+0x158>)
 800115e:	f001 fba9 	bl	80028b4 <HAL_GPIO_WritePin>
#endif
	if (mode > BMP280_NORMALMODE)
 8001162:	787b      	ldrb	r3, [r7, #1]
 8001164:	2b03      	cmp	r3, #3
 8001166:	d901      	bls.n	800116c <BMP280_Init+0x44>
	    mode = BMP280_NORMALMODE;
 8001168:	2303      	movs	r3, #3
 800116a:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 800116c:	4a45      	ldr	r2, [pc, #276]	; (8001284 <BMP280_Init+0x15c>)
 800116e:	787b      	ldrb	r3, [r7, #1]
 8001170:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 8001172:	787b      	ldrb	r3, [r7, #1]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d101      	bne.n	800117c <BMP280_Init+0x54>
		mode = BMP280_SLEEPMODE;
 8001178:	2300      	movs	r3, #0
 800117a:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 800117c:	78fb      	ldrb	r3, [r7, #3]
 800117e:	2b05      	cmp	r3, #5
 8001180:	d901      	bls.n	8001186 <BMP280_Init+0x5e>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 8001182:	2305      	movs	r3, #5
 8001184:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 8001186:	4a40      	ldr	r2, [pc, #256]	; (8001288 <BMP280_Init+0x160>)
 8001188:	78fb      	ldrb	r3, [r7, #3]
 800118a:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 800118c:	78bb      	ldrb	r3, [r7, #2]
 800118e:	2b05      	cmp	r3, #5
 8001190:	d901      	bls.n	8001196 <BMP280_Init+0x6e>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 8001192:	2305      	movs	r3, #5
 8001194:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 8001196:	4a3d      	ldr	r2, [pc, #244]	; (800128c <BMP280_Init+0x164>)
 8001198:	78bb      	ldrb	r3, [r7, #2]
 800119a:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 800119c:	bf00      	nop
 800119e:	20d0      	movs	r0, #208	; 0xd0
 80011a0:	f7ff feee 	bl	8000f80 <BMP280_Read8>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b58      	cmp	r3, #88	; 0x58
 80011a8:	d1f9      	bne.n	800119e <BMP280_Init+0x76>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 80011aa:	2088      	movs	r0, #136	; 0x88
 80011ac:	f7ff ff44 	bl	8001038 <BMP280_Read16LE>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461a      	mov	r2, r3
 80011b4:	4b36      	ldr	r3, [pc, #216]	; (8001290 <BMP280_Init+0x168>)
 80011b6:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 80011b8:	208a      	movs	r0, #138	; 0x8a
 80011ba:	f7ff ff3d 	bl	8001038 <BMP280_Read16LE>
 80011be:	4603      	mov	r3, r0
 80011c0:	b21a      	sxth	r2, r3
 80011c2:	4b34      	ldr	r3, [pc, #208]	; (8001294 <BMP280_Init+0x16c>)
 80011c4:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 80011c6:	208c      	movs	r0, #140	; 0x8c
 80011c8:	f7ff ff36 	bl	8001038 <BMP280_Read16LE>
 80011cc:	4603      	mov	r3, r0
 80011ce:	b21a      	sxth	r2, r3
 80011d0:	4b31      	ldr	r3, [pc, #196]	; (8001298 <BMP280_Init+0x170>)
 80011d2:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 80011d4:	208e      	movs	r0, #142	; 0x8e
 80011d6:	f7ff ff2f 	bl	8001038 <BMP280_Read16LE>
 80011da:	4603      	mov	r3, r0
 80011dc:	461a      	mov	r2, r3
 80011de:	4b2f      	ldr	r3, [pc, #188]	; (800129c <BMP280_Init+0x174>)
 80011e0:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 80011e2:	2090      	movs	r0, #144	; 0x90
 80011e4:	f7ff ff28 	bl	8001038 <BMP280_Read16LE>
 80011e8:	4603      	mov	r3, r0
 80011ea:	b21a      	sxth	r2, r3
 80011ec:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <BMP280_Init+0x178>)
 80011ee:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 80011f0:	2092      	movs	r0, #146	; 0x92
 80011f2:	f7ff ff21 	bl	8001038 <BMP280_Read16LE>
 80011f6:	4603      	mov	r3, r0
 80011f8:	b21a      	sxth	r2, r3
 80011fa:	4b2a      	ldr	r3, [pc, #168]	; (80012a4 <BMP280_Init+0x17c>)
 80011fc:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 80011fe:	2094      	movs	r0, #148	; 0x94
 8001200:	f7ff ff1a 	bl	8001038 <BMP280_Read16LE>
 8001204:	4603      	mov	r3, r0
 8001206:	b21a      	sxth	r2, r3
 8001208:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <BMP280_Init+0x180>)
 800120a:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 800120c:	2096      	movs	r0, #150	; 0x96
 800120e:	f7ff ff13 	bl	8001038 <BMP280_Read16LE>
 8001212:	4603      	mov	r3, r0
 8001214:	b21a      	sxth	r2, r3
 8001216:	4b25      	ldr	r3, [pc, #148]	; (80012ac <BMP280_Init+0x184>)
 8001218:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 800121a:	2098      	movs	r0, #152	; 0x98
 800121c:	f7ff ff0c 	bl	8001038 <BMP280_Read16LE>
 8001220:	4603      	mov	r3, r0
 8001222:	b21a      	sxth	r2, r3
 8001224:	4b22      	ldr	r3, [pc, #136]	; (80012b0 <BMP280_Init+0x188>)
 8001226:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8001228:	209a      	movs	r0, #154	; 0x9a
 800122a:	f7ff ff05 	bl	8001038 <BMP280_Read16LE>
 800122e:	4603      	mov	r3, r0
 8001230:	b21a      	sxth	r2, r3
 8001232:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <BMP280_Init+0x18c>)
 8001234:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 8001236:	209c      	movs	r0, #156	; 0x9c
 8001238:	f7ff fefe 	bl	8001038 <BMP280_Read16LE>
 800123c:	4603      	mov	r3, r0
 800123e:	b21a      	sxth	r2, r3
 8001240:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <BMP280_Init+0x190>)
 8001242:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 8001244:	209e      	movs	r0, #158	; 0x9e
 8001246:	f7ff fef7 	bl	8001038 <BMP280_Read16LE>
 800124a:	4603      	mov	r3, r0
 800124c:	b21a      	sxth	r2, r3
 800124e:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <BMP280_Init+0x194>)
 8001250:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 8001252:	78fb      	ldrb	r3, [r7, #3]
 8001254:	015b      	lsls	r3, r3, #5
 8001256:	b25a      	sxtb	r2, r3
 8001258:	78bb      	ldrb	r3, [r7, #2]
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	b25b      	sxtb	r3, r3
 800125e:	4313      	orrs	r3, r2
 8001260:	b25a      	sxtb	r2, r3
 8001262:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001266:	4313      	orrs	r3, r2
 8001268:	b25b      	sxtb	r3, r3
 800126a:	b2db      	uxtb	r3, r3
 800126c:	4619      	mov	r1, r3
 800126e:	20f4      	movs	r0, #244	; 0xf4
 8001270:	f7ff fefc 	bl	800106c <BMP280_Write8>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000280 	.word	0x20000280
 8001280:	40020000 	.word	0x40020000
 8001284:	20000287 	.word	0x20000287
 8001288:	20000286 	.word	0x20000286
 800128c:	20000272 	.word	0x20000272
 8001290:	20000284 	.word	0x20000284
 8001294:	20000274 	.word	0x20000274
 8001298:	2000026c 	.word	0x2000026c
 800129c:	20000278 	.word	0x20000278
 80012a0:	2000026e 	.word	0x2000026e
 80012a4:	20000288 	.word	0x20000288
 80012a8:	2000028c 	.word	0x2000028c
 80012ac:	20000276 	.word	0x20000276
 80012b0:	2000027c 	.word	0x2000027c
 80012b4:	20000270 	.word	0x20000270
 80012b8:	2000027a 	.word	0x2000027a
 80012bc:	2000028a 	.word	0x2000028a

080012c0 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 80012c6:	4b3d      	ldr	r3, [pc, #244]	; (80013bc <BMP280_ReadTemperature+0xfc>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d16d      	bne.n	80013aa <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 80012ce:	20f4      	movs	r0, #244	; 0xf4
 80012d0:	f7ff fe56 	bl	8000f80 <BMP280_Read8>
 80012d4:	4603      	mov	r3, r0
 80012d6:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 80012d8:	7dfb      	ldrb	r3, [r7, #23]
 80012da:	f023 0303 	bic.w	r3, r3, #3
 80012de:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 80012e0:	7dfb      	ldrb	r3, [r7, #23]
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 80012e8:	7dfb      	ldrb	r3, [r7, #23]
 80012ea:	4619      	mov	r1, r3
 80012ec:	20f4      	movs	r0, #244	; 0xf4
 80012ee:	f7ff febd 	bl	800106c <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 80012f2:	20f4      	movs	r0, #244	; 0xf4
 80012f4:	f7ff fe44 	bl	8000f80 <BMP280_Read8>
 80012f8:	4603      	mov	r3, r0
 80012fa:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 80012fc:	7dbb      	ldrb	r3, [r7, #22]
 80012fe:	f003 0303 	and.w	r3, r3, #3
 8001302:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 8001304:	7dbb      	ldrb	r3, [r7, #22]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d14f      	bne.n	80013aa <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 800130a:	20f4      	movs	r0, #244	; 0xf4
 800130c:	f7ff fe38 	bl	8000f80 <BMP280_Read8>
 8001310:	4603      	mov	r3, r0
 8001312:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 8001314:	7dbb      	ldrb	r3, [r7, #22]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 800131c:	7dbb      	ldrb	r3, [r7, #22]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d000      	beq.n	8001324 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001322:	e7f2      	b.n	800130a <BMP280_ReadTemperature+0x4a>
				  break;
 8001324:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 8001326:	20fa      	movs	r0, #250	; 0xfa
 8001328:	f7ff fece 	bl	80010c8 <BMP280_Read24>
 800132c:	4603      	mov	r3, r0
 800132e:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	111b      	asrs	r3, r3, #4
 8001334:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	10da      	asrs	r2, r3, #3
 800133a:	4b21      	ldr	r3, [pc, #132]	; (80013c0 <BMP280_ReadTemperature+0x100>)
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 8001342:	4a20      	ldr	r2, [pc, #128]	; (80013c4 <BMP280_ReadTemperature+0x104>)
 8001344:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001348:	fb02 f303 	mul.w	r3, r2, r3
 800134c:	12db      	asrs	r3, r3, #11
 800134e:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	111b      	asrs	r3, r3, #4
 8001354:	4a1a      	ldr	r2, [pc, #104]	; (80013c0 <BMP280_ReadTemperature+0x100>)
 8001356:	8812      	ldrh	r2, [r2, #0]
 8001358:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	1112      	asrs	r2, r2, #4
 800135e:	4918      	ldr	r1, [pc, #96]	; (80013c0 <BMP280_ReadTemperature+0x100>)
 8001360:	8809      	ldrh	r1, [r1, #0]
 8001362:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001364:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001368:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 800136a:	4a17      	ldr	r2, [pc, #92]	; (80013c8 <BMP280_ReadTemperature+0x108>)
 800136c:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001370:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001374:	139b      	asrs	r3, r3, #14
 8001376:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	4413      	add	r3, r2
 800137e:	4a13      	ldr	r2, [pc, #76]	; (80013cc <BMP280_ReadTemperature+0x10c>)
 8001380:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 8001382:	4b12      	ldr	r3, [pc, #72]	; (80013cc <BMP280_ReadTemperature+0x10c>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	4613      	mov	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	3380      	adds	r3, #128	; 0x80
 800138e:	121b      	asrs	r3, r3, #8
 8001390:	ee07 3a90 	vmov	s15, r3
 8001394:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001398:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 800139c:	edd7 7a01 	vldr	s15, [r7, #4]
 80013a0:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80013d0 <BMP280_ReadTemperature+0x110>
 80013a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013a8:	e001      	b.n	80013ae <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 80013aa:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80013d4 <BMP280_ReadTemperature+0x114>
 80013ae:	eef0 7a47 	vmov.f32	s15, s14
}
 80013b2:	eeb0 0a67 	vmov.f32	s0, s15
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000287 	.word	0x20000287
 80013c0:	20000284 	.word	0x20000284
 80013c4:	20000274 	.word	0x20000274
 80013c8:	2000026c 	.word	0x2000026c
 80013cc:	20000290 	.word	0x20000290
 80013d0:	42c80000 	.word	0x42c80000
 80013d4:	c2c60000 	.word	0xc2c60000

080013d8 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 80013d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013dc:	b09c      	sub	sp, #112	; 0x70
 80013de:	af00      	add	r7, sp, #0
 80013e0:	64f8      	str	r0, [r7, #76]	; 0x4c
 80013e2:	64b9      	str	r1, [r7, #72]	; 0x48
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 80013e4:	f7ff ff6c 	bl	80012c0 <BMP280_ReadTemperature>
 80013e8:	eef0 7a40 	vmov.f32	s15, s0
 80013ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013ee:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 80013f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013f4:	edd3 7a00 	vldr	s15, [r3]
 80013f8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80015c8 <BMP280_ReadTemperatureAndPressure+0x1f0>
 80013fc:	eef4 7a47 	vcmp.f32	s15, s14
 8001400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001404:	d101      	bne.n	800140a <BMP280_ReadTemperatureAndPressure+0x32>
		  return -1;
 8001406:	23ff      	movs	r3, #255	; 0xff
 8001408:	e1d8      	b.n	80017bc <BMP280_ReadTemperatureAndPressure+0x3e4>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 800140a:	20f7      	movs	r0, #247	; 0xf7
 800140c:	f7ff fe5c 	bl	80010c8 <BMP280_Read24>
 8001410:	4603      	mov	r3, r0
 8001412:	66fb      	str	r3, [r7, #108]	; 0x6c
	  adc_P >>= 4;
 8001414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001416:	111b      	asrs	r3, r3, #4
 8001418:	66fb      	str	r3, [r7, #108]	; 0x6c

	  var1 = ((int64_t)t_fine) - 128000;
 800141a:	4b6c      	ldr	r3, [pc, #432]	; (80015cc <BMP280_ReadTemperatureAndPressure+0x1f4>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	461a      	mov	r2, r3
 8001420:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001424:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 8001428:	f143 35ff 	adc.w	r5, r3, #4294967295
 800142c:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
	  var2 = var1 * var1 * (int64_t)p6;
 8001430:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001432:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001434:	fb03 f102 	mul.w	r1, r3, r2
 8001438:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800143a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800143c:	fb03 f302 	mul.w	r3, r3, r2
 8001440:	18ca      	adds	r2, r1, r3
 8001442:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001444:	fba3 4503 	umull	r4, r5, r3, r3
 8001448:	1953      	adds	r3, r2, r5
 800144a:	461d      	mov	r5, r3
 800144c:	4b60      	ldr	r3, [pc, #384]	; (80015d0 <BMP280_ReadTemperatureAndPressure+0x1f8>)
 800144e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001452:	b21a      	sxth	r2, r3
 8001454:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001458:	fb02 f005 	mul.w	r0, r2, r5
 800145c:	fb04 f103 	mul.w	r1, r4, r3
 8001460:	4401      	add	r1, r0
 8001462:	fba4 2302 	umull	r2, r3, r4, r2
 8001466:	4419      	add	r1, r3
 8001468:	460b      	mov	r3, r1
 800146a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 800146e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 8001472:	4b58      	ldr	r3, [pc, #352]	; (80015d4 <BMP280_ReadTemperatureAndPressure+0x1fc>)
 8001474:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001478:	b21a      	sxth	r2, r3
 800147a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800147e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001480:	fb03 f001 	mul.w	r0, r3, r1
 8001484:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001486:	fb02 f101 	mul.w	r1, r2, r1
 800148a:	4408      	add	r0, r1
 800148c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800148e:	fba1 2302 	umull	r2, r3, r1, r2
 8001492:	18c1      	adds	r1, r0, r3
 8001494:	460b      	mov	r3, r1
 8001496:	f04f 0000 	mov.w	r0, #0
 800149a:	f04f 0100 	mov.w	r1, #0
 800149e:	0459      	lsls	r1, r3, #17
 80014a0:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80014a4:	0450      	lsls	r0, r2, #17
 80014a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80014aa:	eb12 0800 	adds.w	r8, r2, r0
 80014ae:	eb43 0901 	adc.w	r9, r3, r1
 80014b2:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
	  var2 = var2 + (((int64_t)p4)<<35);
 80014b6:	4b48      	ldr	r3, [pc, #288]	; (80015d8 <BMP280_ReadTemperatureAndPressure+0x200>)
 80014b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014bc:	b21a      	sxth	r2, r3
 80014be:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80014c2:	f04f 0000 	mov.w	r0, #0
 80014c6:	f04f 0100 	mov.w	r1, #0
 80014ca:	00d1      	lsls	r1, r2, #3
 80014cc:	2000      	movs	r0, #0
 80014ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80014d2:	1814      	adds	r4, r2, r0
 80014d4:	61bc      	str	r4, [r7, #24]
 80014d6:	414b      	adcs	r3, r1
 80014d8:	61fb      	str	r3, [r7, #28]
 80014da:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80014de:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80014e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80014e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014e6:	fb03 f102 	mul.w	r1, r3, r2
 80014ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80014ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014ee:	fb03 f302 	mul.w	r3, r3, r2
 80014f2:	18ca      	adds	r2, r1, r3
 80014f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014f6:	fba3 4503 	umull	r4, r5, r3, r3
 80014fa:	1953      	adds	r3, r2, r5
 80014fc:	461d      	mov	r5, r3
 80014fe:	4b37      	ldr	r3, [pc, #220]	; (80015dc <BMP280_ReadTemperatureAndPressure+0x204>)
 8001500:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001504:	b21a      	sxth	r2, r3
 8001506:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800150a:	fb02 f005 	mul.w	r0, r2, r5
 800150e:	fb04 f103 	mul.w	r1, r4, r3
 8001512:	4401      	add	r1, r0
 8001514:	fba4 2302 	umull	r2, r3, r4, r2
 8001518:	4419      	add	r1, r3
 800151a:	460b      	mov	r3, r1
 800151c:	f04f 0800 	mov.w	r8, #0
 8001520:	f04f 0900 	mov.w	r9, #0
 8001524:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8001528:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 800152c:	ea4f 2923 	mov.w	r9, r3, asr #8
	    ((var1 * (int64_t)p2)<<12);
 8001530:	4b2b      	ldr	r3, [pc, #172]	; (80015e0 <BMP280_ReadTemperatureAndPressure+0x208>)
 8001532:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001536:	b21a      	sxth	r2, r3
 8001538:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800153c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800153e:	fb03 f001 	mul.w	r0, r3, r1
 8001542:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001544:	fb02 f101 	mul.w	r1, r2, r1
 8001548:	1844      	adds	r4, r0, r1
 800154a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800154c:	fba1 0102 	umull	r0, r1, r1, r2
 8001550:	1863      	adds	r3, r4, r1
 8001552:	4619      	mov	r1, r3
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	f04f 0300 	mov.w	r3, #0
 800155c:	030b      	lsls	r3, r1, #12
 800155e:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 8001562:	0302      	lsls	r2, r0, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001564:	eb18 0102 	adds.w	r1, r8, r2
 8001568:	6139      	str	r1, [r7, #16]
 800156a:	eb49 0303 	adc.w	r3, r9, r3
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001574:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 8001578:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800157c:	1c11      	adds	r1, r2, #0
 800157e:	6439      	str	r1, [r7, #64]	; 0x40
 8001580:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 8001584:	647b      	str	r3, [r7, #68]	; 0x44
 8001586:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <BMP280_ReadTemperatureAndPressure+0x20c>)
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	b29a      	uxth	r2, r3
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001594:	4629      	mov	r1, r5
 8001596:	fb02 f001 	mul.w	r0, r2, r1
 800159a:	4621      	mov	r1, r4
 800159c:	fb01 f103 	mul.w	r1, r1, r3
 80015a0:	4401      	add	r1, r0
 80015a2:	4620      	mov	r0, r4
 80015a4:	fba0 2302 	umull	r2, r3, r0, r2
 80015a8:	4419      	add	r1, r3
 80015aa:	460b      	mov	r3, r1
 80015ac:	f04f 0000 	mov.w	r0, #0
 80015b0:	f04f 0100 	mov.w	r1, #0
 80015b4:	1058      	asrs	r0, r3, #1
 80015b6:	17d9      	asrs	r1, r3, #31
 80015b8:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60

	  if (var1 == 0) {
 80015bc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80015c0:	4313      	orrs	r3, r2
 80015c2:	d111      	bne.n	80015e8 <BMP280_ReadTemperatureAndPressure+0x210>
	    return 0;  // avoid exception caused by division by zero
 80015c4:	2300      	movs	r3, #0
 80015c6:	e0f9      	b.n	80017bc <BMP280_ReadTemperatureAndPressure+0x3e4>
 80015c8:	c2c60000 	.word	0xc2c60000
 80015cc:	20000290 	.word	0x20000290
 80015d0:	2000027c 	.word	0x2000027c
 80015d4:	20000276 	.word	0x20000276
 80015d8:	2000028c 	.word	0x2000028c
 80015dc:	20000288 	.word	0x20000288
 80015e0:	2000026e 	.word	0x2000026e
 80015e4:	20000278 	.word	0x20000278
	  }
	  p = 1048576 - adc_P;
 80015e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015ea:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80015ee:	461a      	mov	r2, r3
 80015f0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80015f4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	  p = (((p<<31) - var2)*3125) / var1;
 80015f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015fa:	105b      	asrs	r3, r3, #1
 80015fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001600:	07db      	lsls	r3, r3, #31
 8001602:	63bb      	str	r3, [r7, #56]	; 0x38
 8001604:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001608:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800160c:	4621      	mov	r1, r4
 800160e:	ebb1 0a02 	subs.w	sl, r1, r2
 8001612:	4629      	mov	r1, r5
 8001614:	eb61 0b03 	sbc.w	fp, r1, r3
 8001618:	4652      	mov	r2, sl
 800161a:	465b      	mov	r3, fp
 800161c:	1891      	adds	r1, r2, r2
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	415b      	adcs	r3, r3
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001628:	eb12 020a 	adds.w	r2, r2, sl
 800162c:	eb43 030b 	adc.w	r3, r3, fp
 8001630:	f04f 0000 	mov.w	r0, #0
 8001634:	f04f 0100 	mov.w	r1, #0
 8001638:	0199      	lsls	r1, r3, #6
 800163a:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800163e:	0190      	lsls	r0, r2, #6
 8001640:	1812      	adds	r2, r2, r0
 8001642:	eb41 0303 	adc.w	r3, r1, r3
 8001646:	f04f 0000 	mov.w	r0, #0
 800164a:	f04f 0100 	mov.w	r1, #0
 800164e:	0099      	lsls	r1, r3, #2
 8001650:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001654:	0090      	lsls	r0, r2, #2
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	eb12 020a 	adds.w	r2, r2, sl
 800165e:	eb43 030b 	adc.w	r3, r3, fp
 8001662:	f04f 0000 	mov.w	r0, #0
 8001666:	f04f 0100 	mov.w	r1, #0
 800166a:	0099      	lsls	r1, r3, #2
 800166c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001670:	0090      	lsls	r0, r2, #2
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	eb12 010a 	adds.w	r1, r2, sl
 800167a:	6339      	str	r1, [r7, #48]	; 0x30
 800167c:	eb43 030b 	adc.w	r3, r3, fp
 8001680:	637b      	str	r3, [r7, #52]	; 0x34
 8001682:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001686:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800168a:	f7ff faad 	bl	8000be8 <__aeabi_ldivmod>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8001696:	4b4c      	ldr	r3, [pc, #304]	; (80017c8 <BMP280_ReadTemperatureAndPressure+0x3f0>)
 8001698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800169c:	b218      	sxth	r0, r3
 800169e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80016a2:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	f04f 0300 	mov.w	r3, #0
 80016ae:	0b62      	lsrs	r2, r4, #13
 80016b0:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 80016b4:	136b      	asrs	r3, r5, #13
 80016b6:	fb02 f501 	mul.w	r5, r2, r1
 80016ba:	fb00 f403 	mul.w	r4, r0, r3
 80016be:	442c      	add	r4, r5
 80016c0:	fba0 0102 	umull	r0, r1, r0, r2
 80016c4:	1863      	adds	r3, r4, r1
 80016c6:	4619      	mov	r1, r3
 80016c8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	0b62      	lsrs	r2, r4, #13
 80016d6:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 80016da:	136b      	asrs	r3, r5, #13
 80016dc:	fb02 f501 	mul.w	r5, r2, r1
 80016e0:	fb00 f403 	mul.w	r4, r0, r3
 80016e4:	442c      	add	r4, r5
 80016e6:	fba0 0102 	umull	r0, r1, r0, r2
 80016ea:	1863      	adds	r3, r4, r1
 80016ec:	4619      	mov	r1, r3
 80016ee:	f04f 0200 	mov.w	r2, #0
 80016f2:	f04f 0300 	mov.w	r3, #0
 80016f6:	0e42      	lsrs	r2, r0, #25
 80016f8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80016fc:	164b      	asrs	r3, r1, #25
 80016fe:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	  var2 = (((int64_t)p8) * p) >> 19;
 8001702:	4b32      	ldr	r3, [pc, #200]	; (80017cc <BMP280_ReadTemperatureAndPressure+0x3f4>)
 8001704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001708:	b21a      	sxth	r2, r3
 800170a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800170e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001710:	fb03 f001 	mul.w	r0, r3, r1
 8001714:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001716:	fb02 f101 	mul.w	r1, r2, r1
 800171a:	1844      	adds	r4, r0, r1
 800171c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800171e:	fba1 0102 	umull	r0, r1, r1, r2
 8001722:	1863      	adds	r3, r4, r1
 8001724:	4619      	mov	r1, r3
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	0cc2      	lsrs	r2, r0, #19
 8001730:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001734:	14cb      	asrs	r3, r1, #19
 8001736:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 800173a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800173e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001742:	1884      	adds	r4, r0, r2
 8001744:	62bc      	str	r4, [r7, #40]	; 0x28
 8001746:	eb41 0303 	adc.w	r3, r1, r3
 800174a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800174c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001750:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001754:	4621      	mov	r1, r4
 8001756:	1889      	adds	r1, r1, r2
 8001758:	6239      	str	r1, [r7, #32]
 800175a:	4629      	mov	r1, r5
 800175c:	eb43 0101 	adc.w	r1, r3, r1
 8001760:	6279      	str	r1, [r7, #36]	; 0x24
 8001762:	f04f 0000 	mov.w	r0, #0
 8001766:	f04f 0100 	mov.w	r1, #0
 800176a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800176e:	4623      	mov	r3, r4
 8001770:	0a18      	lsrs	r0, r3, #8
 8001772:	462b      	mov	r3, r5
 8001774:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001778:	462b      	mov	r3, r5
 800177a:	1219      	asrs	r1, r3, #8
 800177c:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <BMP280_ReadTemperatureAndPressure+0x3f8>)
 800177e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001782:	b21c      	sxth	r4, r3
 8001784:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	f04f 0300 	mov.w	r3, #0
 8001790:	012b      	lsls	r3, r5, #4
 8001792:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001796:	0122      	lsls	r2, r4, #4
 8001798:	1884      	adds	r4, r0, r2
 800179a:	603c      	str	r4, [r7, #0]
 800179c:	eb41 0303 	adc.w	r3, r1, r3
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80017a6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	  *pressure = (int32_t)p/256;
 80017aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	da00      	bge.n	80017b2 <BMP280_ReadTemperatureAndPressure+0x3da>
 80017b0:	33ff      	adds	r3, #255	; 0xff
 80017b2:	121b      	asrs	r3, r3, #8
 80017b4:	461a      	mov	r2, r3
 80017b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017b8:	601a      	str	r2, [r3, #0]

	  return 0;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3770      	adds	r7, #112	; 0x70
 80017c0:	46bd      	mov	sp, r7
 80017c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017c6:	bf00      	nop
 80017c8:	2000028a 	.word	0x2000028a
 80017cc:	2000027a 	.word	0x2000027a
 80017d0:	20000270 	.word	0x20000270

080017d4 <transmit>:
/* USER CODE BEGIN 0 */
#define COUNTOF(_BUFF_) (sizeof(_BUFF_) / sizeof(*(_BUFF_)))
#define RESPOND(str) transmit(str, COUNTOF(str))

void transmit(char* stream, size_t length)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)stream, length-1, 500);
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	3b01      	subs	r3, #1
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	480a      	ldr	r0, [pc, #40]	; (8001818 <transmit+0x44>)
 80017ee:	f002 ff17 	bl	8004620 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80017f2:	2201      	movs	r2, #1
 80017f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017f8:	4808      	ldr	r0, [pc, #32]	; (800181c <transmit+0x48>)
 80017fa:	f001 f85b 	bl	80028b4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80017fe:	2032      	movs	r0, #50	; 0x32
 8001800:	f000 fda2 	bl	8002348 <HAL_Delay>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001804:	2200      	movs	r2, #0
 8001806:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800180a:	4804      	ldr	r0, [pc, #16]	; (800181c <transmit+0x48>)
 800180c:	f001 f852 	bl	80028b4 <HAL_GPIO_WritePin>
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000294 	.word	0x20000294
 800181c:	40020400 	.word	0x40020400

08001820 <pid>:

float pid(float temp, float* e_sum, float set)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	ed87 0a03 	vstr	s0, [r7, #12]
 800182a:	60b8      	str	r0, [r7, #8]
 800182c:	edc7 0a01 	vstr	s1, [r7, #4]
	return 0;
 8001830:	f04f 0300 	mov.w	r3, #0
 8001834:	ee07 3a90 	vmov	s15, r3
}
 8001838:	eeb0 0a67 	vmov.f32	s0, s15
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800184e:	f000 fd1e 	bl	800228e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001852:	f000 f88f 	bl	8001974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001856:	f000 f991 	bl	8001b7c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800185a:	f000 f931 	bl	8001ac0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800185e:	f000 f95f 	bl	8001b20 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8001862:	f000 f8ef 	bl	8001a44 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  BMP280_Init(&hspi1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 8001866:	2301      	movs	r3, #1
 8001868:	2203      	movs	r2, #3
 800186a:	2101      	movs	r1, #1
 800186c:	4834      	ldr	r0, [pc, #208]	; (8001940 <main+0xf8>)
 800186e:	f7ff fc5b 	bl	8001128 <BMP280_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001872:	2101      	movs	r1, #1
 8001874:	4833      	ldr	r0, [pc, #204]	; (8001944 <main+0xfc>)
 8001876:	f001 f836 	bl	80028e6 <HAL_GPIO_TogglePin>

	  // COMMANDS
	  uint8_t key[4];
	  HAL_StatusTypeDef status = HAL_UART_Receive(&huart3, key, 4, 100);
 800187a:	1d39      	adds	r1, r7, #4
 800187c:	2364      	movs	r3, #100	; 0x64
 800187e:	2204      	movs	r2, #4
 8001880:	4831      	ldr	r0, [pc, #196]	; (8001948 <main+0x100>)
 8001882:	f002 ff60 	bl	8004746 <HAL_UART_Receive>
 8001886:	4603      	mov	r3, r0
 8001888:	73fb      	strb	r3, [r7, #15]

	  if (status == HAL_OK)
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d125      	bne.n	80018dc <main+0x94>
	  {
		  RESPOND("Received ");
 8001890:	210a      	movs	r1, #10
 8001892:	482e      	ldr	r0, [pc, #184]	; (800194c <main+0x104>)
 8001894:	f7ff ff9e 	bl	80017d4 <transmit>
		  transmit((char*)key, 5);
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	2105      	movs	r1, #5
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff99 	bl	80017d4 <transmit>
		  RESPOND("\n\r");
 80018a2:	2103      	movs	r1, #3
 80018a4:	482a      	ldr	r0, [pc, #168]	; (8001950 <main+0x108>)
 80018a6:	f7ff ff95 	bl	80017d4 <transmit>

		  if (key[0] == 'S')
 80018aa:	793b      	ldrb	r3, [r7, #4]
 80018ac:	2b53      	cmp	r3, #83	; 0x53
 80018ae:	d115      	bne.n	80018dc <main+0x94>
		  {
			  RESPOND("Trying to set the temperature\n\r");
 80018b0:	2120      	movs	r1, #32
 80018b2:	4828      	ldr	r0, [pc, #160]	; (8001954 <main+0x10c>)
 80018b4:	f7ff ff8e 	bl	80017d4 <transmit>
			  set_value = (key[1] - '0') * 100 + (key[2] - '0') * 10 + key[3] - '0';
 80018b8:	797b      	ldrb	r3, [r7, #5]
 80018ba:	3b30      	subs	r3, #48	; 0x30
 80018bc:	2264      	movs	r2, #100	; 0x64
 80018be:	fb02 f103 	mul.w	r1, r2, r3
 80018c2:	79bb      	ldrb	r3, [r7, #6]
 80018c4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	440b      	add	r3, r1
 80018d2:	79fa      	ldrb	r2, [r7, #7]
 80018d4:	4413      	add	r3, r2
 80018d6:	3b30      	subs	r3, #48	; 0x30
 80018d8:	4a1f      	ldr	r2, [pc, #124]	; (8001958 <main+0x110>)
 80018da:	6013      	str	r3, [r2, #0]
		  }
	  }

	  // DATA READ
	  BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 80018dc:	491f      	ldr	r1, [pc, #124]	; (800195c <main+0x114>)
 80018de:	4820      	ldr	r0, [pc, #128]	; (8001960 <main+0x118>)
 80018e0:	f7ff fd7a 	bl	80013d8 <BMP280_ReadTemperatureAndPressure>

	  // PID
	  float u = pid(temperature, &e_sum_pid, (float)set_value);
 80018e4:	4b1e      	ldr	r3, [pc, #120]	; (8001960 <main+0x118>)
 80018e6:	edd3 7a00 	vldr	s15, [r3]
 80018ea:	4b1b      	ldr	r3, [pc, #108]	; (8001958 <main+0x110>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	ee07 3a10 	vmov	s14, r3
 80018f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80018f6:	eef0 0a47 	vmov.f32	s1, s14
 80018fa:	481a      	ldr	r0, [pc, #104]	; (8001964 <main+0x11c>)
 80018fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001900:	f7ff ff8e 	bl	8001820 <pid>
 8001904:	ed87 0a02 	vstr	s0, [r7, #8]

	  // SET U
	  u_DEBUG = u;
 8001908:	4a17      	ldr	r2, [pc, #92]	; (8001968 <main+0x120>)
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	6013      	str	r3, [r2, #0]

	  // SENDING DATA OUT
	  snprintf(text, sizeof(text), "%.3f\n\r", (double)temperature);
 800190e:	4b14      	ldr	r3, [pc, #80]	; (8001960 <main+0x118>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7fe fe38 	bl	8000588 <__aeabi_f2d>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	e9cd 2300 	strd	r2, r3, [sp]
 8001920:	4a12      	ldr	r2, [pc, #72]	; (800196c <main+0x124>)
 8001922:	2164      	movs	r1, #100	; 0x64
 8001924:	4812      	ldr	r0, [pc, #72]	; (8001970 <main+0x128>)
 8001926:	f004 fb65 	bl	8005ff4 <sniprintf>
	  transmit(text, strlen(text) + 1);
 800192a:	4811      	ldr	r0, [pc, #68]	; (8001970 <main+0x128>)
 800192c:	f7fe fc70 	bl	8000210 <strlen>
 8001930:	4603      	mov	r3, r0
 8001932:	3301      	adds	r3, #1
 8001934:	4619      	mov	r1, r3
 8001936:	480e      	ldr	r0, [pc, #56]	; (8001970 <main+0x128>)
 8001938:	f7ff ff4c 	bl	80017d4 <transmit>
  {
 800193c:	e799      	b.n	8001872 <main+0x2a>
 800193e:	bf00      	nop
 8001940:	2000072c 	.word	0x2000072c
 8001944:	40020400 	.word	0x40020400
 8001948:	20000294 	.word	0x20000294
 800194c:	08008490 	.word	0x08008490
 8001950:	0800849c 	.word	0x0800849c
 8001954:	080084a0 	.word	0x080084a0
 8001958:	20000000 	.word	0x20000000
 800195c:	20000724 	.word	0x20000724
 8001960:	20000720 	.word	0x20000720
 8001964:	2000071c 	.word	0x2000071c
 8001968:	20000728 	.word	0x20000728
 800196c:	080084c0 	.word	0x080084c0
 8001970:	200001fc 	.word	0x200001fc

08001974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b094      	sub	sp, #80	; 0x50
 8001978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800197a:	f107 0320 	add.w	r3, r7, #32
 800197e:	2230      	movs	r2, #48	; 0x30
 8001980:	2100      	movs	r1, #0
 8001982:	4618      	mov	r0, r3
 8001984:	f003 fec4 	bl	8005710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001988:	f107 030c 	add.w	r3, r7, #12
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001998:	f001 f908 	bl	8002bac <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800199c:	4b27      	ldr	r3, [pc, #156]	; (8001a3c <SystemClock_Config+0xc8>)
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	4a26      	ldr	r2, [pc, #152]	; (8001a3c <SystemClock_Config+0xc8>)
 80019a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a6:	6413      	str	r3, [r2, #64]	; 0x40
 80019a8:	4b24      	ldr	r3, [pc, #144]	; (8001a3c <SystemClock_Config+0xc8>)
 80019aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019b4:	4b22      	ldr	r3, [pc, #136]	; (8001a40 <SystemClock_Config+0xcc>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019bc:	4a20      	ldr	r2, [pc, #128]	; (8001a40 <SystemClock_Config+0xcc>)
 80019be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	4b1e      	ldr	r3, [pc, #120]	; (8001a40 <SystemClock_Config+0xcc>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019cc:	607b      	str	r3, [r7, #4]
 80019ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019d0:	2301      	movs	r3, #1
 80019d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80019d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019da:	2302      	movs	r3, #2
 80019dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019e4:	2304      	movs	r3, #4
 80019e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80019e8:	2348      	movs	r3, #72	; 0x48
 80019ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019ec:	2302      	movs	r3, #2
 80019ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80019f0:	2303      	movs	r3, #3
 80019f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f4:	f107 0320 	add.w	r3, r7, #32
 80019f8:	4618      	mov	r0, r3
 80019fa:	f001 f8e7 	bl	8002bcc <HAL_RCC_OscConfig>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a04:	f000 f9b2 	bl	8001d6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a08:	230f      	movs	r3, #15
 8001a0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a1e:	f107 030c 	add.w	r3, r7, #12
 8001a22:	2102      	movs	r1, #2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f001 fb75 	bl	8003114 <HAL_RCC_ClockConfig>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a30:	f000 f99c 	bl	8001d6c <Error_Handler>
  }
}
 8001a34:	bf00      	nop
 8001a36:	3750      	adds	r7, #80	; 0x50
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40007000 	.word	0x40007000

08001a44 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a48:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <MX_SPI1_Init+0x74>)
 8001a4a:	4a1c      	ldr	r2, [pc, #112]	; (8001abc <MX_SPI1_Init+0x78>)
 8001a4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <MX_SPI1_Init+0x74>)
 8001a50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a56:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <MX_SPI1_Init+0x74>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a5c:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <MX_SPI1_Init+0x74>)
 8001a5e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a62:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a64:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <MX_SPI1_Init+0x74>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a6a:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <MX_SPI1_Init+0x74>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <MX_SPI1_Init+0x74>)
 8001a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a76:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <MX_SPI1_Init+0x74>)
 8001a7a:	2218      	movs	r2, #24
 8001a7c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <MX_SPI1_Init+0x74>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <MX_SPI1_Init+0x74>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <MX_SPI1_Init+0x74>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <MX_SPI1_Init+0x74>)
 8001a92:	2207      	movs	r2, #7
 8001a94:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a96:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <MX_SPI1_Init+0x74>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <MX_SPI1_Init+0x74>)
 8001a9e:	2208      	movs	r2, #8
 8001aa0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001aa2:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <MX_SPI1_Init+0x74>)
 8001aa4:	f002 f928 	bl	8003cf8 <HAL_SPI_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001aae:	f000 f95d 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	2000072c 	.word	0x2000072c
 8001abc:	40013000 	.word	0x40013000

08001ac0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ac4:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <MX_USART3_UART_Init+0x58>)
 8001ac6:	4a15      	ldr	r2, [pc, #84]	; (8001b1c <MX_USART3_UART_Init+0x5c>)
 8001ac8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001aca:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <MX_USART3_UART_Init+0x58>)
 8001acc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ad0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ad2:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <MX_USART3_UART_Init+0x58>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ad8:	4b0f      	ldr	r3, [pc, #60]	; (8001b18 <MX_USART3_UART_Init+0x58>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <MX_USART3_UART_Init+0x58>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <MX_USART3_UART_Init+0x58>)
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aea:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <MX_USART3_UART_Init+0x58>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <MX_USART3_UART_Init+0x58>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001af6:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <MX_USART3_UART_Init+0x58>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <MX_USART3_UART_Init+0x58>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b02:	4805      	ldr	r0, [pc, #20]	; (8001b18 <MX_USART3_UART_Init+0x58>)
 8001b04:	f002 fd3e 	bl	8004584 <HAL_UART_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001b0e:	f000 f92d 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000294 	.word	0x20000294
 8001b1c:	40004800 	.word	0x40004800

08001b20 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001b24:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b26:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001b2a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b2e:	2206      	movs	r2, #6
 8001b30:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001b32:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b34:	2202      	movs	r2, #2
 8001b36:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b40:	2202      	movs	r2, #2
 8001b42:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001b56:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001b62:	4805      	ldr	r0, [pc, #20]	; (8001b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b64:	f000 fed9 	bl	800291a <HAL_PCD_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001b6e:	f000 f8fd 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000318 	.word	0x20000318

08001b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08c      	sub	sp, #48	; 0x30
 8001b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b82:	f107 031c 	add.w	r3, r7, #28
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]
 8001b8c:	609a      	str	r2, [r3, #8]
 8001b8e:	60da      	str	r2, [r3, #12]
 8001b90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b92:	4b71      	ldr	r3, [pc, #452]	; (8001d58 <MX_GPIO_Init+0x1dc>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	4a70      	ldr	r2, [pc, #448]	; (8001d58 <MX_GPIO_Init+0x1dc>)
 8001b98:	f043 0304 	orr.w	r3, r3, #4
 8001b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9e:	4b6e      	ldr	r3, [pc, #440]	; (8001d58 <MX_GPIO_Init+0x1dc>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	61bb      	str	r3, [r7, #24]
 8001ba8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001baa:	4b6b      	ldr	r3, [pc, #428]	; (8001d58 <MX_GPIO_Init+0x1dc>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4a6a      	ldr	r2, [pc, #424]	; (8001d58 <MX_GPIO_Init+0x1dc>)
 8001bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4b68      	ldr	r3, [pc, #416]	; (8001d58 <MX_GPIO_Init+0x1dc>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc2:	4b65      	ldr	r3, [pc, #404]	; (8001d58 <MX_GPIO_Init+0x1dc>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	4a64      	ldr	r2, [pc, #400]	; (8001d58 <MX_GPIO_Init+0x1dc>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bce:	4b62      	ldr	r3, [pc, #392]	; (8001d58 <MX_GPIO_Init+0x1dc>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bda:	4b5f      	ldr	r3, [pc, #380]	; (8001d58 <MX_GPIO_Init+0x1dc>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a5e      	ldr	r2, [pc, #376]	; (8001d58 <MX_GPIO_Init+0x1dc>)
 8001be0:	f043 0302 	orr.w	r3, r3, #2
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b5c      	ldr	r3, [pc, #368]	; (8001d58 <MX_GPIO_Init+0x1dc>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bf2:	4b59      	ldr	r3, [pc, #356]	; (8001d58 <MX_GPIO_Init+0x1dc>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a58      	ldr	r2, [pc, #352]	; (8001d58 <MX_GPIO_Init+0x1dc>)
 8001bf8:	f043 0308 	orr.w	r3, r3, #8
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b56      	ldr	r3, [pc, #344]	; (8001d58 <MX_GPIO_Init+0x1dc>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c0a:	4b53      	ldr	r3, [pc, #332]	; (8001d58 <MX_GPIO_Init+0x1dc>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	4a52      	ldr	r2, [pc, #328]	; (8001d58 <MX_GPIO_Init+0x1dc>)
 8001c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c14:	6313      	str	r3, [r2, #48]	; 0x30
 8001c16:	4b50      	ldr	r3, [pc, #320]	; (8001d58 <MX_GPIO_Init+0x1dc>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c1e:	607b      	str	r3, [r7, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 8001c22:	2200      	movs	r2, #0
 8001c24:	2110      	movs	r1, #16
 8001c26:	484d      	ldr	r0, [pc, #308]	; (8001d5c <MX_GPIO_Init+0x1e0>)
 8001c28:	f000 fe44 	bl	80028b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f244 0181 	movw	r1, #16513	; 0x4081
 8001c32:	484b      	ldr	r0, [pc, #300]	; (8001d60 <MX_GPIO_Init+0x1e4>)
 8001c34:	f000 fe3e 	bl	80028b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2140      	movs	r1, #64	; 0x40
 8001c3c:	4849      	ldr	r0, [pc, #292]	; (8001d64 <MX_GPIO_Init+0x1e8>)
 8001c3e:	f000 fe39 	bl	80028b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001c42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c48:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001c52:	f107 031c 	add.w	r3, r7, #28
 8001c56:	4619      	mov	r1, r3
 8001c58:	4843      	ldr	r0, [pc, #268]	; (8001d68 <MX_GPIO_Init+0x1ec>)
 8001c5a:	f000 fc7f 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001c5e:	2332      	movs	r3, #50	; 0x32
 8001c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c62:	2302      	movs	r3, #2
 8001c64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c6e:	230b      	movs	r3, #11
 8001c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c72:	f107 031c 	add.w	r3, r7, #28
 8001c76:	4619      	mov	r1, r3
 8001c78:	483b      	ldr	r0, [pc, #236]	; (8001d68 <MX_GPIO_Init+0x1ec>)
 8001c7a:	f000 fc6f 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001c7e:	2386      	movs	r3, #134	; 0x86
 8001c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c8e:	230b      	movs	r3, #11
 8001c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c92:	f107 031c 	add.w	r3, r7, #28
 8001c96:	4619      	mov	r1, r3
 8001c98:	4830      	ldr	r0, [pc, #192]	; (8001d5c <MX_GPIO_Init+0x1e0>)
 8001c9a:	f000 fc5f 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CSB_Pin */
  GPIO_InitStruct.Pin = SPI1_CSB_Pin;
 8001c9e:	2310      	movs	r3, #16
 8001ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001caa:	2300      	movs	r3, #0
 8001cac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CSB_GPIO_Port, &GPIO_InitStruct);
 8001cae:	f107 031c 	add.w	r3, r7, #28
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4829      	ldr	r0, [pc, #164]	; (8001d5c <MX_GPIO_Init+0x1e0>)
 8001cb6:	f000 fc51 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001cba:	f244 0381 	movw	r3, #16513	; 0x4081
 8001cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ccc:	f107 031c 	add.w	r3, r7, #28
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4823      	ldr	r0, [pc, #140]	; (8001d60 <MX_GPIO_Init+0x1e4>)
 8001cd4:	f000 fc42 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001cd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cea:	230b      	movs	r3, #11
 8001cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001cee:	f107 031c 	add.w	r3, r7, #28
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	481a      	ldr	r0, [pc, #104]	; (8001d60 <MX_GPIO_Init+0x1e4>)
 8001cf6:	f000 fc31 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001cfa:	2340      	movs	r3, #64	; 0x40
 8001cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d06:	2300      	movs	r3, #0
 8001d08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001d0a:	f107 031c 	add.w	r3, r7, #28
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4814      	ldr	r0, [pc, #80]	; (8001d64 <MX_GPIO_Init+0x1e8>)
 8001d12:	f000 fc23 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001d16:	2380      	movs	r3, #128	; 0x80
 8001d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001d22:	f107 031c 	add.w	r3, r7, #28
 8001d26:	4619      	mov	r1, r3
 8001d28:	480e      	ldr	r0, [pc, #56]	; (8001d64 <MX_GPIO_Init+0x1e8>)
 8001d2a:	f000 fc17 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001d2e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d34:	2302      	movs	r3, #2
 8001d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d40:	230b      	movs	r3, #11
 8001d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d44:	f107 031c 	add.w	r3, r7, #28
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4806      	ldr	r0, [pc, #24]	; (8001d64 <MX_GPIO_Init+0x1e8>)
 8001d4c:	f000 fc06 	bl	800255c <HAL_GPIO_Init>

}
 8001d50:	bf00      	nop
 8001d52:	3730      	adds	r7, #48	; 0x30
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40020000 	.word	0x40020000
 8001d60:	40020400 	.word	0x40020400
 8001d64:	40021800 	.word	0x40021800
 8001d68:	40020800 	.word	0x40020800

08001d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d70:	b672      	cpsid	i
}
 8001d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <Error_Handler+0x8>
	...

08001d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <HAL_MspInit+0x44>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	4a0e      	ldr	r2, [pc, #56]	; (8001dbc <HAL_MspInit+0x44>)
 8001d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d88:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8a:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <HAL_MspInit+0x44>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d96:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <HAL_MspInit+0x44>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9a:	4a08      	ldr	r2, [pc, #32]	; (8001dbc <HAL_MspInit+0x44>)
 8001d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da0:	6453      	str	r3, [r2, #68]	; 0x44
 8001da2:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <HAL_MspInit+0x44>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001daa:	603b      	str	r3, [r7, #0]
 8001dac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800

08001dc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08a      	sub	sp, #40	; 0x28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a25      	ldr	r2, [pc, #148]	; (8001e74 <HAL_SPI_MspInit+0xb4>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d143      	bne.n	8001e6a <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001de2:	4b25      	ldr	r3, [pc, #148]	; (8001e78 <HAL_SPI_MspInit+0xb8>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	4a24      	ldr	r2, [pc, #144]	; (8001e78 <HAL_SPI_MspInit+0xb8>)
 8001de8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dec:	6453      	str	r3, [r2, #68]	; 0x44
 8001dee:	4b22      	ldr	r3, [pc, #136]	; (8001e78 <HAL_SPI_MspInit+0xb8>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfa:	4b1f      	ldr	r3, [pc, #124]	; (8001e78 <HAL_SPI_MspInit+0xb8>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	4a1e      	ldr	r2, [pc, #120]	; (8001e78 <HAL_SPI_MspInit+0xb8>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	6313      	str	r3, [r2, #48]	; 0x30
 8001e06:	4b1c      	ldr	r3, [pc, #112]	; (8001e78 <HAL_SPI_MspInit+0xb8>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e12:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <HAL_SPI_MspInit+0xb8>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a18      	ldr	r2, [pc, #96]	; (8001e78 <HAL_SPI_MspInit+0xb8>)
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <HAL_SPI_MspInit+0xb8>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	60bb      	str	r3, [r7, #8]
 8001e28:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001e2a:	2360      	movs	r3, #96	; 0x60
 8001e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e36:	2303      	movs	r3, #3
 8001e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e3a:	2305      	movs	r3, #5
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3e:	f107 0314 	add.w	r3, r7, #20
 8001e42:	4619      	mov	r1, r3
 8001e44:	480d      	ldr	r0, [pc, #52]	; (8001e7c <HAL_SPI_MspInit+0xbc>)
 8001e46:	f000 fb89 	bl	800255c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e4a:	2320      	movs	r3, #32
 8001e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e56:	2303      	movs	r3, #3
 8001e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e5a:	2305      	movs	r3, #5
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5e:	f107 0314 	add.w	r3, r7, #20
 8001e62:	4619      	mov	r1, r3
 8001e64:	4806      	ldr	r0, [pc, #24]	; (8001e80 <HAL_SPI_MspInit+0xc0>)
 8001e66:	f000 fb79 	bl	800255c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e6a:	bf00      	nop
 8001e6c:	3728      	adds	r7, #40	; 0x28
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40013000 	.word	0x40013000
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40020000 	.word	0x40020000
 8001e80:	40020400 	.word	0x40020400

08001e84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b0aa      	sub	sp, #168	; 0xa8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e9c:	f107 0310 	add.w	r3, r7, #16
 8001ea0:	2284      	movs	r2, #132	; 0x84
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f003 fc33 	bl	8005710 <memset>
  if(huart->Instance==USART3)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a22      	ldr	r2, [pc, #136]	; (8001f38 <HAL_UART_MspInit+0xb4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d13c      	bne.n	8001f2e <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001eb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eb8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ebe:	f107 0310 	add.w	r3, r7, #16
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f001 fb28 	bl	8003518 <HAL_RCCEx_PeriphCLKConfig>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001ece:	f7ff ff4d 	bl	8001d6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ed2:	4b1a      	ldr	r3, [pc, #104]	; (8001f3c <HAL_UART_MspInit+0xb8>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	4a19      	ldr	r2, [pc, #100]	; (8001f3c <HAL_UART_MspInit+0xb8>)
 8001ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001edc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ede:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <HAL_UART_MspInit+0xb8>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eea:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <HAL_UART_MspInit+0xb8>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	4a13      	ldr	r2, [pc, #76]	; (8001f3c <HAL_UART_MspInit+0xb8>)
 8001ef0:	f043 0308 	orr.w	r3, r3, #8
 8001ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef6:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <HAL_UART_MspInit+0xb8>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001f02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f16:	2303      	movs	r3, #3
 8001f18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f1c:	2307      	movs	r3, #7
 8001f1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f22:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f26:	4619      	mov	r1, r3
 8001f28:	4805      	ldr	r0, [pc, #20]	; (8001f40 <HAL_UART_MspInit+0xbc>)
 8001f2a:	f000 fb17 	bl	800255c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f2e:	bf00      	nop
 8001f30:	37a8      	adds	r7, #168	; 0xa8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40004800 	.word	0x40004800
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40020c00 	.word	0x40020c00

08001f44 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b0ac      	sub	sp, #176	; 0xb0
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f5c:	f107 0318 	add.w	r3, r7, #24
 8001f60:	2284      	movs	r2, #132	; 0x84
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f003 fbd3 	bl	8005710 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f72:	d159      	bne.n	8002028 <HAL_PCD_MspInit+0xe4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001f74:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f78:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f80:	f107 0318 	add.w	r3, r7, #24
 8001f84:	4618      	mov	r0, r3
 8001f86:	f001 fac7 	bl	8003518 <HAL_RCCEx_PeriphCLKConfig>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001f90:	f7ff feec 	bl	8001d6c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f94:	4b26      	ldr	r3, [pc, #152]	; (8002030 <HAL_PCD_MspInit+0xec>)
 8001f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f98:	4a25      	ldr	r2, [pc, #148]	; (8002030 <HAL_PCD_MspInit+0xec>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa0:	4b23      	ldr	r3, [pc, #140]	; (8002030 <HAL_PCD_MspInit+0xec>)
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001fac:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001fb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001fc6:	230a      	movs	r3, #10
 8001fc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fcc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4818      	ldr	r0, [pc, #96]	; (8002034 <HAL_PCD_MspInit+0xf0>)
 8001fd4:	f000 fac2 	bl	800255c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001fd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001fec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4810      	ldr	r0, [pc, #64]	; (8002034 <HAL_PCD_MspInit+0xf0>)
 8001ff4:	f000 fab2 	bl	800255c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ff8:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <HAL_PCD_MspInit+0xec>)
 8001ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ffc:	4a0c      	ldr	r2, [pc, #48]	; (8002030 <HAL_PCD_MspInit+0xec>)
 8001ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002002:	6353      	str	r3, [r2, #52]	; 0x34
 8002004:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <HAL_PCD_MspInit+0xec>)
 8002006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	4b07      	ldr	r3, [pc, #28]	; (8002030 <HAL_PCD_MspInit+0xec>)
 8002012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002014:	4a06      	ldr	r2, [pc, #24]	; (8002030 <HAL_PCD_MspInit+0xec>)
 8002016:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800201a:	6453      	str	r3, [r2, #68]	; 0x44
 800201c:	4b04      	ldr	r3, [pc, #16]	; (8002030 <HAL_PCD_MspInit+0xec>)
 800201e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002020:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002028:	bf00      	nop
 800202a:	37b0      	adds	r7, #176	; 0xb0
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40023800 	.word	0x40023800
 8002034:	40020000 	.word	0x40020000

08002038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800203c:	e7fe      	b.n	800203c <NMI_Handler+0x4>

0800203e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002042:	e7fe      	b.n	8002042 <HardFault_Handler+0x4>

08002044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <MemManage_Handler+0x4>

0800204a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800204e:	e7fe      	b.n	800204e <BusFault_Handler+0x4>

08002050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002054:	e7fe      	b.n	8002054 <UsageFault_Handler+0x4>

08002056 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002084:	f000 f940 	bl	8002308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002088:	bf00      	nop
 800208a:	bd80      	pop	{r7, pc}

0800208c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
	return 1;
 8002090:	2301      	movs	r3, #1
}
 8002092:	4618      	mov	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <_kill>:

int _kill(int pid, int sig)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020a6:	f003 fb09 	bl	80056bc <__errno>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2216      	movs	r2, #22
 80020ae:	601a      	str	r2, [r3, #0]
	return -1;
 80020b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <_exit>:

void _exit (int status)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020c4:	f04f 31ff 	mov.w	r1, #4294967295
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff ffe7 	bl	800209c <_kill>
	while (1) {}		/* Make sure we hang here */
 80020ce:	e7fe      	b.n	80020ce <_exit+0x12>

080020d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	e00a      	b.n	80020f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020e2:	f3af 8000 	nop.w
 80020e6:	4601      	mov	r1, r0
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	60ba      	str	r2, [r7, #8]
 80020ee:	b2ca      	uxtb	r2, r1
 80020f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	3301      	adds	r3, #1
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	dbf0      	blt.n	80020e2 <_read+0x12>
	}

return len;
 8002100:	687b      	ldr	r3, [r7, #4]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b086      	sub	sp, #24
 800210e:	af00      	add	r7, sp, #0
 8002110:	60f8      	str	r0, [r7, #12]
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	e009      	b.n	8002130 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	60ba      	str	r2, [r7, #8]
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	3301      	adds	r3, #1
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	429a      	cmp	r2, r3
 8002136:	dbf1      	blt.n	800211c <_write+0x12>
	}
	return len;
 8002138:	687b      	ldr	r3, [r7, #4]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <_close>:

int _close(int file)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
	return -1;
 800214a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800214e:	4618      	mov	r0, r3
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800216a:	605a      	str	r2, [r3, #4]
	return 0;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <_isatty>:

int _isatty(int file)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
	return 1;
 8002182:	2301      	movs	r3, #1
}
 8002184:	4618      	mov	r0, r3
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
	return 0;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021b4:	4a14      	ldr	r2, [pc, #80]	; (8002208 <_sbrk+0x5c>)
 80021b6:	4b15      	ldr	r3, [pc, #84]	; (800220c <_sbrk+0x60>)
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021c0:	4b13      	ldr	r3, [pc, #76]	; (8002210 <_sbrk+0x64>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d102      	bne.n	80021ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021c8:	4b11      	ldr	r3, [pc, #68]	; (8002210 <_sbrk+0x64>)
 80021ca:	4a12      	ldr	r2, [pc, #72]	; (8002214 <_sbrk+0x68>)
 80021cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ce:	4b10      	ldr	r3, [pc, #64]	; (8002210 <_sbrk+0x64>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4413      	add	r3, r2
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d207      	bcs.n	80021ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021dc:	f003 fa6e 	bl	80056bc <__errno>
 80021e0:	4603      	mov	r3, r0
 80021e2:	220c      	movs	r2, #12
 80021e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021e6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ea:	e009      	b.n	8002200 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021ec:	4b08      	ldr	r3, [pc, #32]	; (8002210 <_sbrk+0x64>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021f2:	4b07      	ldr	r3, [pc, #28]	; (8002210 <_sbrk+0x64>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	4a05      	ldr	r2, [pc, #20]	; (8002210 <_sbrk+0x64>)
 80021fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021fe:	68fb      	ldr	r3, [r7, #12]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20050000 	.word	0x20050000
 800220c:	00000400 	.word	0x00000400
 8002210:	20000260 	.word	0x20000260
 8002214:	200007a8 	.word	0x200007a8

08002218 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800221c:	4b06      	ldr	r3, [pc, #24]	; (8002238 <SystemInit+0x20>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002222:	4a05      	ldr	r2, [pc, #20]	; (8002238 <SystemInit+0x20>)
 8002224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800223c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002274 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002240:	480d      	ldr	r0, [pc, #52]	; (8002278 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002242:	490e      	ldr	r1, [pc, #56]	; (800227c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002244:	4a0e      	ldr	r2, [pc, #56]	; (8002280 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002248:	e002      	b.n	8002250 <LoopCopyDataInit>

0800224a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800224a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800224c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800224e:	3304      	adds	r3, #4

08002250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002254:	d3f9      	bcc.n	800224a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002256:	4a0b      	ldr	r2, [pc, #44]	; (8002284 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002258:	4c0b      	ldr	r4, [pc, #44]	; (8002288 <LoopFillZerobss+0x26>)
  movs r3, #0
 800225a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800225c:	e001      	b.n	8002262 <LoopFillZerobss>

0800225e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800225e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002260:	3204      	adds	r2, #4

08002262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002264:	d3fb      	bcc.n	800225e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002266:	f7ff ffd7 	bl	8002218 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800226a:	f003 fa2d 	bl	80056c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800226e:	f7ff faeb 	bl	8001848 <main>
  bx  lr    
 8002272:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002274:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800227c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002280:	080088d4 	.word	0x080088d4
  ldr r2, =_sbss
 8002284:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002288:	200007a4 	.word	0x200007a4

0800228c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800228c:	e7fe      	b.n	800228c <ADC_IRQHandler>

0800228e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002292:	2003      	movs	r0, #3
 8002294:	f000 f92e 	bl	80024f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002298:	2000      	movs	r0, #0
 800229a:	f000 f805 	bl	80022a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800229e:	f7ff fd6b 	bl	8001d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022b0:	4b12      	ldr	r3, [pc, #72]	; (80022fc <HAL_InitTick+0x54>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b12      	ldr	r3, [pc, #72]	; (8002300 <HAL_InitTick+0x58>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	4619      	mov	r1, r3
 80022ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022be:	fbb3 f3f1 	udiv	r3, r3, r1
 80022c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 f93b 	bl	8002542 <HAL_SYSTICK_Config>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e00e      	b.n	80022f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b0f      	cmp	r3, #15
 80022da:	d80a      	bhi.n	80022f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022dc:	2200      	movs	r2, #0
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	f04f 30ff 	mov.w	r0, #4294967295
 80022e4:	f000 f911 	bl	800250a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022e8:	4a06      	ldr	r2, [pc, #24]	; (8002304 <HAL_InitTick+0x5c>)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	e000      	b.n	80022f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20000004 	.word	0x20000004
 8002300:	2000000c 	.word	0x2000000c
 8002304:	20000008 	.word	0x20000008

08002308 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800230c:	4b06      	ldr	r3, [pc, #24]	; (8002328 <HAL_IncTick+0x20>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	461a      	mov	r2, r3
 8002312:	4b06      	ldr	r3, [pc, #24]	; (800232c <HAL_IncTick+0x24>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4413      	add	r3, r2
 8002318:	4a04      	ldr	r2, [pc, #16]	; (800232c <HAL_IncTick+0x24>)
 800231a:	6013      	str	r3, [r2, #0]
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	2000000c 	.word	0x2000000c
 800232c:	20000790 	.word	0x20000790

08002330 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return uwTick;
 8002334:	4b03      	ldr	r3, [pc, #12]	; (8002344 <HAL_GetTick+0x14>)
 8002336:	681b      	ldr	r3, [r3, #0]
}
 8002338:	4618      	mov	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	20000790 	.word	0x20000790

08002348 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002350:	f7ff ffee 	bl	8002330 <HAL_GetTick>
 8002354:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002360:	d005      	beq.n	800236e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002362:	4b0a      	ldr	r3, [pc, #40]	; (800238c <HAL_Delay+0x44>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	461a      	mov	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4413      	add	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800236e:	bf00      	nop
 8002370:	f7ff ffde 	bl	8002330 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	429a      	cmp	r2, r3
 800237e:	d8f7      	bhi.n	8002370 <HAL_Delay+0x28>
  {
  }
}
 8002380:	bf00      	nop
 8002382:	bf00      	nop
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	2000000c 	.word	0x2000000c

08002390 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <__NVIC_SetPriorityGrouping+0x40>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023ac:	4013      	ands	r3, r2
 80023ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <__NVIC_SetPriorityGrouping+0x44>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023be:	4a04      	ldr	r2, [pc, #16]	; (80023d0 <__NVIC_SetPriorityGrouping+0x40>)
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	60d3      	str	r3, [r2, #12]
}
 80023c4:	bf00      	nop
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	e000ed00 	.word	0xe000ed00
 80023d4:	05fa0000 	.word	0x05fa0000

080023d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023dc:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <__NVIC_GetPriorityGrouping+0x18>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	0a1b      	lsrs	r3, r3, #8
 80023e2:	f003 0307 	and.w	r3, r3, #7
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	6039      	str	r1, [r7, #0]
 80023fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002404:	2b00      	cmp	r3, #0
 8002406:	db0a      	blt.n	800241e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	b2da      	uxtb	r2, r3
 800240c:	490c      	ldr	r1, [pc, #48]	; (8002440 <__NVIC_SetPriority+0x4c>)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	0112      	lsls	r2, r2, #4
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	440b      	add	r3, r1
 8002418:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800241c:	e00a      	b.n	8002434 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	b2da      	uxtb	r2, r3
 8002422:	4908      	ldr	r1, [pc, #32]	; (8002444 <__NVIC_SetPriority+0x50>)
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	3b04      	subs	r3, #4
 800242c:	0112      	lsls	r2, r2, #4
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	440b      	add	r3, r1
 8002432:	761a      	strb	r2, [r3, #24]
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	e000e100 	.word	0xe000e100
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002448:	b480      	push	{r7}
 800244a:	b089      	sub	sp, #36	; 0x24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f1c3 0307 	rsb	r3, r3, #7
 8002462:	2b04      	cmp	r3, #4
 8002464:	bf28      	it	cs
 8002466:	2304      	movcs	r3, #4
 8002468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3304      	adds	r3, #4
 800246e:	2b06      	cmp	r3, #6
 8002470:	d902      	bls.n	8002478 <NVIC_EncodePriority+0x30>
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	3b03      	subs	r3, #3
 8002476:	e000      	b.n	800247a <NVIC_EncodePriority+0x32>
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800247c:	f04f 32ff 	mov.w	r2, #4294967295
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43da      	mvns	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	401a      	ands	r2, r3
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002490:	f04f 31ff 	mov.w	r1, #4294967295
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	fa01 f303 	lsl.w	r3, r1, r3
 800249a:	43d9      	mvns	r1, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a0:	4313      	orrs	r3, r2
         );
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3724      	adds	r7, #36	; 0x24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
	...

080024b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024c0:	d301      	bcc.n	80024c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024c2:	2301      	movs	r3, #1
 80024c4:	e00f      	b.n	80024e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024c6:	4a0a      	ldr	r2, [pc, #40]	; (80024f0 <SysTick_Config+0x40>)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ce:	210f      	movs	r1, #15
 80024d0:	f04f 30ff 	mov.w	r0, #4294967295
 80024d4:	f7ff ff8e 	bl	80023f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024d8:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <SysTick_Config+0x40>)
 80024da:	2200      	movs	r2, #0
 80024dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024de:	4b04      	ldr	r3, [pc, #16]	; (80024f0 <SysTick_Config+0x40>)
 80024e0:	2207      	movs	r2, #7
 80024e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	e000e010 	.word	0xe000e010

080024f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff ff47 	bl	8002390 <__NVIC_SetPriorityGrouping>
}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800250a:	b580      	push	{r7, lr}
 800250c:	b086      	sub	sp, #24
 800250e:	af00      	add	r7, sp, #0
 8002510:	4603      	mov	r3, r0
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	607a      	str	r2, [r7, #4]
 8002516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800251c:	f7ff ff5c 	bl	80023d8 <__NVIC_GetPriorityGrouping>
 8002520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	68b9      	ldr	r1, [r7, #8]
 8002526:	6978      	ldr	r0, [r7, #20]
 8002528:	f7ff ff8e 	bl	8002448 <NVIC_EncodePriority>
 800252c:	4602      	mov	r2, r0
 800252e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002532:	4611      	mov	r1, r2
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff ff5d 	bl	80023f4 <__NVIC_SetPriority>
}
 800253a:	bf00      	nop
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff ffb0 	bl	80024b0 <SysTick_Config>
 8002550:	4603      	mov	r3, r0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800255c:	b480      	push	{r7}
 800255e:	b089      	sub	sp, #36	; 0x24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002566:	2300      	movs	r3, #0
 8002568:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800256e:	2300      	movs	r3, #0
 8002570:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002572:	2300      	movs	r3, #0
 8002574:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
 800257a:	e175      	b.n	8002868 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800257c:	2201      	movs	r2, #1
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	4013      	ands	r3, r2
 800258e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	429a      	cmp	r2, r3
 8002596:	f040 8164 	bne.w	8002862 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d005      	beq.n	80025b2 <HAL_GPIO_Init+0x56>
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d130      	bne.n	8002614 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	2203      	movs	r2, #3
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4013      	ands	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025e8:	2201      	movs	r2, #1
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	091b      	lsrs	r3, r3, #4
 80025fe:	f003 0201 	and.w	r2, r3, #1
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 0303 	and.w	r3, r3, #3
 800261c:	2b03      	cmp	r3, #3
 800261e:	d017      	beq.n	8002650 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	2203      	movs	r2, #3
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d123      	bne.n	80026a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	08da      	lsrs	r2, r3, #3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3208      	adds	r2, #8
 8002664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	220f      	movs	r2, #15
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43db      	mvns	r3, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	691a      	ldr	r2, [r3, #16]
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4313      	orrs	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	08da      	lsrs	r2, r3, #3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3208      	adds	r2, #8
 800269e:	69b9      	ldr	r1, [r7, #24]
 80026a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	2203      	movs	r2, #3
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 0203 	and.w	r2, r3, #3
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 80be 	beq.w	8002862 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e6:	4b66      	ldr	r3, [pc, #408]	; (8002880 <HAL_GPIO_Init+0x324>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ea:	4a65      	ldr	r2, [pc, #404]	; (8002880 <HAL_GPIO_Init+0x324>)
 80026ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026f0:	6453      	str	r3, [r2, #68]	; 0x44
 80026f2:	4b63      	ldr	r3, [pc, #396]	; (8002880 <HAL_GPIO_Init+0x324>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80026fe:	4a61      	ldr	r2, [pc, #388]	; (8002884 <HAL_GPIO_Init+0x328>)
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	089b      	lsrs	r3, r3, #2
 8002704:	3302      	adds	r3, #2
 8002706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	220f      	movs	r2, #15
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43db      	mvns	r3, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4013      	ands	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a58      	ldr	r2, [pc, #352]	; (8002888 <HAL_GPIO_Init+0x32c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d037      	beq.n	800279a <HAL_GPIO_Init+0x23e>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a57      	ldr	r2, [pc, #348]	; (800288c <HAL_GPIO_Init+0x330>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d031      	beq.n	8002796 <HAL_GPIO_Init+0x23a>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a56      	ldr	r2, [pc, #344]	; (8002890 <HAL_GPIO_Init+0x334>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d02b      	beq.n	8002792 <HAL_GPIO_Init+0x236>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a55      	ldr	r2, [pc, #340]	; (8002894 <HAL_GPIO_Init+0x338>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d025      	beq.n	800278e <HAL_GPIO_Init+0x232>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a54      	ldr	r2, [pc, #336]	; (8002898 <HAL_GPIO_Init+0x33c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d01f      	beq.n	800278a <HAL_GPIO_Init+0x22e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a53      	ldr	r2, [pc, #332]	; (800289c <HAL_GPIO_Init+0x340>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d019      	beq.n	8002786 <HAL_GPIO_Init+0x22a>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a52      	ldr	r2, [pc, #328]	; (80028a0 <HAL_GPIO_Init+0x344>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d013      	beq.n	8002782 <HAL_GPIO_Init+0x226>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a51      	ldr	r2, [pc, #324]	; (80028a4 <HAL_GPIO_Init+0x348>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d00d      	beq.n	800277e <HAL_GPIO_Init+0x222>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a50      	ldr	r2, [pc, #320]	; (80028a8 <HAL_GPIO_Init+0x34c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d007      	beq.n	800277a <HAL_GPIO_Init+0x21e>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a4f      	ldr	r2, [pc, #316]	; (80028ac <HAL_GPIO_Init+0x350>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d101      	bne.n	8002776 <HAL_GPIO_Init+0x21a>
 8002772:	2309      	movs	r3, #9
 8002774:	e012      	b.n	800279c <HAL_GPIO_Init+0x240>
 8002776:	230a      	movs	r3, #10
 8002778:	e010      	b.n	800279c <HAL_GPIO_Init+0x240>
 800277a:	2308      	movs	r3, #8
 800277c:	e00e      	b.n	800279c <HAL_GPIO_Init+0x240>
 800277e:	2307      	movs	r3, #7
 8002780:	e00c      	b.n	800279c <HAL_GPIO_Init+0x240>
 8002782:	2306      	movs	r3, #6
 8002784:	e00a      	b.n	800279c <HAL_GPIO_Init+0x240>
 8002786:	2305      	movs	r3, #5
 8002788:	e008      	b.n	800279c <HAL_GPIO_Init+0x240>
 800278a:	2304      	movs	r3, #4
 800278c:	e006      	b.n	800279c <HAL_GPIO_Init+0x240>
 800278e:	2303      	movs	r3, #3
 8002790:	e004      	b.n	800279c <HAL_GPIO_Init+0x240>
 8002792:	2302      	movs	r3, #2
 8002794:	e002      	b.n	800279c <HAL_GPIO_Init+0x240>
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <HAL_GPIO_Init+0x240>
 800279a:	2300      	movs	r3, #0
 800279c:	69fa      	ldr	r2, [r7, #28]
 800279e:	f002 0203 	and.w	r2, r2, #3
 80027a2:	0092      	lsls	r2, r2, #2
 80027a4:	4093      	lsls	r3, r2
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80027ac:	4935      	ldr	r1, [pc, #212]	; (8002884 <HAL_GPIO_Init+0x328>)
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	089b      	lsrs	r3, r3, #2
 80027b2:	3302      	adds	r3, #2
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ba:	4b3d      	ldr	r3, [pc, #244]	; (80028b0 <HAL_GPIO_Init+0x354>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	43db      	mvns	r3, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4013      	ands	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027de:	4a34      	ldr	r2, [pc, #208]	; (80028b0 <HAL_GPIO_Init+0x354>)
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027e4:	4b32      	ldr	r3, [pc, #200]	; (80028b0 <HAL_GPIO_Init+0x354>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002808:	4a29      	ldr	r2, [pc, #164]	; (80028b0 <HAL_GPIO_Init+0x354>)
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800280e:	4b28      	ldr	r3, [pc, #160]	; (80028b0 <HAL_GPIO_Init+0x354>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	43db      	mvns	r3, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4013      	ands	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002832:	4a1f      	ldr	r2, [pc, #124]	; (80028b0 <HAL_GPIO_Init+0x354>)
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002838:	4b1d      	ldr	r3, [pc, #116]	; (80028b0 <HAL_GPIO_Init+0x354>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	43db      	mvns	r3, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4013      	ands	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4313      	orrs	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800285c:	4a14      	ldr	r2, [pc, #80]	; (80028b0 <HAL_GPIO_Init+0x354>)
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	3301      	adds	r3, #1
 8002866:	61fb      	str	r3, [r7, #28]
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	2b0f      	cmp	r3, #15
 800286c:	f67f ae86 	bls.w	800257c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002870:	bf00      	nop
 8002872:	bf00      	nop
 8002874:	3724      	adds	r7, #36	; 0x24
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40023800 	.word	0x40023800
 8002884:	40013800 	.word	0x40013800
 8002888:	40020000 	.word	0x40020000
 800288c:	40020400 	.word	0x40020400
 8002890:	40020800 	.word	0x40020800
 8002894:	40020c00 	.word	0x40020c00
 8002898:	40021000 	.word	0x40021000
 800289c:	40021400 	.word	0x40021400
 80028a0:	40021800 	.word	0x40021800
 80028a4:	40021c00 	.word	0x40021c00
 80028a8:	40022000 	.word	0x40022000
 80028ac:	40022400 	.word	0x40022400
 80028b0:	40013c00 	.word	0x40013c00

080028b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	807b      	strh	r3, [r7, #2]
 80028c0:	4613      	mov	r3, r2
 80028c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028c4:	787b      	ldrb	r3, [r7, #1]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ca:	887a      	ldrh	r2, [r7, #2]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80028d0:	e003      	b.n	80028da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80028d2:	887b      	ldrh	r3, [r7, #2]
 80028d4:	041a      	lsls	r2, r3, #16
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	619a      	str	r2, [r3, #24]
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b085      	sub	sp, #20
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
 80028ee:	460b      	mov	r3, r1
 80028f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028f8:	887a      	ldrh	r2, [r7, #2]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	4013      	ands	r3, r2
 80028fe:	041a      	lsls	r2, r3, #16
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	43d9      	mvns	r1, r3
 8002904:	887b      	ldrh	r3, [r7, #2]
 8002906:	400b      	ands	r3, r1
 8002908:	431a      	orrs	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	619a      	str	r2, [r3, #24]
}
 800290e:	bf00      	nop
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800291a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800291c:	b08f      	sub	sp, #60	; 0x3c
 800291e:	af0a      	add	r7, sp, #40	; 0x28
 8002920:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e116      	b.n	8002b5a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff fafc 	bl	8001f44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2203      	movs	r2, #3
 8002950:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d102      	bne.n	8002966 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f002 fc10 	bl	8005190 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	603b      	str	r3, [r7, #0]
 8002976:	687e      	ldr	r6, [r7, #4]
 8002978:	466d      	mov	r5, sp
 800297a:	f106 0410 	add.w	r4, r6, #16
 800297e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002980:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002982:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002984:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002986:	e894 0003 	ldmia.w	r4, {r0, r1}
 800298a:	e885 0003 	stmia.w	r5, {r0, r1}
 800298e:	1d33      	adds	r3, r6, #4
 8002990:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002992:	6838      	ldr	r0, [r7, #0]
 8002994:	f002 fba4 	bl	80050e0 <USB_CoreInit>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d005      	beq.n	80029aa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2202      	movs	r2, #2
 80029a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e0d7      	b.n	8002b5a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2100      	movs	r1, #0
 80029b0:	4618      	mov	r0, r3
 80029b2:	f002 fbfe 	bl	80051b2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029b6:	2300      	movs	r3, #0
 80029b8:	73fb      	strb	r3, [r7, #15]
 80029ba:	e04a      	b.n	8002a52 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029bc:	7bfa      	ldrb	r2, [r7, #15]
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	1a9b      	subs	r3, r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	333d      	adds	r3, #61	; 0x3d
 80029cc:	2201      	movs	r2, #1
 80029ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029d0:	7bfa      	ldrb	r2, [r7, #15]
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	4613      	mov	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	1a9b      	subs	r3, r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	333c      	adds	r3, #60	; 0x3c
 80029e0:	7bfa      	ldrb	r2, [r7, #15]
 80029e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029e4:	7bfa      	ldrb	r2, [r7, #15]
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
 80029e8:	b298      	uxth	r0, r3
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	1a9b      	subs	r3, r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	3342      	adds	r3, #66	; 0x42
 80029f8:	4602      	mov	r2, r0
 80029fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029fc:	7bfa      	ldrb	r2, [r7, #15]
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	1a9b      	subs	r3, r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	333f      	adds	r3, #63	; 0x3f
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a10:	7bfa      	ldrb	r2, [r7, #15]
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	4613      	mov	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	1a9b      	subs	r3, r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	3344      	adds	r3, #68	; 0x44
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a24:	7bfa      	ldrb	r2, [r7, #15]
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	1a9b      	subs	r3, r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	3348      	adds	r3, #72	; 0x48
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a38:	7bfa      	ldrb	r2, [r7, #15]
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	1a9b      	subs	r3, r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	3350      	adds	r3, #80	; 0x50
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	73fb      	strb	r3, [r7, #15]
 8002a52:	7bfa      	ldrb	r2, [r7, #15]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d3af      	bcc.n	80029bc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	73fb      	strb	r3, [r7, #15]
 8002a60:	e044      	b.n	8002aec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a62:	7bfa      	ldrb	r2, [r7, #15]
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	4613      	mov	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	1a9b      	subs	r3, r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	440b      	add	r3, r1
 8002a70:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a78:	7bfa      	ldrb	r2, [r7, #15]
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	1a9b      	subs	r3, r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002a8a:	7bfa      	ldrb	r2, [r7, #15]
 8002a8c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a8e:	7bfa      	ldrb	r2, [r7, #15]
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	1a9b      	subs	r3, r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002aa4:	7bfa      	ldrb	r2, [r7, #15]
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	1a9b      	subs	r3, r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002aba:	7bfa      	ldrb	r2, [r7, #15]
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	1a9b      	subs	r3, r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ad0:	7bfa      	ldrb	r2, [r7, #15]
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	1a9b      	subs	r3, r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	73fb      	strb	r3, [r7, #15]
 8002aec:	7bfa      	ldrb	r2, [r7, #15]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d3b5      	bcc.n	8002a62 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	687e      	ldr	r6, [r7, #4]
 8002afe:	466d      	mov	r5, sp
 8002b00:	f106 0410 	add.w	r4, r6, #16
 8002b04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b10:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b14:	1d33      	adds	r3, r6, #4
 8002b16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b18:	6838      	ldr	r0, [r7, #0]
 8002b1a:	f002 fb97 	bl	800524c <USB_DevInit>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e014      	b.n	8002b5a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d102      	bne.n	8002b4e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 f80b 	bl	8002b64 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f002 fd51 	bl	80055fa <USB_DevDisconnect>

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3714      	adds	r7, #20
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002b64 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b92:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <HAL_PCDEx_ActivateLPM+0x44>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	10000003 	.word	0x10000003

08002bac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bb0:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a04      	ldr	r2, [pc, #16]	; (8002bc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bba:	6013      	str	r3, [r2, #0]
}
 8002bbc:	bf00      	nop
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40007000 	.word	0x40007000

08002bcc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e291      	b.n	8003106 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 8087 	beq.w	8002cfe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bf0:	4b96      	ldr	r3, [pc, #600]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 030c 	and.w	r3, r3, #12
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d00c      	beq.n	8002c16 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bfc:	4b93      	ldr	r3, [pc, #588]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 030c 	and.w	r3, r3, #12
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d112      	bne.n	8002c2e <HAL_RCC_OscConfig+0x62>
 8002c08:	4b90      	ldr	r3, [pc, #576]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c14:	d10b      	bne.n	8002c2e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c16:	4b8d      	ldr	r3, [pc, #564]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d06c      	beq.n	8002cfc <HAL_RCC_OscConfig+0x130>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d168      	bne.n	8002cfc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e26b      	b.n	8003106 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c36:	d106      	bne.n	8002c46 <HAL_RCC_OscConfig+0x7a>
 8002c38:	4b84      	ldr	r3, [pc, #528]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a83      	ldr	r2, [pc, #524]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	e02e      	b.n	8002ca4 <HAL_RCC_OscConfig+0xd8>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10c      	bne.n	8002c68 <HAL_RCC_OscConfig+0x9c>
 8002c4e:	4b7f      	ldr	r3, [pc, #508]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a7e      	ldr	r2, [pc, #504]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	4b7c      	ldr	r3, [pc, #496]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a7b      	ldr	r2, [pc, #492]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002c60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	e01d      	b.n	8002ca4 <HAL_RCC_OscConfig+0xd8>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c70:	d10c      	bne.n	8002c8c <HAL_RCC_OscConfig+0xc0>
 8002c72:	4b76      	ldr	r3, [pc, #472]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a75      	ldr	r2, [pc, #468]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	4b73      	ldr	r3, [pc, #460]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a72      	ldr	r2, [pc, #456]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	e00b      	b.n	8002ca4 <HAL_RCC_OscConfig+0xd8>
 8002c8c:	4b6f      	ldr	r3, [pc, #444]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a6e      	ldr	r2, [pc, #440]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c96:	6013      	str	r3, [r2, #0]
 8002c98:	4b6c      	ldr	r3, [pc, #432]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a6b      	ldr	r2, [pc, #428]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ca2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d013      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cac:	f7ff fb40 	bl	8002330 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb4:	f7ff fb3c 	bl	8002330 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b64      	cmp	r3, #100	; 0x64
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e21f      	b.n	8003106 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc6:	4b61      	ldr	r3, [pc, #388]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0f0      	beq.n	8002cb4 <HAL_RCC_OscConfig+0xe8>
 8002cd2:	e014      	b.n	8002cfe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd4:	f7ff fb2c 	bl	8002330 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cdc:	f7ff fb28 	bl	8002330 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b64      	cmp	r3, #100	; 0x64
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e20b      	b.n	8003106 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cee:	4b57      	ldr	r3, [pc, #348]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCC_OscConfig+0x110>
 8002cfa:	e000      	b.n	8002cfe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d069      	beq.n	8002dde <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d0a:	4b50      	ldr	r3, [pc, #320]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00b      	beq.n	8002d2e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d16:	4b4d      	ldr	r3, [pc, #308]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d11c      	bne.n	8002d5c <HAL_RCC_OscConfig+0x190>
 8002d22:	4b4a      	ldr	r3, [pc, #296]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d116      	bne.n	8002d5c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d2e:	4b47      	ldr	r3, [pc, #284]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d005      	beq.n	8002d46 <HAL_RCC_OscConfig+0x17a>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d001      	beq.n	8002d46 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e1df      	b.n	8003106 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d46:	4b41      	ldr	r3, [pc, #260]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	493d      	ldr	r1, [pc, #244]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d5a:	e040      	b.n	8002dde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d023      	beq.n	8002dac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d64:	4b39      	ldr	r3, [pc, #228]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a38      	ldr	r2, [pc, #224]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002d6a:	f043 0301 	orr.w	r3, r3, #1
 8002d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d70:	f7ff fade 	bl	8002330 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d78:	f7ff fada 	bl	8002330 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e1bd      	b.n	8003106 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8a:	4b30      	ldr	r3, [pc, #192]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0f0      	beq.n	8002d78 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d96:	4b2d      	ldr	r3, [pc, #180]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	4929      	ldr	r1, [pc, #164]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	600b      	str	r3, [r1, #0]
 8002daa:	e018      	b.n	8002dde <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dac:	4b27      	ldr	r3, [pc, #156]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a26      	ldr	r2, [pc, #152]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002db2:	f023 0301 	bic.w	r3, r3, #1
 8002db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db8:	f7ff faba 	bl	8002330 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc0:	f7ff fab6 	bl	8002330 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e199      	b.n	8003106 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd2:	4b1e      	ldr	r3, [pc, #120]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f0      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d038      	beq.n	8002e5c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d019      	beq.n	8002e26 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002df2:	4b16      	ldr	r3, [pc, #88]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df6:	4a15      	ldr	r2, [pc, #84]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfe:	f7ff fa97 	bl	8002330 <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e06:	f7ff fa93 	bl	8002330 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e176      	b.n	8003106 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e18:	4b0c      	ldr	r3, [pc, #48]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0f0      	beq.n	8002e06 <HAL_RCC_OscConfig+0x23a>
 8002e24:	e01a      	b.n	8002e5c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e26:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e2a:	4a08      	ldr	r2, [pc, #32]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002e2c:	f023 0301 	bic.w	r3, r3, #1
 8002e30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e32:	f7ff fa7d 	bl	8002330 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e38:	e00a      	b.n	8002e50 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e3a:	f7ff fa79 	bl	8002330 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d903      	bls.n	8002e50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e15c      	b.n	8003106 <HAL_RCC_OscConfig+0x53a>
 8002e4c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e50:	4b91      	ldr	r3, [pc, #580]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 8002e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1ee      	bne.n	8002e3a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 80a4 	beq.w	8002fb2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e6a:	4b8b      	ldr	r3, [pc, #556]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10d      	bne.n	8002e92 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e76:	4b88      	ldr	r3, [pc, #544]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	4a87      	ldr	r2, [pc, #540]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 8002e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e80:	6413      	str	r3, [r2, #64]	; 0x40
 8002e82:	4b85      	ldr	r3, [pc, #532]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	60bb      	str	r3, [r7, #8]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e92:	4b82      	ldr	r3, [pc, #520]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d118      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e9e:	4b7f      	ldr	r3, [pc, #508]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a7e      	ldr	r2, [pc, #504]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 8002ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eaa:	f7ff fa41 	bl	8002330 <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb2:	f7ff fa3d 	bl	8002330 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b64      	cmp	r3, #100	; 0x64
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e120      	b.n	8003106 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ec4:	4b75      	ldr	r3, [pc, #468]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0f0      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d106      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x31a>
 8002ed8:	4b6f      	ldr	r3, [pc, #444]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 8002eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002edc:	4a6e      	ldr	r2, [pc, #440]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee4:	e02d      	b.n	8002f42 <HAL_RCC_OscConfig+0x376>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10c      	bne.n	8002f08 <HAL_RCC_OscConfig+0x33c>
 8002eee:	4b6a      	ldr	r3, [pc, #424]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 8002ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef2:	4a69      	ldr	r2, [pc, #420]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 8002ef4:	f023 0301 	bic.w	r3, r3, #1
 8002ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8002efa:	4b67      	ldr	r3, [pc, #412]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 8002efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efe:	4a66      	ldr	r2, [pc, #408]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 8002f00:	f023 0304 	bic.w	r3, r3, #4
 8002f04:	6713      	str	r3, [r2, #112]	; 0x70
 8002f06:	e01c      	b.n	8002f42 <HAL_RCC_OscConfig+0x376>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	2b05      	cmp	r3, #5
 8002f0e:	d10c      	bne.n	8002f2a <HAL_RCC_OscConfig+0x35e>
 8002f10:	4b61      	ldr	r3, [pc, #388]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 8002f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f14:	4a60      	ldr	r2, [pc, #384]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 8002f16:	f043 0304 	orr.w	r3, r3, #4
 8002f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f1c:	4b5e      	ldr	r3, [pc, #376]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 8002f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f20:	4a5d      	ldr	r2, [pc, #372]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 8002f22:	f043 0301 	orr.w	r3, r3, #1
 8002f26:	6713      	str	r3, [r2, #112]	; 0x70
 8002f28:	e00b      	b.n	8002f42 <HAL_RCC_OscConfig+0x376>
 8002f2a:	4b5b      	ldr	r3, [pc, #364]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2e:	4a5a      	ldr	r2, [pc, #360]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 8002f30:	f023 0301 	bic.w	r3, r3, #1
 8002f34:	6713      	str	r3, [r2, #112]	; 0x70
 8002f36:	4b58      	ldr	r3, [pc, #352]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3a:	4a57      	ldr	r2, [pc, #348]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 8002f3c:	f023 0304 	bic.w	r3, r3, #4
 8002f40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d015      	beq.n	8002f76 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4a:	f7ff f9f1 	bl	8002330 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f50:	e00a      	b.n	8002f68 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f52:	f7ff f9ed 	bl	8002330 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e0ce      	b.n	8003106 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f68:	4b4b      	ldr	r3, [pc, #300]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 8002f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0ee      	beq.n	8002f52 <HAL_RCC_OscConfig+0x386>
 8002f74:	e014      	b.n	8002fa0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f76:	f7ff f9db 	bl	8002330 <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f7c:	e00a      	b.n	8002f94 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7e:	f7ff f9d7 	bl	8002330 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e0b8      	b.n	8003106 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f94:	4b40      	ldr	r3, [pc, #256]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 8002f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1ee      	bne.n	8002f7e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fa0:	7dfb      	ldrb	r3, [r7, #23]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d105      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa6:	4b3c      	ldr	r3, [pc, #240]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	4a3b      	ldr	r2, [pc, #236]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 8002fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 80a4 	beq.w	8003104 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fbc:	4b36      	ldr	r3, [pc, #216]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 030c 	and.w	r3, r3, #12
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d06b      	beq.n	80030a0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d149      	bne.n	8003064 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd0:	4b31      	ldr	r3, [pc, #196]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a30      	ldr	r2, [pc, #192]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 8002fd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7ff f9a8 	bl	8002330 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe4:	f7ff f9a4 	bl	8002330 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e087      	b.n	8003106 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff6:	4b28      	ldr	r3, [pc, #160]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69da      	ldr	r2, [r3, #28]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	019b      	lsls	r3, r3, #6
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003018:	085b      	lsrs	r3, r3, #1
 800301a:	3b01      	subs	r3, #1
 800301c:	041b      	lsls	r3, r3, #16
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003024:	061b      	lsls	r3, r3, #24
 8003026:	4313      	orrs	r3, r2
 8003028:	4a1b      	ldr	r2, [pc, #108]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 800302a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800302e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003030:	4b19      	ldr	r3, [pc, #100]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a18      	ldr	r2, [pc, #96]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 8003036:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800303a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303c:	f7ff f978 	bl	8002330 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003044:	f7ff f974 	bl	8002330 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e057      	b.n	8003106 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003056:	4b10      	ldr	r3, [pc, #64]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f0      	beq.n	8003044 <HAL_RCC_OscConfig+0x478>
 8003062:	e04f      	b.n	8003104 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003064:	4b0c      	ldr	r3, [pc, #48]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a0b      	ldr	r2, [pc, #44]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 800306a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800306e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003070:	f7ff f95e 	bl	8002330 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003078:	f7ff f95a 	bl	8002330 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e03d      	b.n	8003106 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308a:	4b03      	ldr	r3, [pc, #12]	; (8003098 <HAL_RCC_OscConfig+0x4cc>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f0      	bne.n	8003078 <HAL_RCC_OscConfig+0x4ac>
 8003096:	e035      	b.n	8003104 <HAL_RCC_OscConfig+0x538>
 8003098:	40023800 	.word	0x40023800
 800309c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80030a0:	4b1b      	ldr	r3, [pc, #108]	; (8003110 <HAL_RCC_OscConfig+0x544>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d028      	beq.n	8003100 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d121      	bne.n	8003100 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d11a      	bne.n	8003100 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030d0:	4013      	ands	r3, r2
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030d8:	4293      	cmp	r3, r2
 80030da:	d111      	bne.n	8003100 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e6:	085b      	lsrs	r3, r3, #1
 80030e8:	3b01      	subs	r3, #1
 80030ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d107      	bne.n	8003100 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d001      	beq.n	8003104 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e000      	b.n	8003106 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40023800 	.word	0x40023800

08003114 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800311e:	2300      	movs	r3, #0
 8003120:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0d0      	b.n	80032ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800312c:	4b6a      	ldr	r3, [pc, #424]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 030f 	and.w	r3, r3, #15
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	429a      	cmp	r2, r3
 8003138:	d910      	bls.n	800315c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313a:	4b67      	ldr	r3, [pc, #412]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f023 020f 	bic.w	r2, r3, #15
 8003142:	4965      	ldr	r1, [pc, #404]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	4313      	orrs	r3, r2
 8003148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800314a:	4b63      	ldr	r3, [pc, #396]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	429a      	cmp	r2, r3
 8003156:	d001      	beq.n	800315c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e0b8      	b.n	80032ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d020      	beq.n	80031aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b00      	cmp	r3, #0
 8003172:	d005      	beq.n	8003180 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003174:	4b59      	ldr	r3, [pc, #356]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	4a58      	ldr	r2, [pc, #352]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 800317a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800317e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0308 	and.w	r3, r3, #8
 8003188:	2b00      	cmp	r3, #0
 800318a:	d005      	beq.n	8003198 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800318c:	4b53      	ldr	r3, [pc, #332]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	4a52      	ldr	r2, [pc, #328]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 8003192:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003196:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003198:	4b50      	ldr	r3, [pc, #320]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	494d      	ldr	r1, [pc, #308]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d040      	beq.n	8003238 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d107      	bne.n	80031ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031be:	4b47      	ldr	r3, [pc, #284]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d115      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e07f      	b.n	80032ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d107      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d6:	4b41      	ldr	r3, [pc, #260]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d109      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e073      	b.n	80032ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e6:	4b3d      	ldr	r3, [pc, #244]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e06b      	b.n	80032ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031f6:	4b39      	ldr	r3, [pc, #228]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f023 0203 	bic.w	r2, r3, #3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	4936      	ldr	r1, [pc, #216]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 8003204:	4313      	orrs	r3, r2
 8003206:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003208:	f7ff f892 	bl	8002330 <HAL_GetTick>
 800320c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320e:	e00a      	b.n	8003226 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003210:	f7ff f88e 	bl	8002330 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	f241 3288 	movw	r2, #5000	; 0x1388
 800321e:	4293      	cmp	r3, r2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e053      	b.n	80032ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003226:	4b2d      	ldr	r3, [pc, #180]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 020c 	and.w	r2, r3, #12
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	429a      	cmp	r2, r3
 8003236:	d1eb      	bne.n	8003210 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003238:	4b27      	ldr	r3, [pc, #156]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 030f 	and.w	r3, r3, #15
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d210      	bcs.n	8003268 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003246:	4b24      	ldr	r3, [pc, #144]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f023 020f 	bic.w	r2, r3, #15
 800324e:	4922      	ldr	r1, [pc, #136]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	4313      	orrs	r3, r2
 8003254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003256:	4b20      	ldr	r3, [pc, #128]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	429a      	cmp	r2, r3
 8003262:	d001      	beq.n	8003268 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e032      	b.n	80032ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b00      	cmp	r3, #0
 8003272:	d008      	beq.n	8003286 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003274:	4b19      	ldr	r3, [pc, #100]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	4916      	ldr	r1, [pc, #88]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 8003282:	4313      	orrs	r3, r2
 8003284:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b00      	cmp	r3, #0
 8003290:	d009      	beq.n	80032a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003292:	4b12      	ldr	r3, [pc, #72]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	490e      	ldr	r1, [pc, #56]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032a6:	f000 f821 	bl	80032ec <HAL_RCC_GetSysClockFreq>
 80032aa:	4602      	mov	r2, r0
 80032ac:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	091b      	lsrs	r3, r3, #4
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	490a      	ldr	r1, [pc, #40]	; (80032e0 <HAL_RCC_ClockConfig+0x1cc>)
 80032b8:	5ccb      	ldrb	r3, [r1, r3]
 80032ba:	fa22 f303 	lsr.w	r3, r2, r3
 80032be:	4a09      	ldr	r2, [pc, #36]	; (80032e4 <HAL_RCC_ClockConfig+0x1d0>)
 80032c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032c2:	4b09      	ldr	r3, [pc, #36]	; (80032e8 <HAL_RCC_ClockConfig+0x1d4>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fe ffee 	bl	80022a8 <HAL_InitTick>

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40023c00 	.word	0x40023c00
 80032dc:	40023800 	.word	0x40023800
 80032e0:	080084c8 	.word	0x080084c8
 80032e4:	20000004 	.word	0x20000004
 80032e8:	20000008 	.word	0x20000008

080032ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80032f0:	b084      	sub	sp, #16
 80032f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80032f4:	2300      	movs	r3, #0
 80032f6:	607b      	str	r3, [r7, #4]
 80032f8:	2300      	movs	r3, #0
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	2300      	movs	r3, #0
 80032fe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003300:	2300      	movs	r3, #0
 8003302:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003304:	4b67      	ldr	r3, [pc, #412]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 030c 	and.w	r3, r3, #12
 800330c:	2b08      	cmp	r3, #8
 800330e:	d00d      	beq.n	800332c <HAL_RCC_GetSysClockFreq+0x40>
 8003310:	2b08      	cmp	r3, #8
 8003312:	f200 80bd 	bhi.w	8003490 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <HAL_RCC_GetSysClockFreq+0x34>
 800331a:	2b04      	cmp	r3, #4
 800331c:	d003      	beq.n	8003326 <HAL_RCC_GetSysClockFreq+0x3a>
 800331e:	e0b7      	b.n	8003490 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003320:	4b61      	ldr	r3, [pc, #388]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003322:	60bb      	str	r3, [r7, #8]
      break;
 8003324:	e0b7      	b.n	8003496 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003326:	4b61      	ldr	r3, [pc, #388]	; (80034ac <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003328:	60bb      	str	r3, [r7, #8]
      break;
 800332a:	e0b4      	b.n	8003496 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800332c:	4b5d      	ldr	r3, [pc, #372]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003334:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003336:	4b5b      	ldr	r3, [pc, #364]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d04d      	beq.n	80033de <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003342:	4b58      	ldr	r3, [pc, #352]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	099b      	lsrs	r3, r3, #6
 8003348:	461a      	mov	r2, r3
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003352:	f04f 0100 	mov.w	r1, #0
 8003356:	ea02 0800 	and.w	r8, r2, r0
 800335a:	ea03 0901 	and.w	r9, r3, r1
 800335e:	4640      	mov	r0, r8
 8003360:	4649      	mov	r1, r9
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	f04f 0300 	mov.w	r3, #0
 800336a:	014b      	lsls	r3, r1, #5
 800336c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003370:	0142      	lsls	r2, r0, #5
 8003372:	4610      	mov	r0, r2
 8003374:	4619      	mov	r1, r3
 8003376:	ebb0 0008 	subs.w	r0, r0, r8
 800337a:	eb61 0109 	sbc.w	r1, r1, r9
 800337e:	f04f 0200 	mov.w	r2, #0
 8003382:	f04f 0300 	mov.w	r3, #0
 8003386:	018b      	lsls	r3, r1, #6
 8003388:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800338c:	0182      	lsls	r2, r0, #6
 800338e:	1a12      	subs	r2, r2, r0
 8003390:	eb63 0301 	sbc.w	r3, r3, r1
 8003394:	f04f 0000 	mov.w	r0, #0
 8003398:	f04f 0100 	mov.w	r1, #0
 800339c:	00d9      	lsls	r1, r3, #3
 800339e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033a2:	00d0      	lsls	r0, r2, #3
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	eb12 0208 	adds.w	r2, r2, r8
 80033ac:	eb43 0309 	adc.w	r3, r3, r9
 80033b0:	f04f 0000 	mov.w	r0, #0
 80033b4:	f04f 0100 	mov.w	r1, #0
 80033b8:	0259      	lsls	r1, r3, #9
 80033ba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80033be:	0250      	lsls	r0, r2, #9
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	4610      	mov	r0, r2
 80033c6:	4619      	mov	r1, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	461a      	mov	r2, r3
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	f7fd fc5a 	bl	8000c88 <__aeabi_uldivmod>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4613      	mov	r3, r2
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	e04a      	b.n	8003474 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033de:	4b31      	ldr	r3, [pc, #196]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	099b      	lsrs	r3, r3, #6
 80033e4:	461a      	mov	r2, r3
 80033e6:	f04f 0300 	mov.w	r3, #0
 80033ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033ee:	f04f 0100 	mov.w	r1, #0
 80033f2:	ea02 0400 	and.w	r4, r2, r0
 80033f6:	ea03 0501 	and.w	r5, r3, r1
 80033fa:	4620      	mov	r0, r4
 80033fc:	4629      	mov	r1, r5
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	f04f 0300 	mov.w	r3, #0
 8003406:	014b      	lsls	r3, r1, #5
 8003408:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800340c:	0142      	lsls	r2, r0, #5
 800340e:	4610      	mov	r0, r2
 8003410:	4619      	mov	r1, r3
 8003412:	1b00      	subs	r0, r0, r4
 8003414:	eb61 0105 	sbc.w	r1, r1, r5
 8003418:	f04f 0200 	mov.w	r2, #0
 800341c:	f04f 0300 	mov.w	r3, #0
 8003420:	018b      	lsls	r3, r1, #6
 8003422:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003426:	0182      	lsls	r2, r0, #6
 8003428:	1a12      	subs	r2, r2, r0
 800342a:	eb63 0301 	sbc.w	r3, r3, r1
 800342e:	f04f 0000 	mov.w	r0, #0
 8003432:	f04f 0100 	mov.w	r1, #0
 8003436:	00d9      	lsls	r1, r3, #3
 8003438:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800343c:	00d0      	lsls	r0, r2, #3
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	1912      	adds	r2, r2, r4
 8003444:	eb45 0303 	adc.w	r3, r5, r3
 8003448:	f04f 0000 	mov.w	r0, #0
 800344c:	f04f 0100 	mov.w	r1, #0
 8003450:	0299      	lsls	r1, r3, #10
 8003452:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003456:	0290      	lsls	r0, r2, #10
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	4610      	mov	r0, r2
 800345e:	4619      	mov	r1, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	461a      	mov	r2, r3
 8003464:	f04f 0300 	mov.w	r3, #0
 8003468:	f7fd fc0e 	bl	8000c88 <__aeabi_uldivmod>
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4613      	mov	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003474:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	0c1b      	lsrs	r3, r3, #16
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	3301      	adds	r3, #1
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	fbb2 f3f3 	udiv	r3, r2, r3
 800348c:	60bb      	str	r3, [r7, #8]
      break;
 800348e:	e002      	b.n	8003496 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003490:	4b05      	ldr	r3, [pc, #20]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003492:	60bb      	str	r3, [r7, #8]
      break;
 8003494:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003496:	68bb      	ldr	r3, [r7, #8]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80034a2:	bf00      	nop
 80034a4:	40023800 	.word	0x40023800
 80034a8:	00f42400 	.word	0x00f42400
 80034ac:	007a1200 	.word	0x007a1200

080034b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034b4:	4b03      	ldr	r3, [pc, #12]	; (80034c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034b6:	681b      	ldr	r3, [r3, #0]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	20000004 	.word	0x20000004

080034c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034cc:	f7ff fff0 	bl	80034b0 <HAL_RCC_GetHCLKFreq>
 80034d0:	4602      	mov	r2, r0
 80034d2:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	0a9b      	lsrs	r3, r3, #10
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	4903      	ldr	r1, [pc, #12]	; (80034ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80034de:	5ccb      	ldrb	r3, [r1, r3]
 80034e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40023800 	.word	0x40023800
 80034ec:	080084d8 	.word	0x080084d8

080034f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034f4:	f7ff ffdc 	bl	80034b0 <HAL_RCC_GetHCLKFreq>
 80034f8:	4602      	mov	r2, r0
 80034fa:	4b05      	ldr	r3, [pc, #20]	; (8003510 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	0b5b      	lsrs	r3, r3, #13
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	4903      	ldr	r1, [pc, #12]	; (8003514 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003506:	5ccb      	ldrb	r3, [r1, r3]
 8003508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800350c:	4618      	mov	r0, r3
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40023800 	.word	0x40023800
 8003514:	080084d8 	.word	0x080084d8

08003518 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003520:	2300      	movs	r3, #0
 8003522:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003524:	2300      	movs	r3, #0
 8003526:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003528:	2300      	movs	r3, #0
 800352a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800352c:	2300      	movs	r3, #0
 800352e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b00      	cmp	r3, #0
 800353e:	d012      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003540:	4b69      	ldr	r3, [pc, #420]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	4a68      	ldr	r2, [pc, #416]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003546:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800354a:	6093      	str	r3, [r2, #8]
 800354c:	4b66      	ldr	r3, [pc, #408]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003554:	4964      	ldr	r1, [pc, #400]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003556:	4313      	orrs	r3, r2
 8003558:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003562:	2301      	movs	r3, #1
 8003564:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d017      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003572:	4b5d      	ldr	r3, [pc, #372]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003578:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003580:	4959      	ldr	r1, [pc, #356]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003590:	d101      	bne.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003592:	2301      	movs	r3, #1
 8003594:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800359e:	2301      	movs	r3, #1
 80035a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d017      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035ae:	4b4e      	ldr	r3, [pc, #312]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	494a      	ldr	r1, [pc, #296]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035cc:	d101      	bne.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80035ce:	2301      	movs	r3, #1
 80035d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80035da:	2301      	movs	r3, #1
 80035dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80035ea:	2301      	movs	r3, #1
 80035ec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0320 	and.w	r3, r3, #32
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 808b 	beq.w	8003712 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80035fc:	4b3a      	ldr	r3, [pc, #232]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	4a39      	ldr	r2, [pc, #228]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003606:	6413      	str	r3, [r2, #64]	; 0x40
 8003608:	4b37      	ldr	r3, [pc, #220]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003610:	60bb      	str	r3, [r7, #8]
 8003612:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003614:	4b35      	ldr	r3, [pc, #212]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a34      	ldr	r2, [pc, #208]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800361a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800361e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003620:	f7fe fe86 	bl	8002330 <HAL_GetTick>
 8003624:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003626:	e008      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003628:	f7fe fe82 	bl	8002330 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b64      	cmp	r3, #100	; 0x64
 8003634:	d901      	bls.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e357      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800363a:	4b2c      	ldr	r3, [pc, #176]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0f0      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003646:	4b28      	ldr	r3, [pc, #160]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800364e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d035      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	429a      	cmp	r2, r3
 8003662:	d02e      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003664:	4b20      	ldr	r3, [pc, #128]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800366c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800366e:	4b1e      	ldr	r3, [pc, #120]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003672:	4a1d      	ldr	r2, [pc, #116]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003678:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800367a:	4b1b      	ldr	r3, [pc, #108]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800367c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367e:	4a1a      	ldr	r2, [pc, #104]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003684:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003686:	4a18      	ldr	r2, [pc, #96]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800368c:	4b16      	ldr	r3, [pc, #88]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800368e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b01      	cmp	r3, #1
 8003696:	d114      	bne.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003698:	f7fe fe4a 	bl	8002330 <HAL_GetTick>
 800369c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369e:	e00a      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036a0:	f7fe fe46 	bl	8002330 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e319      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b6:	4b0c      	ldr	r3, [pc, #48]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0ee      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036ce:	d111      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80036d0:	4b05      	ldr	r3, [pc, #20]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036dc:	4b04      	ldr	r3, [pc, #16]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80036de:	400b      	ands	r3, r1
 80036e0:	4901      	ldr	r1, [pc, #4]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	608b      	str	r3, [r1, #8]
 80036e6:	e00b      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80036e8:	40023800 	.word	0x40023800
 80036ec:	40007000 	.word	0x40007000
 80036f0:	0ffffcff 	.word	0x0ffffcff
 80036f4:	4bb1      	ldr	r3, [pc, #708]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	4ab0      	ldr	r2, [pc, #704]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80036fa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80036fe:	6093      	str	r3, [r2, #8]
 8003700:	4bae      	ldr	r3, [pc, #696]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003702:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800370c:	49ab      	ldr	r1, [pc, #684]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800370e:	4313      	orrs	r3, r2
 8003710:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0310 	and.w	r3, r3, #16
 800371a:	2b00      	cmp	r3, #0
 800371c:	d010      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800371e:	4ba7      	ldr	r3, [pc, #668]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003724:	4aa5      	ldr	r2, [pc, #660]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003726:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800372a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800372e:	4ba3      	ldr	r3, [pc, #652]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003730:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003738:	49a0      	ldr	r1, [pc, #640]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800373a:	4313      	orrs	r3, r2
 800373c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00a      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800374c:	4b9b      	ldr	r3, [pc, #620]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003752:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800375a:	4998      	ldr	r1, [pc, #608]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800376e:	4b93      	ldr	r3, [pc, #588]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003774:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800377c:	498f      	ldr	r1, [pc, #572]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800377e:	4313      	orrs	r3, r2
 8003780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00a      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003790:	4b8a      	ldr	r3, [pc, #552]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003796:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800379e:	4987      	ldr	r1, [pc, #540]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037b2:	4b82      	ldr	r3, [pc, #520]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c0:	497e      	ldr	r1, [pc, #504]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00a      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037d4:	4b79      	ldr	r3, [pc, #484]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037da:	f023 0203 	bic.w	r2, r3, #3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e2:	4976      	ldr	r1, [pc, #472]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00a      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037f6:	4b71      	ldr	r3, [pc, #452]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fc:	f023 020c 	bic.w	r2, r3, #12
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003804:	496d      	ldr	r1, [pc, #436]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00a      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003818:	4b68      	ldr	r3, [pc, #416]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800381a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003826:	4965      	ldr	r1, [pc, #404]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003828:	4313      	orrs	r3, r2
 800382a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00a      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800383a:	4b60      	ldr	r3, [pc, #384]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800383c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003840:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003848:	495c      	ldr	r1, [pc, #368]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800384a:	4313      	orrs	r3, r2
 800384c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00a      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800385c:	4b57      	ldr	r3, [pc, #348]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800385e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003862:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386a:	4954      	ldr	r1, [pc, #336]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800386c:	4313      	orrs	r3, r2
 800386e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00a      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800387e:	4b4f      	ldr	r3, [pc, #316]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003884:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388c:	494b      	ldr	r1, [pc, #300]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800388e:	4313      	orrs	r3, r2
 8003890:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00a      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80038a0:	4b46      	ldr	r3, [pc, #280]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ae:	4943      	ldr	r1, [pc, #268]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00a      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80038c2:	4b3e      	ldr	r3, [pc, #248]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d0:	493a      	ldr	r1, [pc, #232]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00a      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038e4:	4b35      	ldr	r3, [pc, #212]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038f2:	4932      	ldr	r1, [pc, #200]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d011      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003906:	4b2d      	ldr	r3, [pc, #180]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003914:	4929      	ldr	r1, [pc, #164]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003916:	4313      	orrs	r3, r2
 8003918:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003920:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003924:	d101      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003926:	2301      	movs	r3, #1
 8003928:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003936:	2301      	movs	r3, #1
 8003938:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00a      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003946:	4b1d      	ldr	r3, [pc, #116]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003954:	4919      	ldr	r1, [pc, #100]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003956:	4313      	orrs	r3, r2
 8003958:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00b      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003968:	4b14      	ldr	r3, [pc, #80]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800396a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003978:	4910      	ldr	r1, [pc, #64]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800397a:	4313      	orrs	r3, r2
 800397c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d006      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 80d9 	beq.w	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003994:	4b09      	ldr	r3, [pc, #36]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a08      	ldr	r2, [pc, #32]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800399a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800399e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039a0:	f7fe fcc6 	bl	8002330 <HAL_GetTick>
 80039a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039a6:	e00b      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039a8:	f7fe fcc2 	bl	8002330 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b64      	cmp	r3, #100	; 0x64
 80039b4:	d904      	bls.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e197      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80039ba:	bf00      	nop
 80039bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039c0:	4b6c      	ldr	r3, [pc, #432]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1ed      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d021      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d11d      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80039e0:	4b64      	ldr	r3, [pc, #400]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039e6:	0c1b      	lsrs	r3, r3, #16
 80039e8:	f003 0303 	and.w	r3, r3, #3
 80039ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039ee:	4b61      	ldr	r3, [pc, #388]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039f4:	0e1b      	lsrs	r3, r3, #24
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	019a      	lsls	r2, r3, #6
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	041b      	lsls	r3, r3, #16
 8003a06:	431a      	orrs	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	061b      	lsls	r3, r3, #24
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	071b      	lsls	r3, r3, #28
 8003a14:	4957      	ldr	r1, [pc, #348]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d004      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a30:	d00a      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d02e      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a46:	d129      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a48:	4b4a      	ldr	r3, [pc, #296]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a4e:	0c1b      	lsrs	r3, r3, #16
 8003a50:	f003 0303 	and.w	r3, r3, #3
 8003a54:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a56:	4b47      	ldr	r3, [pc, #284]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a5c:	0f1b      	lsrs	r3, r3, #28
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	019a      	lsls	r2, r3, #6
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	041b      	lsls	r3, r3, #16
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	061b      	lsls	r3, r3, #24
 8003a76:	431a      	orrs	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	071b      	lsls	r3, r3, #28
 8003a7c:	493d      	ldr	r1, [pc, #244]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a84:	4b3b      	ldr	r3, [pc, #236]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a8a:	f023 021f 	bic.w	r2, r3, #31
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	3b01      	subs	r3, #1
 8003a94:	4937      	ldr	r1, [pc, #220]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d01d      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003aa8:	4b32      	ldr	r3, [pc, #200]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aae:	0e1b      	lsrs	r3, r3, #24
 8003ab0:	f003 030f 	and.w	r3, r3, #15
 8003ab4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ab6:	4b2f      	ldr	r3, [pc, #188]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003abc:	0f1b      	lsrs	r3, r3, #28
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	019a      	lsls	r2, r3, #6
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	041b      	lsls	r3, r3, #16
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	061b      	lsls	r3, r3, #24
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	071b      	lsls	r3, r3, #28
 8003adc:	4925      	ldr	r1, [pc, #148]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d011      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	019a      	lsls	r2, r3, #6
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	041b      	lsls	r3, r3, #16
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	061b      	lsls	r3, r3, #24
 8003b04:	431a      	orrs	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	071b      	lsls	r3, r3, #28
 8003b0c:	4919      	ldr	r1, [pc, #100]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b14:	4b17      	ldr	r3, [pc, #92]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a16      	ldr	r2, [pc, #88]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b20:	f7fe fc06 	bl	8002330 <HAL_GetTick>
 8003b24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b28:	f7fe fc02 	bl	8002330 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b64      	cmp	r3, #100	; 0x64
 8003b34:	d901      	bls.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e0d7      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b3a:	4b0e      	ldr	r3, [pc, #56]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0f0      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	f040 80cd 	bne.w	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b4e:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a08      	ldr	r2, [pc, #32]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b5a:	f7fe fbe9 	bl	8002330 <HAL_GetTick>
 8003b5e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b60:	e00a      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b62:	f7fe fbe5 	bl	8002330 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b64      	cmp	r3, #100	; 0x64
 8003b6e:	d903      	bls.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e0ba      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003b74:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b78:	4b5e      	ldr	r3, [pc, #376]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b84:	d0ed      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d009      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d02e      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d12a      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003bae:	4b51      	ldr	r3, [pc, #324]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb4:	0c1b      	lsrs	r3, r3, #16
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bbc:	4b4d      	ldr	r3, [pc, #308]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc2:	0f1b      	lsrs	r3, r3, #28
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	019a      	lsls	r2, r3, #6
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	041b      	lsls	r3, r3, #16
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	061b      	lsls	r3, r3, #24
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	071b      	lsls	r3, r3, #28
 8003be2:	4944      	ldr	r1, [pc, #272]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003bea:	4b42      	ldr	r3, [pc, #264]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bf0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	021b      	lsls	r3, r3, #8
 8003bfc:	493d      	ldr	r1, [pc, #244]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d022      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c18:	d11d      	bne.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c1a:	4b36      	ldr	r3, [pc, #216]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c20:	0e1b      	lsrs	r3, r3, #24
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c28:	4b32      	ldr	r3, [pc, #200]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2e:	0f1b      	lsrs	r3, r3, #28
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	019a      	lsls	r2, r3, #6
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	041b      	lsls	r3, r3, #16
 8003c42:	431a      	orrs	r2, r3
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	061b      	lsls	r3, r3, #24
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	071b      	lsls	r3, r3, #28
 8003c4e:	4929      	ldr	r1, [pc, #164]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0308 	and.w	r3, r3, #8
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d028      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c62:	4b24      	ldr	r3, [pc, #144]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c68:	0e1b      	lsrs	r3, r3, #24
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c70:	4b20      	ldr	r3, [pc, #128]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c76:	0c1b      	lsrs	r3, r3, #16
 8003c78:	f003 0303 	and.w	r3, r3, #3
 8003c7c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	019a      	lsls	r2, r3, #6
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	041b      	lsls	r3, r3, #16
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	061b      	lsls	r3, r3, #24
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	071b      	lsls	r3, r3, #28
 8003c96:	4917      	ldr	r1, [pc, #92]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c9e:	4b15      	ldr	r3, [pc, #84]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ca4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cac:	4911      	ldr	r1, [pc, #68]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003cb4:	4b0f      	ldr	r3, [pc, #60]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a0e      	ldr	r2, [pc, #56]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cc0:	f7fe fb36 	bl	8002330 <HAL_GetTick>
 8003cc4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cc8:	f7fe fb32 	bl	8002330 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b64      	cmp	r3, #100	; 0x64
 8003cd4:	d901      	bls.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e007      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cda:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ce2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ce6:	d1ef      	bne.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3720      	adds	r7, #32
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40023800 	.word	0x40023800

08003cf8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e09d      	b.n	8003e46 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d108      	bne.n	8003d24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d1a:	d009      	beq.n	8003d30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	61da      	str	r2, [r3, #28]
 8003d22:	e005      	b.n	8003d30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d106      	bne.n	8003d50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fe f838 	bl	8001dc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d66:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d70:	d902      	bls.n	8003d78 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d72:	2300      	movs	r3, #0
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	e002      	b.n	8003d7e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d7c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003d86:	d007      	beq.n	8003d98 <HAL_SPI_Init+0xa0>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d90:	d002      	beq.n	8003d98 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003da8:	431a      	orrs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dda:	ea42 0103 	orr.w	r1, r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	0c1b      	lsrs	r3, r3, #16
 8003df4:	f003 0204 	and.w	r2, r3, #4
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfc:	f003 0310 	and.w	r3, r3, #16
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003e14:	ea42 0103 	orr.w	r1, r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	69da      	ldr	r2, [r3, #28]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b08a      	sub	sp, #40	; 0x28
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	607a      	str	r2, [r7, #4]
 8003e5a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e60:	2300      	movs	r3, #0
 8003e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_SPI_TransmitReceive+0x26>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e1fb      	b.n	800426c <HAL_SPI_TransmitReceive+0x41e>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e7c:	f7fe fa58 	bl	8002330 <HAL_GetTick>
 8003e80:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e88:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003e90:	887b      	ldrh	r3, [r7, #2]
 8003e92:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003e94:	887b      	ldrh	r3, [r7, #2]
 8003e96:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e98:	7efb      	ldrb	r3, [r7, #27]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d00e      	beq.n	8003ebc <HAL_SPI_TransmitReceive+0x6e>
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ea4:	d106      	bne.n	8003eb4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d102      	bne.n	8003eb4 <HAL_SPI_TransmitReceive+0x66>
 8003eae:	7efb      	ldrb	r3, [r7, #27]
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d003      	beq.n	8003ebc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003eba:	e1cd      	b.n	8004258 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d005      	beq.n	8003ece <HAL_SPI_TransmitReceive+0x80>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d002      	beq.n	8003ece <HAL_SPI_TransmitReceive+0x80>
 8003ec8:	887b      	ldrh	r3, [r7, #2]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d103      	bne.n	8003ed6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003ed4:	e1c0      	b.n	8004258 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d003      	beq.n	8003eea <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2205      	movs	r2, #5
 8003ee6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	887a      	ldrh	r2, [r7, #2]
 8003efa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	887a      	ldrh	r2, [r7, #2]
 8003f02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	887a      	ldrh	r2, [r7, #2]
 8003f10:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	887a      	ldrh	r2, [r7, #2]
 8003f16:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f2c:	d802      	bhi.n	8003f34 <HAL_SPI_TransmitReceive+0xe6>
 8003f2e:	8a3b      	ldrh	r3, [r7, #16]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d908      	bls.n	8003f46 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f42:	605a      	str	r2, [r3, #4]
 8003f44:	e007      	b.n	8003f56 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f54:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f60:	2b40      	cmp	r3, #64	; 0x40
 8003f62:	d007      	beq.n	8003f74 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f7c:	d97c      	bls.n	8004078 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <HAL_SPI_TransmitReceive+0x13e>
 8003f86:	8a7b      	ldrh	r3, [r7, #18]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d169      	bne.n	8004060 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f90:	881a      	ldrh	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9c:	1c9a      	adds	r2, r3, #2
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fb0:	e056      	b.n	8004060 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d11b      	bne.n	8003ff8 <HAL_SPI_TransmitReceive+0x1aa>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d016      	beq.n	8003ff8 <HAL_SPI_TransmitReceive+0x1aa>
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d113      	bne.n	8003ff8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd4:	881a      	ldrh	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe0:	1c9a      	adds	r2, r3, #2
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b01      	cmp	r3, #1
 8004004:	d11c      	bne.n	8004040 <HAL_SPI_TransmitReceive+0x1f2>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800400c:	b29b      	uxth	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d016      	beq.n	8004040 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	b292      	uxth	r2, r2
 800401e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	1c9a      	adds	r2, r3, #2
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004030:	b29b      	uxth	r3, r3
 8004032:	3b01      	subs	r3, #1
 8004034:	b29a      	uxth	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800403c:	2301      	movs	r3, #1
 800403e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004040:	f7fe f976 	bl	8002330 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800404c:	429a      	cmp	r2, r3
 800404e:	d807      	bhi.n	8004060 <HAL_SPI_TransmitReceive+0x212>
 8004050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004056:	d003      	beq.n	8004060 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800405e:	e0fb      	b.n	8004258 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004064:	b29b      	uxth	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1a3      	bne.n	8003fb2 <HAL_SPI_TransmitReceive+0x164>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004070:	b29b      	uxth	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d19d      	bne.n	8003fb2 <HAL_SPI_TransmitReceive+0x164>
 8004076:	e0df      	b.n	8004238 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <HAL_SPI_TransmitReceive+0x23a>
 8004080:	8a7b      	ldrh	r3, [r7, #18]
 8004082:	2b01      	cmp	r3, #1
 8004084:	f040 80cb 	bne.w	800421e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800408c:	b29b      	uxth	r3, r3
 800408e:	2b01      	cmp	r3, #1
 8004090:	d912      	bls.n	80040b8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004096:	881a      	ldrh	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a2:	1c9a      	adds	r2, r3, #2
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	3b02      	subs	r3, #2
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040b6:	e0b2      	b.n	800421e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	330c      	adds	r3, #12
 80040c2:	7812      	ldrb	r2, [r2, #0]
 80040c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	3b01      	subs	r3, #1
 80040d8:	b29a      	uxth	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040de:	e09e      	b.n	800421e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d134      	bne.n	8004158 <HAL_SPI_TransmitReceive+0x30a>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d02f      	beq.n	8004158 <HAL_SPI_TransmitReceive+0x30a>
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d12c      	bne.n	8004158 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004102:	b29b      	uxth	r3, r3
 8004104:	2b01      	cmp	r3, #1
 8004106:	d912      	bls.n	800412e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410c:	881a      	ldrh	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004118:	1c9a      	adds	r2, r3, #2
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004122:	b29b      	uxth	r3, r3
 8004124:	3b02      	subs	r3, #2
 8004126:	b29a      	uxth	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800412c:	e012      	b.n	8004154 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	330c      	adds	r3, #12
 8004138:	7812      	ldrb	r2, [r2, #0]
 800413a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800414a:	b29b      	uxth	r3, r3
 800414c:	3b01      	subs	r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b01      	cmp	r3, #1
 8004164:	d148      	bne.n	80041f8 <HAL_SPI_TransmitReceive+0x3aa>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d042      	beq.n	80041f8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004178:	b29b      	uxth	r3, r3
 800417a:	2b01      	cmp	r3, #1
 800417c:	d923      	bls.n	80041c6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68da      	ldr	r2, [r3, #12]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	b292      	uxth	r2, r2
 800418a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004190:	1c9a      	adds	r2, r3, #2
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800419c:	b29b      	uxth	r3, r3
 800419e:	3b02      	subs	r3, #2
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d81f      	bhi.n	80041f4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041c2:	605a      	str	r2, [r3, #4]
 80041c4:	e016      	b.n	80041f4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f103 020c 	add.w	r2, r3, #12
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	7812      	ldrb	r2, [r2, #0]
 80041d4:	b2d2      	uxtb	r2, r2
 80041d6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041dc:	1c5a      	adds	r2, r3, #1
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041f4:	2301      	movs	r3, #1
 80041f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80041f8:	f7fe f89a 	bl	8002330 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004204:	429a      	cmp	r2, r3
 8004206:	d803      	bhi.n	8004210 <HAL_SPI_TransmitReceive+0x3c2>
 8004208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420e:	d102      	bne.n	8004216 <HAL_SPI_TransmitReceive+0x3c8>
 8004210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004212:	2b00      	cmp	r3, #0
 8004214:	d103      	bne.n	800421e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800421c:	e01c      	b.n	8004258 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004222:	b29b      	uxth	r3, r3
 8004224:	2b00      	cmp	r3, #0
 8004226:	f47f af5b 	bne.w	80040e0 <HAL_SPI_TransmitReceive+0x292>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004230:	b29b      	uxth	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	f47f af54 	bne.w	80040e0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004238:	69fa      	ldr	r2, [r7, #28]
 800423a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 f937 	bl	80044b0 <SPI_EndRxTxTransaction>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d006      	beq.n	8004256 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2220      	movs	r2, #32
 8004252:	661a      	str	r2, [r3, #96]	; 0x60
 8004254:	e000      	b.n	8004258 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004256:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004268:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800426c:	4618      	mov	r0, r3
 800426e:	3728      	adds	r7, #40	; 0x28
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b088      	sub	sp, #32
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	603b      	str	r3, [r7, #0]
 8004280:	4613      	mov	r3, r2
 8004282:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004284:	f7fe f854 	bl	8002330 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428c:	1a9b      	subs	r3, r3, r2
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	4413      	add	r3, r2
 8004292:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004294:	f7fe f84c 	bl	8002330 <HAL_GetTick>
 8004298:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800429a:	4b39      	ldr	r3, [pc, #228]	; (8004380 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	015b      	lsls	r3, r3, #5
 80042a0:	0d1b      	lsrs	r3, r3, #20
 80042a2:	69fa      	ldr	r2, [r7, #28]
 80042a4:	fb02 f303 	mul.w	r3, r2, r3
 80042a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042aa:	e054      	b.n	8004356 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b2:	d050      	beq.n	8004356 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042b4:	f7fe f83c 	bl	8002330 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	69fa      	ldr	r2, [r7, #28]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d902      	bls.n	80042ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d13d      	bne.n	8004346 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042e2:	d111      	bne.n	8004308 <SPI_WaitFlagStateUntilTimeout+0x94>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042ec:	d004      	beq.n	80042f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042f6:	d107      	bne.n	8004308 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004306:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004310:	d10f      	bne.n	8004332 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004330:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e017      	b.n	8004376 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800434c:	2300      	movs	r3, #0
 800434e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	3b01      	subs	r3, #1
 8004354:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	4013      	ands	r3, r2
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	429a      	cmp	r2, r3
 8004364:	bf0c      	ite	eq
 8004366:	2301      	moveq	r3, #1
 8004368:	2300      	movne	r3, #0
 800436a:	b2db      	uxtb	r3, r3
 800436c:	461a      	mov	r2, r3
 800436e:	79fb      	ldrb	r3, [r7, #7]
 8004370:	429a      	cmp	r2, r3
 8004372:	d19b      	bne.n	80042ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3720      	adds	r7, #32
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	20000004 	.word	0x20000004

08004384 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b08a      	sub	sp, #40	; 0x28
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
 8004390:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004392:	2300      	movs	r3, #0
 8004394:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004396:	f7fd ffcb 	bl	8002330 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439e:	1a9b      	subs	r3, r3, r2
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	4413      	add	r3, r2
 80043a4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80043a6:	f7fd ffc3 	bl	8002330 <HAL_GetTick>
 80043aa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	330c      	adds	r3, #12
 80043b2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80043b4:	4b3d      	ldr	r3, [pc, #244]	; (80044ac <SPI_WaitFifoStateUntilTimeout+0x128>)
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	4613      	mov	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	00da      	lsls	r2, r3, #3
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	0d1b      	lsrs	r3, r3, #20
 80043c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c6:	fb02 f303 	mul.w	r3, r2, r3
 80043ca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80043cc:	e060      	b.n	8004490 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80043d4:	d107      	bne.n	80043e6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d104      	bne.n	80043e6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80043e4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ec:	d050      	beq.n	8004490 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043ee:	f7fd ff9f 	bl	8002330 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d902      	bls.n	8004404 <SPI_WaitFifoStateUntilTimeout+0x80>
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	2b00      	cmp	r3, #0
 8004402:	d13d      	bne.n	8004480 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004412:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800441c:	d111      	bne.n	8004442 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004426:	d004      	beq.n	8004432 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004430:	d107      	bne.n	8004442 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004440:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004446:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800444a:	d10f      	bne.n	800446c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800446a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e010      	b.n	80044a2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004486:	2300      	movs	r3, #0
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	3b01      	subs	r3, #1
 800448e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	4013      	ands	r3, r2
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	429a      	cmp	r2, r3
 800449e:	d196      	bne.n	80043ce <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3728      	adds	r7, #40	; 0x28
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	20000004 	.word	0x20000004

080044b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b088      	sub	sp, #32
 80044b4:	af02      	add	r7, sp, #8
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f7ff ff5b 	bl	8004384 <SPI_WaitFifoStateUntilTimeout>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d007      	beq.n	80044e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044d8:	f043 0220 	orr.w	r2, r3, #32
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e046      	b.n	8004572 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80044e4:	4b25      	ldr	r3, [pc, #148]	; (800457c <SPI_EndRxTxTransaction+0xcc>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a25      	ldr	r2, [pc, #148]	; (8004580 <SPI_EndRxTxTransaction+0xd0>)
 80044ea:	fba2 2303 	umull	r2, r3, r2, r3
 80044ee:	0d5b      	lsrs	r3, r3, #21
 80044f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044f4:	fb02 f303 	mul.w	r3, r2, r3
 80044f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004502:	d112      	bne.n	800452a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	2200      	movs	r2, #0
 800450c:	2180      	movs	r1, #128	; 0x80
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f7ff feb0 	bl	8004274 <SPI_WaitFlagStateUntilTimeout>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d016      	beq.n	8004548 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800451e:	f043 0220 	orr.w	r2, r3, #32
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e023      	b.n	8004572 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	3b01      	subs	r3, #1
 8004534:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004540:	2b80      	cmp	r3, #128	; 0x80
 8004542:	d0f2      	beq.n	800452a <SPI_EndRxTxTransaction+0x7a>
 8004544:	e000      	b.n	8004548 <SPI_EndRxTxTransaction+0x98>
        break;
 8004546:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2200      	movs	r2, #0
 8004550:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f7ff ff15 	bl	8004384 <SPI_WaitFifoStateUntilTimeout>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d007      	beq.n	8004570 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004564:	f043 0220 	orr.w	r2, r3, #32
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e000      	b.n	8004572 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3718      	adds	r7, #24
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	20000004 	.word	0x20000004
 8004580:	165e9f81 	.word	0x165e9f81

08004584 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e040      	b.n	8004618 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800459a:	2b00      	cmp	r3, #0
 800459c:	d106      	bne.n	80045ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7fd fc6c 	bl	8001e84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2224      	movs	r2, #36	; 0x24
 80045b0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 0201 	bic.w	r2, r2, #1
 80045c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f990 	bl	80048e8 <UART_SetConfig>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d101      	bne.n	80045d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e022      	b.n	8004618 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 fbe6 	bl	8004dac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689a      	ldr	r2, [r3, #8]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0201 	orr.w	r2, r2, #1
 800460e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 fc6d 	bl	8004ef0 <UART_CheckIdleState>
 8004616:	4603      	mov	r3, r0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3708      	adds	r7, #8
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b08a      	sub	sp, #40	; 0x28
 8004624:	af02      	add	r7, sp, #8
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	603b      	str	r3, [r7, #0]
 800462c:	4613      	mov	r3, r2
 800462e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004634:	2b20      	cmp	r3, #32
 8004636:	f040 8081 	bne.w	800473c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d002      	beq.n	8004646 <HAL_UART_Transmit+0x26>
 8004640:	88fb      	ldrh	r3, [r7, #6]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e079      	b.n	800473e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004650:	2b01      	cmp	r3, #1
 8004652:	d101      	bne.n	8004658 <HAL_UART_Transmit+0x38>
 8004654:	2302      	movs	r3, #2
 8004656:	e072      	b.n	800473e <HAL_UART_Transmit+0x11e>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2221      	movs	r2, #33	; 0x21
 800466c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800466e:	f7fd fe5f 	bl	8002330 <HAL_GetTick>
 8004672:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	88fa      	ldrh	r2, [r7, #6]
 8004678:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	88fa      	ldrh	r2, [r7, #6]
 8004680:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800468c:	d108      	bne.n	80046a0 <HAL_UART_Transmit+0x80>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d104      	bne.n	80046a0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004696:	2300      	movs	r3, #0
 8004698:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	61bb      	str	r3, [r7, #24]
 800469e:	e003      	b.n	80046a8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046a4:	2300      	movs	r3, #0
 80046a6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80046b0:	e02c      	b.n	800470c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2200      	movs	r2, #0
 80046ba:	2180      	movs	r1, #128	; 0x80
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 fc4a 	bl	8004f56 <UART_WaitOnFlagUntilTimeout>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d001      	beq.n	80046cc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e038      	b.n	800473e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10b      	bne.n	80046ea <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	461a      	mov	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	3302      	adds	r3, #2
 80046e6:	61bb      	str	r3, [r7, #24]
 80046e8:	e007      	b.n	80046fa <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	781a      	ldrb	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	3301      	adds	r3, #1
 80046f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004700:	b29b      	uxth	r3, r3
 8004702:	3b01      	subs	r3, #1
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004712:	b29b      	uxth	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1cc      	bne.n	80046b2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	2200      	movs	r2, #0
 8004720:	2140      	movs	r1, #64	; 0x40
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f000 fc17 	bl	8004f56 <UART_WaitOnFlagUntilTimeout>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e005      	b.n	800473e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2220      	movs	r2, #32
 8004736:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004738:	2300      	movs	r3, #0
 800473a:	e000      	b.n	800473e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800473c:	2302      	movs	r3, #2
  }
}
 800473e:	4618      	mov	r0, r3
 8004740:	3720      	adds	r7, #32
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b08a      	sub	sp, #40	; 0x28
 800474a:	af02      	add	r7, sp, #8
 800474c:	60f8      	str	r0, [r7, #12]
 800474e:	60b9      	str	r1, [r7, #8]
 8004750:	603b      	str	r3, [r7, #0]
 8004752:	4613      	mov	r3, r2
 8004754:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800475a:	2b20      	cmp	r3, #32
 800475c:	f040 80be 	bne.w	80048dc <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d002      	beq.n	800476c <HAL_UART_Receive+0x26>
 8004766:	88fb      	ldrh	r3, [r7, #6]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e0b6      	b.n	80048de <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004776:	2b01      	cmp	r3, #1
 8004778:	d101      	bne.n	800477e <HAL_UART_Receive+0x38>
 800477a:	2302      	movs	r3, #2
 800477c:	e0af      	b.n	80048de <HAL_UART_Receive+0x198>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2222      	movs	r2, #34	; 0x22
 8004792:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800479a:	f7fd fdc9 	bl	8002330 <HAL_GetTick>
 800479e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	88fa      	ldrh	r2, [r7, #6]
 80047a4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	88fa      	ldrh	r2, [r7, #6]
 80047ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b8:	d10e      	bne.n	80047d8 <HAL_UART_Receive+0x92>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d105      	bne.n	80047ce <HAL_UART_Receive+0x88>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80047c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047cc:	e02d      	b.n	800482a <HAL_UART_Receive+0xe4>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	22ff      	movs	r2, #255	; 0xff
 80047d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047d6:	e028      	b.n	800482a <HAL_UART_Receive+0xe4>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10d      	bne.n	80047fc <HAL_UART_Receive+0xb6>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d104      	bne.n	80047f2 <HAL_UART_Receive+0xac>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	22ff      	movs	r2, #255	; 0xff
 80047ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047f0:	e01b      	b.n	800482a <HAL_UART_Receive+0xe4>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	227f      	movs	r2, #127	; 0x7f
 80047f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047fa:	e016      	b.n	800482a <HAL_UART_Receive+0xe4>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004804:	d10d      	bne.n	8004822 <HAL_UART_Receive+0xdc>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d104      	bne.n	8004818 <HAL_UART_Receive+0xd2>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	227f      	movs	r2, #127	; 0x7f
 8004812:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004816:	e008      	b.n	800482a <HAL_UART_Receive+0xe4>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	223f      	movs	r2, #63	; 0x3f
 800481c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004820:	e003      	b.n	800482a <HAL_UART_Receive+0xe4>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004830:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800483a:	d108      	bne.n	800484e <HAL_UART_Receive+0x108>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d104      	bne.n	800484e <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004844:	2300      	movs	r3, #0
 8004846:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	61bb      	str	r3, [r7, #24]
 800484c:	e003      	b.n	8004856 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004852:	2300      	movs	r3, #0
 8004854:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800485e:	e032      	b.n	80048c6 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	2200      	movs	r2, #0
 8004868:	2120      	movs	r1, #32
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 fb73 	bl	8004f56 <UART_WaitOnFlagUntilTimeout>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e031      	b.n	80048de <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10c      	bne.n	800489a <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	b29a      	uxth	r2, r3
 8004888:	8a7b      	ldrh	r3, [r7, #18]
 800488a:	4013      	ands	r3, r2
 800488c:	b29a      	uxth	r2, r3
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	3302      	adds	r3, #2
 8004896:	61bb      	str	r3, [r7, #24]
 8004898:	e00c      	b.n	80048b4 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	8a7b      	ldrh	r3, [r7, #18]
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	4013      	ands	r3, r2
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	3301      	adds	r3, #1
 80048b2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	3b01      	subs	r3, #1
 80048be:	b29a      	uxth	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1c6      	bne.n	8004860 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2220      	movs	r2, #32
 80048d6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80048d8:	2300      	movs	r3, #0
 80048da:	e000      	b.n	80048de <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 80048dc:	2302      	movs	r3, #2
  }
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3720      	adds	r7, #32
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
	...

080048e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b088      	sub	sp, #32
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048f0:	2300      	movs	r3, #0
 80048f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689a      	ldr	r2, [r3, #8]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	431a      	orrs	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	69db      	ldr	r3, [r3, #28]
 8004908:	4313      	orrs	r3, r2
 800490a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	4ba7      	ldr	r3, [pc, #668]	; (8004bb0 <UART_SetConfig+0x2c8>)
 8004914:	4013      	ands	r3, r2
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	6812      	ldr	r2, [r2, #0]
 800491a:	6979      	ldr	r1, [r7, #20]
 800491c:	430b      	orrs	r3, r1
 800491e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68da      	ldr	r2, [r3, #12]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	4313      	orrs	r3, r2
 8004944:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	430a      	orrs	r2, r1
 8004958:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a95      	ldr	r2, [pc, #596]	; (8004bb4 <UART_SetConfig+0x2cc>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d120      	bne.n	80049a6 <UART_SetConfig+0xbe>
 8004964:	4b94      	ldr	r3, [pc, #592]	; (8004bb8 <UART_SetConfig+0x2d0>)
 8004966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	2b03      	cmp	r3, #3
 8004970:	d816      	bhi.n	80049a0 <UART_SetConfig+0xb8>
 8004972:	a201      	add	r2, pc, #4	; (adr r2, 8004978 <UART_SetConfig+0x90>)
 8004974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004978:	08004989 	.word	0x08004989
 800497c:	08004995 	.word	0x08004995
 8004980:	0800498f 	.word	0x0800498f
 8004984:	0800499b 	.word	0x0800499b
 8004988:	2301      	movs	r3, #1
 800498a:	77fb      	strb	r3, [r7, #31]
 800498c:	e14f      	b.n	8004c2e <UART_SetConfig+0x346>
 800498e:	2302      	movs	r3, #2
 8004990:	77fb      	strb	r3, [r7, #31]
 8004992:	e14c      	b.n	8004c2e <UART_SetConfig+0x346>
 8004994:	2304      	movs	r3, #4
 8004996:	77fb      	strb	r3, [r7, #31]
 8004998:	e149      	b.n	8004c2e <UART_SetConfig+0x346>
 800499a:	2308      	movs	r3, #8
 800499c:	77fb      	strb	r3, [r7, #31]
 800499e:	e146      	b.n	8004c2e <UART_SetConfig+0x346>
 80049a0:	2310      	movs	r3, #16
 80049a2:	77fb      	strb	r3, [r7, #31]
 80049a4:	e143      	b.n	8004c2e <UART_SetConfig+0x346>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a84      	ldr	r2, [pc, #528]	; (8004bbc <UART_SetConfig+0x2d4>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d132      	bne.n	8004a16 <UART_SetConfig+0x12e>
 80049b0:	4b81      	ldr	r3, [pc, #516]	; (8004bb8 <UART_SetConfig+0x2d0>)
 80049b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b6:	f003 030c 	and.w	r3, r3, #12
 80049ba:	2b0c      	cmp	r3, #12
 80049bc:	d828      	bhi.n	8004a10 <UART_SetConfig+0x128>
 80049be:	a201      	add	r2, pc, #4	; (adr r2, 80049c4 <UART_SetConfig+0xdc>)
 80049c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c4:	080049f9 	.word	0x080049f9
 80049c8:	08004a11 	.word	0x08004a11
 80049cc:	08004a11 	.word	0x08004a11
 80049d0:	08004a11 	.word	0x08004a11
 80049d4:	08004a05 	.word	0x08004a05
 80049d8:	08004a11 	.word	0x08004a11
 80049dc:	08004a11 	.word	0x08004a11
 80049e0:	08004a11 	.word	0x08004a11
 80049e4:	080049ff 	.word	0x080049ff
 80049e8:	08004a11 	.word	0x08004a11
 80049ec:	08004a11 	.word	0x08004a11
 80049f0:	08004a11 	.word	0x08004a11
 80049f4:	08004a0b 	.word	0x08004a0b
 80049f8:	2300      	movs	r3, #0
 80049fa:	77fb      	strb	r3, [r7, #31]
 80049fc:	e117      	b.n	8004c2e <UART_SetConfig+0x346>
 80049fe:	2302      	movs	r3, #2
 8004a00:	77fb      	strb	r3, [r7, #31]
 8004a02:	e114      	b.n	8004c2e <UART_SetConfig+0x346>
 8004a04:	2304      	movs	r3, #4
 8004a06:	77fb      	strb	r3, [r7, #31]
 8004a08:	e111      	b.n	8004c2e <UART_SetConfig+0x346>
 8004a0a:	2308      	movs	r3, #8
 8004a0c:	77fb      	strb	r3, [r7, #31]
 8004a0e:	e10e      	b.n	8004c2e <UART_SetConfig+0x346>
 8004a10:	2310      	movs	r3, #16
 8004a12:	77fb      	strb	r3, [r7, #31]
 8004a14:	e10b      	b.n	8004c2e <UART_SetConfig+0x346>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a69      	ldr	r2, [pc, #420]	; (8004bc0 <UART_SetConfig+0x2d8>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d120      	bne.n	8004a62 <UART_SetConfig+0x17a>
 8004a20:	4b65      	ldr	r3, [pc, #404]	; (8004bb8 <UART_SetConfig+0x2d0>)
 8004a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a26:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a2a:	2b30      	cmp	r3, #48	; 0x30
 8004a2c:	d013      	beq.n	8004a56 <UART_SetConfig+0x16e>
 8004a2e:	2b30      	cmp	r3, #48	; 0x30
 8004a30:	d814      	bhi.n	8004a5c <UART_SetConfig+0x174>
 8004a32:	2b20      	cmp	r3, #32
 8004a34:	d009      	beq.n	8004a4a <UART_SetConfig+0x162>
 8004a36:	2b20      	cmp	r3, #32
 8004a38:	d810      	bhi.n	8004a5c <UART_SetConfig+0x174>
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d002      	beq.n	8004a44 <UART_SetConfig+0x15c>
 8004a3e:	2b10      	cmp	r3, #16
 8004a40:	d006      	beq.n	8004a50 <UART_SetConfig+0x168>
 8004a42:	e00b      	b.n	8004a5c <UART_SetConfig+0x174>
 8004a44:	2300      	movs	r3, #0
 8004a46:	77fb      	strb	r3, [r7, #31]
 8004a48:	e0f1      	b.n	8004c2e <UART_SetConfig+0x346>
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	77fb      	strb	r3, [r7, #31]
 8004a4e:	e0ee      	b.n	8004c2e <UART_SetConfig+0x346>
 8004a50:	2304      	movs	r3, #4
 8004a52:	77fb      	strb	r3, [r7, #31]
 8004a54:	e0eb      	b.n	8004c2e <UART_SetConfig+0x346>
 8004a56:	2308      	movs	r3, #8
 8004a58:	77fb      	strb	r3, [r7, #31]
 8004a5a:	e0e8      	b.n	8004c2e <UART_SetConfig+0x346>
 8004a5c:	2310      	movs	r3, #16
 8004a5e:	77fb      	strb	r3, [r7, #31]
 8004a60:	e0e5      	b.n	8004c2e <UART_SetConfig+0x346>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a57      	ldr	r2, [pc, #348]	; (8004bc4 <UART_SetConfig+0x2dc>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d120      	bne.n	8004aae <UART_SetConfig+0x1c6>
 8004a6c:	4b52      	ldr	r3, [pc, #328]	; (8004bb8 <UART_SetConfig+0x2d0>)
 8004a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a76:	2bc0      	cmp	r3, #192	; 0xc0
 8004a78:	d013      	beq.n	8004aa2 <UART_SetConfig+0x1ba>
 8004a7a:	2bc0      	cmp	r3, #192	; 0xc0
 8004a7c:	d814      	bhi.n	8004aa8 <UART_SetConfig+0x1c0>
 8004a7e:	2b80      	cmp	r3, #128	; 0x80
 8004a80:	d009      	beq.n	8004a96 <UART_SetConfig+0x1ae>
 8004a82:	2b80      	cmp	r3, #128	; 0x80
 8004a84:	d810      	bhi.n	8004aa8 <UART_SetConfig+0x1c0>
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d002      	beq.n	8004a90 <UART_SetConfig+0x1a8>
 8004a8a:	2b40      	cmp	r3, #64	; 0x40
 8004a8c:	d006      	beq.n	8004a9c <UART_SetConfig+0x1b4>
 8004a8e:	e00b      	b.n	8004aa8 <UART_SetConfig+0x1c0>
 8004a90:	2300      	movs	r3, #0
 8004a92:	77fb      	strb	r3, [r7, #31]
 8004a94:	e0cb      	b.n	8004c2e <UART_SetConfig+0x346>
 8004a96:	2302      	movs	r3, #2
 8004a98:	77fb      	strb	r3, [r7, #31]
 8004a9a:	e0c8      	b.n	8004c2e <UART_SetConfig+0x346>
 8004a9c:	2304      	movs	r3, #4
 8004a9e:	77fb      	strb	r3, [r7, #31]
 8004aa0:	e0c5      	b.n	8004c2e <UART_SetConfig+0x346>
 8004aa2:	2308      	movs	r3, #8
 8004aa4:	77fb      	strb	r3, [r7, #31]
 8004aa6:	e0c2      	b.n	8004c2e <UART_SetConfig+0x346>
 8004aa8:	2310      	movs	r3, #16
 8004aaa:	77fb      	strb	r3, [r7, #31]
 8004aac:	e0bf      	b.n	8004c2e <UART_SetConfig+0x346>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a45      	ldr	r2, [pc, #276]	; (8004bc8 <UART_SetConfig+0x2e0>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d125      	bne.n	8004b04 <UART_SetConfig+0x21c>
 8004ab8:	4b3f      	ldr	r3, [pc, #252]	; (8004bb8 <UART_SetConfig+0x2d0>)
 8004aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ac2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ac6:	d017      	beq.n	8004af8 <UART_SetConfig+0x210>
 8004ac8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004acc:	d817      	bhi.n	8004afe <UART_SetConfig+0x216>
 8004ace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ad2:	d00b      	beq.n	8004aec <UART_SetConfig+0x204>
 8004ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ad8:	d811      	bhi.n	8004afe <UART_SetConfig+0x216>
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d003      	beq.n	8004ae6 <UART_SetConfig+0x1fe>
 8004ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ae2:	d006      	beq.n	8004af2 <UART_SetConfig+0x20a>
 8004ae4:	e00b      	b.n	8004afe <UART_SetConfig+0x216>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	77fb      	strb	r3, [r7, #31]
 8004aea:	e0a0      	b.n	8004c2e <UART_SetConfig+0x346>
 8004aec:	2302      	movs	r3, #2
 8004aee:	77fb      	strb	r3, [r7, #31]
 8004af0:	e09d      	b.n	8004c2e <UART_SetConfig+0x346>
 8004af2:	2304      	movs	r3, #4
 8004af4:	77fb      	strb	r3, [r7, #31]
 8004af6:	e09a      	b.n	8004c2e <UART_SetConfig+0x346>
 8004af8:	2308      	movs	r3, #8
 8004afa:	77fb      	strb	r3, [r7, #31]
 8004afc:	e097      	b.n	8004c2e <UART_SetConfig+0x346>
 8004afe:	2310      	movs	r3, #16
 8004b00:	77fb      	strb	r3, [r7, #31]
 8004b02:	e094      	b.n	8004c2e <UART_SetConfig+0x346>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a30      	ldr	r2, [pc, #192]	; (8004bcc <UART_SetConfig+0x2e4>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d125      	bne.n	8004b5a <UART_SetConfig+0x272>
 8004b0e:	4b2a      	ldr	r3, [pc, #168]	; (8004bb8 <UART_SetConfig+0x2d0>)
 8004b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b1c:	d017      	beq.n	8004b4e <UART_SetConfig+0x266>
 8004b1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b22:	d817      	bhi.n	8004b54 <UART_SetConfig+0x26c>
 8004b24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b28:	d00b      	beq.n	8004b42 <UART_SetConfig+0x25a>
 8004b2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b2e:	d811      	bhi.n	8004b54 <UART_SetConfig+0x26c>
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d003      	beq.n	8004b3c <UART_SetConfig+0x254>
 8004b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b38:	d006      	beq.n	8004b48 <UART_SetConfig+0x260>
 8004b3a:	e00b      	b.n	8004b54 <UART_SetConfig+0x26c>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	77fb      	strb	r3, [r7, #31]
 8004b40:	e075      	b.n	8004c2e <UART_SetConfig+0x346>
 8004b42:	2302      	movs	r3, #2
 8004b44:	77fb      	strb	r3, [r7, #31]
 8004b46:	e072      	b.n	8004c2e <UART_SetConfig+0x346>
 8004b48:	2304      	movs	r3, #4
 8004b4a:	77fb      	strb	r3, [r7, #31]
 8004b4c:	e06f      	b.n	8004c2e <UART_SetConfig+0x346>
 8004b4e:	2308      	movs	r3, #8
 8004b50:	77fb      	strb	r3, [r7, #31]
 8004b52:	e06c      	b.n	8004c2e <UART_SetConfig+0x346>
 8004b54:	2310      	movs	r3, #16
 8004b56:	77fb      	strb	r3, [r7, #31]
 8004b58:	e069      	b.n	8004c2e <UART_SetConfig+0x346>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a1c      	ldr	r2, [pc, #112]	; (8004bd0 <UART_SetConfig+0x2e8>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d137      	bne.n	8004bd4 <UART_SetConfig+0x2ec>
 8004b64:	4b14      	ldr	r3, [pc, #80]	; (8004bb8 <UART_SetConfig+0x2d0>)
 8004b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004b6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b72:	d017      	beq.n	8004ba4 <UART_SetConfig+0x2bc>
 8004b74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b78:	d817      	bhi.n	8004baa <UART_SetConfig+0x2c2>
 8004b7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b7e:	d00b      	beq.n	8004b98 <UART_SetConfig+0x2b0>
 8004b80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b84:	d811      	bhi.n	8004baa <UART_SetConfig+0x2c2>
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <UART_SetConfig+0x2aa>
 8004b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b8e:	d006      	beq.n	8004b9e <UART_SetConfig+0x2b6>
 8004b90:	e00b      	b.n	8004baa <UART_SetConfig+0x2c2>
 8004b92:	2300      	movs	r3, #0
 8004b94:	77fb      	strb	r3, [r7, #31]
 8004b96:	e04a      	b.n	8004c2e <UART_SetConfig+0x346>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	77fb      	strb	r3, [r7, #31]
 8004b9c:	e047      	b.n	8004c2e <UART_SetConfig+0x346>
 8004b9e:	2304      	movs	r3, #4
 8004ba0:	77fb      	strb	r3, [r7, #31]
 8004ba2:	e044      	b.n	8004c2e <UART_SetConfig+0x346>
 8004ba4:	2308      	movs	r3, #8
 8004ba6:	77fb      	strb	r3, [r7, #31]
 8004ba8:	e041      	b.n	8004c2e <UART_SetConfig+0x346>
 8004baa:	2310      	movs	r3, #16
 8004bac:	77fb      	strb	r3, [r7, #31]
 8004bae:	e03e      	b.n	8004c2e <UART_SetConfig+0x346>
 8004bb0:	efff69f3 	.word	0xefff69f3
 8004bb4:	40011000 	.word	0x40011000
 8004bb8:	40023800 	.word	0x40023800
 8004bbc:	40004400 	.word	0x40004400
 8004bc0:	40004800 	.word	0x40004800
 8004bc4:	40004c00 	.word	0x40004c00
 8004bc8:	40005000 	.word	0x40005000
 8004bcc:	40011400 	.word	0x40011400
 8004bd0:	40007800 	.word	0x40007800
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a71      	ldr	r2, [pc, #452]	; (8004da0 <UART_SetConfig+0x4b8>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d125      	bne.n	8004c2a <UART_SetConfig+0x342>
 8004bde:	4b71      	ldr	r3, [pc, #452]	; (8004da4 <UART_SetConfig+0x4bc>)
 8004be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004be8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004bec:	d017      	beq.n	8004c1e <UART_SetConfig+0x336>
 8004bee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004bf2:	d817      	bhi.n	8004c24 <UART_SetConfig+0x33c>
 8004bf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bf8:	d00b      	beq.n	8004c12 <UART_SetConfig+0x32a>
 8004bfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bfe:	d811      	bhi.n	8004c24 <UART_SetConfig+0x33c>
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d003      	beq.n	8004c0c <UART_SetConfig+0x324>
 8004c04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c08:	d006      	beq.n	8004c18 <UART_SetConfig+0x330>
 8004c0a:	e00b      	b.n	8004c24 <UART_SetConfig+0x33c>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	77fb      	strb	r3, [r7, #31]
 8004c10:	e00d      	b.n	8004c2e <UART_SetConfig+0x346>
 8004c12:	2302      	movs	r3, #2
 8004c14:	77fb      	strb	r3, [r7, #31]
 8004c16:	e00a      	b.n	8004c2e <UART_SetConfig+0x346>
 8004c18:	2304      	movs	r3, #4
 8004c1a:	77fb      	strb	r3, [r7, #31]
 8004c1c:	e007      	b.n	8004c2e <UART_SetConfig+0x346>
 8004c1e:	2308      	movs	r3, #8
 8004c20:	77fb      	strb	r3, [r7, #31]
 8004c22:	e004      	b.n	8004c2e <UART_SetConfig+0x346>
 8004c24:	2310      	movs	r3, #16
 8004c26:	77fb      	strb	r3, [r7, #31]
 8004c28:	e001      	b.n	8004c2e <UART_SetConfig+0x346>
 8004c2a:	2310      	movs	r3, #16
 8004c2c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c36:	d15a      	bne.n	8004cee <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8004c38:	7ffb      	ldrb	r3, [r7, #31]
 8004c3a:	2b08      	cmp	r3, #8
 8004c3c:	d827      	bhi.n	8004c8e <UART_SetConfig+0x3a6>
 8004c3e:	a201      	add	r2, pc, #4	; (adr r2, 8004c44 <UART_SetConfig+0x35c>)
 8004c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c44:	08004c69 	.word	0x08004c69
 8004c48:	08004c71 	.word	0x08004c71
 8004c4c:	08004c79 	.word	0x08004c79
 8004c50:	08004c8f 	.word	0x08004c8f
 8004c54:	08004c7f 	.word	0x08004c7f
 8004c58:	08004c8f 	.word	0x08004c8f
 8004c5c:	08004c8f 	.word	0x08004c8f
 8004c60:	08004c8f 	.word	0x08004c8f
 8004c64:	08004c87 	.word	0x08004c87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c68:	f7fe fc2e 	bl	80034c8 <HAL_RCC_GetPCLK1Freq>
 8004c6c:	61b8      	str	r0, [r7, #24]
        break;
 8004c6e:	e013      	b.n	8004c98 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c70:	f7fe fc3e 	bl	80034f0 <HAL_RCC_GetPCLK2Freq>
 8004c74:	61b8      	str	r0, [r7, #24]
        break;
 8004c76:	e00f      	b.n	8004c98 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c78:	4b4b      	ldr	r3, [pc, #300]	; (8004da8 <UART_SetConfig+0x4c0>)
 8004c7a:	61bb      	str	r3, [r7, #24]
        break;
 8004c7c:	e00c      	b.n	8004c98 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c7e:	f7fe fb35 	bl	80032ec <HAL_RCC_GetSysClockFreq>
 8004c82:	61b8      	str	r0, [r7, #24]
        break;
 8004c84:	e008      	b.n	8004c98 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c8a:	61bb      	str	r3, [r7, #24]
        break;
 8004c8c:	e004      	b.n	8004c98 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	77bb      	strb	r3, [r7, #30]
        break;
 8004c96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d074      	beq.n	8004d88 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	005a      	lsls	r2, r3, #1
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	085b      	lsrs	r3, r3, #1
 8004ca8:	441a      	add	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	2b0f      	cmp	r3, #15
 8004cb8:	d916      	bls.n	8004ce8 <UART_SetConfig+0x400>
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc0:	d212      	bcs.n	8004ce8 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	f023 030f 	bic.w	r3, r3, #15
 8004cca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	085b      	lsrs	r3, r3, #1
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	89fb      	ldrh	r3, [r7, #14]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	89fa      	ldrh	r2, [r7, #14]
 8004ce4:	60da      	str	r2, [r3, #12]
 8004ce6:	e04f      	b.n	8004d88 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	77bb      	strb	r3, [r7, #30]
 8004cec:	e04c      	b.n	8004d88 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cee:	7ffb      	ldrb	r3, [r7, #31]
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d828      	bhi.n	8004d46 <UART_SetConfig+0x45e>
 8004cf4:	a201      	add	r2, pc, #4	; (adr r2, 8004cfc <UART_SetConfig+0x414>)
 8004cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfa:	bf00      	nop
 8004cfc:	08004d21 	.word	0x08004d21
 8004d00:	08004d29 	.word	0x08004d29
 8004d04:	08004d31 	.word	0x08004d31
 8004d08:	08004d47 	.word	0x08004d47
 8004d0c:	08004d37 	.word	0x08004d37
 8004d10:	08004d47 	.word	0x08004d47
 8004d14:	08004d47 	.word	0x08004d47
 8004d18:	08004d47 	.word	0x08004d47
 8004d1c:	08004d3f 	.word	0x08004d3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d20:	f7fe fbd2 	bl	80034c8 <HAL_RCC_GetPCLK1Freq>
 8004d24:	61b8      	str	r0, [r7, #24]
        break;
 8004d26:	e013      	b.n	8004d50 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d28:	f7fe fbe2 	bl	80034f0 <HAL_RCC_GetPCLK2Freq>
 8004d2c:	61b8      	str	r0, [r7, #24]
        break;
 8004d2e:	e00f      	b.n	8004d50 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d30:	4b1d      	ldr	r3, [pc, #116]	; (8004da8 <UART_SetConfig+0x4c0>)
 8004d32:	61bb      	str	r3, [r7, #24]
        break;
 8004d34:	e00c      	b.n	8004d50 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d36:	f7fe fad9 	bl	80032ec <HAL_RCC_GetSysClockFreq>
 8004d3a:	61b8      	str	r0, [r7, #24]
        break;
 8004d3c:	e008      	b.n	8004d50 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d42:	61bb      	str	r3, [r7, #24]
        break;
 8004d44:	e004      	b.n	8004d50 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004d46:	2300      	movs	r3, #0
 8004d48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	77bb      	strb	r3, [r7, #30]
        break;
 8004d4e:	bf00      	nop
    }

    if (pclk != 0U)
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d018      	beq.n	8004d88 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	085a      	lsrs	r2, r3, #1
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	441a      	add	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	2b0f      	cmp	r3, #15
 8004d6e:	d909      	bls.n	8004d84 <UART_SetConfig+0x49c>
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d76:	d205      	bcs.n	8004d84 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	60da      	str	r2, [r3, #12]
 8004d82:	e001      	b.n	8004d88 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004d94:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3720      	adds	r7, #32
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	40007c00 	.word	0x40007c00
 8004da4:	40023800 	.word	0x40023800
 8004da8:	00f42400 	.word	0x00f42400

08004dac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00a      	beq.n	8004dd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00a      	beq.n	8004df8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	430a      	orrs	r2, r1
 8004df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00a      	beq.n	8004e1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	f003 0308 	and.w	r3, r3, #8
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00a      	beq.n	8004e3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e40:	f003 0310 	and.w	r3, r3, #16
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00a      	beq.n	8004e5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	f003 0320 	and.w	r3, r3, #32
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00a      	beq.n	8004e80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d01a      	beq.n	8004ec2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eaa:	d10a      	bne.n	8004ec2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00a      	beq.n	8004ee4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	605a      	str	r2, [r3, #4]
  }
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af02      	add	r7, sp, #8
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f00:	f7fd fa16 	bl	8002330 <HAL_GetTick>
 8004f04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0308 	and.w	r3, r3, #8
 8004f10:	2b08      	cmp	r3, #8
 8004f12:	d10e      	bne.n	8004f32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f817 	bl	8004f56 <UART_WaitOnFlagUntilTimeout>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e00d      	b.n	8004f4e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2220      	movs	r2, #32
 8004f36:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b09c      	sub	sp, #112	; 0x70
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	60f8      	str	r0, [r7, #12]
 8004f5e:	60b9      	str	r1, [r7, #8]
 8004f60:	603b      	str	r3, [r7, #0]
 8004f62:	4613      	mov	r3, r2
 8004f64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f66:	e0a5      	b.n	80050b4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6e:	f000 80a1 	beq.w	80050b4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f72:	f7fd f9dd 	bl	8002330 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d302      	bcc.n	8004f88 <UART_WaitOnFlagUntilTimeout+0x32>
 8004f82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d13e      	bne.n	8005006 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f90:	e853 3f00 	ldrex	r3, [r3]
 8004f94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f9c:	667b      	str	r3, [r7, #100]	; 0x64
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fa8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004faa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004fac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004fae:	e841 2300 	strex	r3, r2, [r1]
 8004fb2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004fb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1e6      	bne.n	8004f88 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	3308      	adds	r3, #8
 8004fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fc4:	e853 3f00 	ldrex	r3, [r3]
 8004fc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fcc:	f023 0301 	bic.w	r3, r3, #1
 8004fd0:	663b      	str	r3, [r7, #96]	; 0x60
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	3308      	adds	r3, #8
 8004fd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004fda:	64ba      	str	r2, [r7, #72]	; 0x48
 8004fdc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004fe0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fe2:	e841 2300 	strex	r3, r2, [r1]
 8004fe6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004fe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1e5      	bne.n	8004fba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e067      	b.n	80050d6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b00      	cmp	r3, #0
 8005012:	d04f      	beq.n	80050b4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	69db      	ldr	r3, [r3, #28]
 800501a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800501e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005022:	d147      	bne.n	80050b4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800502c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005036:	e853 3f00 	ldrex	r3, [r3]
 800503a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005042:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	461a      	mov	r2, r3
 800504a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800504c:	637b      	str	r3, [r7, #52]	; 0x34
 800504e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005050:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005052:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005054:	e841 2300 	strex	r3, r2, [r1]
 8005058:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800505a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1e6      	bne.n	800502e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	3308      	adds	r3, #8
 8005066:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	e853 3f00 	ldrex	r3, [r3]
 800506e:	613b      	str	r3, [r7, #16]
   return(result);
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	f023 0301 	bic.w	r3, r3, #1
 8005076:	66bb      	str	r3, [r7, #104]	; 0x68
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	3308      	adds	r3, #8
 800507e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005080:	623a      	str	r2, [r7, #32]
 8005082:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005084:	69f9      	ldr	r1, [r7, #28]
 8005086:	6a3a      	ldr	r2, [r7, #32]
 8005088:	e841 2300 	strex	r3, r2, [r1]
 800508c:	61bb      	str	r3, [r7, #24]
   return(result);
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1e5      	bne.n	8005060 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2220      	movs	r2, #32
 8005098:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2220      	movs	r2, #32
 800509e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2220      	movs	r2, #32
 80050a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e010      	b.n	80050d6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	69da      	ldr	r2, [r3, #28]
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	4013      	ands	r3, r2
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	bf0c      	ite	eq
 80050c4:	2301      	moveq	r3, #1
 80050c6:	2300      	movne	r3, #0
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	461a      	mov	r2, r3
 80050cc:	79fb      	ldrb	r3, [r7, #7]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	f43f af4a 	beq.w	8004f68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3770      	adds	r7, #112	; 0x70
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
	...

080050e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050e0:	b084      	sub	sp, #16
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b084      	sub	sp, #16
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
 80050ea:	f107 001c 	add.w	r0, r7, #28
 80050ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d120      	bne.n	800513a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68da      	ldr	r2, [r3, #12]
 8005108:	4b20      	ldr	r3, [pc, #128]	; (800518c <USB_CoreInit+0xac>)
 800510a:	4013      	ands	r3, r2
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800511c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800511e:	2b01      	cmp	r3, #1
 8005120:	d105      	bne.n	800512e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 fa92 	bl	8005658 <USB_CoreReset>
 8005134:	4603      	mov	r3, r0
 8005136:	73fb      	strb	r3, [r7, #15]
 8005138:	e010      	b.n	800515c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 fa86 	bl	8005658 <USB_CoreReset>
 800514c:	4603      	mov	r3, r0
 800514e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005154:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800515c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515e:	2b01      	cmp	r3, #1
 8005160:	d10b      	bne.n	800517a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f043 0206 	orr.w	r2, r3, #6
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f043 0220 	orr.w	r2, r3, #32
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800517a:	7bfb      	ldrb	r3, [r7, #15]
}
 800517c:	4618      	mov	r0, r3
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005186:	b004      	add	sp, #16
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	ffbdffbf 	.word	0xffbdffbf

08005190 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f023 0201 	bic.w	r2, r3, #1
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b084      	sub	sp, #16
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	460b      	mov	r3, r1
 80051bc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80051be:	2300      	movs	r3, #0
 80051c0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80051ce:	78fb      	ldrb	r3, [r7, #3]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d115      	bne.n	8005200 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80051e0:	2001      	movs	r0, #1
 80051e2:	f7fd f8b1 	bl	8002348 <HAL_Delay>
      ms++;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	3301      	adds	r3, #1
 80051ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 fa25 	bl	800563c <USB_GetMode>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d01e      	beq.n	8005236 <USB_SetCurrentMode+0x84>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2b31      	cmp	r3, #49	; 0x31
 80051fc:	d9f0      	bls.n	80051e0 <USB_SetCurrentMode+0x2e>
 80051fe:	e01a      	b.n	8005236 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005200:	78fb      	ldrb	r3, [r7, #3]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d115      	bne.n	8005232 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005212:	2001      	movs	r0, #1
 8005214:	f7fd f898 	bl	8002348 <HAL_Delay>
      ms++;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	3301      	adds	r3, #1
 800521c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 fa0c 	bl	800563c <USB_GetMode>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d005      	beq.n	8005236 <USB_SetCurrentMode+0x84>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2b31      	cmp	r3, #49	; 0x31
 800522e:	d9f0      	bls.n	8005212 <USB_SetCurrentMode+0x60>
 8005230:	e001      	b.n	8005236 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e005      	b.n	8005242 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2b32      	cmp	r3, #50	; 0x32
 800523a:	d101      	bne.n	8005240 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e000      	b.n	8005242 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
	...

0800524c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800524c:	b084      	sub	sp, #16
 800524e:	b580      	push	{r7, lr}
 8005250:	b086      	sub	sp, #24
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
 8005256:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800525a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800525e:	2300      	movs	r3, #0
 8005260:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005266:	2300      	movs	r3, #0
 8005268:	613b      	str	r3, [r7, #16]
 800526a:	e009      	b.n	8005280 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	3340      	adds	r3, #64	; 0x40
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	2200      	movs	r2, #0
 8005278:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	3301      	adds	r3, #1
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	2b0e      	cmp	r3, #14
 8005284:	d9f2      	bls.n	800526c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005288:	2b00      	cmp	r3, #0
 800528a:	d11c      	bne.n	80052c6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800529a:	f043 0302 	orr.w	r3, r3, #2
 800529e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	e005      	b.n	80052d2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052d8:	461a      	mov	r2, r3
 80052da:	2300      	movs	r3, #0
 80052dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e4:	4619      	mov	r1, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ec:	461a      	mov	r2, r3
 80052ee:	680b      	ldr	r3, [r1, #0]
 80052f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d10c      	bne.n	8005312 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80052f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d104      	bne.n	8005308 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80052fe:	2100      	movs	r1, #0
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f961 	bl	80055c8 <USB_SetDevSpeed>
 8005306:	e008      	b.n	800531a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005308:	2101      	movs	r1, #1
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f95c 	bl	80055c8 <USB_SetDevSpeed>
 8005310:	e003      	b.n	800531a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005312:	2103      	movs	r1, #3
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f957 	bl	80055c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800531a:	2110      	movs	r1, #16
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f8f3 	bl	8005508 <USB_FlushTxFifo>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f91d 	bl	800556c <USB_FlushRxFifo>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005342:	461a      	mov	r2, r3
 8005344:	2300      	movs	r3, #0
 8005346:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800534e:	461a      	mov	r2, r3
 8005350:	2300      	movs	r3, #0
 8005352:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800535a:	461a      	mov	r2, r3
 800535c:	2300      	movs	r3, #0
 800535e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005360:	2300      	movs	r3, #0
 8005362:	613b      	str	r3, [r7, #16]
 8005364:	e043      	b.n	80053ee <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4413      	add	r3, r2
 800536e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005378:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800537c:	d118      	bne.n	80053b0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10a      	bne.n	800539a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005390:	461a      	mov	r2, r3
 8005392:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005396:	6013      	str	r3, [r2, #0]
 8005398:	e013      	b.n	80053c2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a6:	461a      	mov	r2, r3
 80053a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80053ac:	6013      	str	r3, [r2, #0]
 80053ae:	e008      	b.n	80053c2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053bc:	461a      	mov	r2, r3
 80053be:	2300      	movs	r3, #0
 80053c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ce:	461a      	mov	r2, r3
 80053d0:	2300      	movs	r3, #0
 80053d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	015a      	lsls	r2, r3, #5
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4413      	add	r3, r2
 80053dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e0:	461a      	mov	r2, r3
 80053e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	3301      	adds	r3, #1
 80053ec:	613b      	str	r3, [r7, #16]
 80053ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d3b7      	bcc.n	8005366 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053f6:	2300      	movs	r3, #0
 80053f8:	613b      	str	r3, [r7, #16]
 80053fa:	e043      	b.n	8005484 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4413      	add	r3, r2
 8005404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800540e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005412:	d118      	bne.n	8005446 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10a      	bne.n	8005430 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4413      	add	r3, r2
 8005422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005426:	461a      	mov	r2, r3
 8005428:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	e013      	b.n	8005458 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543c:	461a      	mov	r2, r3
 800543e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005442:	6013      	str	r3, [r2, #0]
 8005444:	e008      	b.n	8005458 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	4413      	add	r3, r2
 800544e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005452:	461a      	mov	r2, r3
 8005454:	2300      	movs	r3, #0
 8005456:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005464:	461a      	mov	r2, r3
 8005466:	2300      	movs	r3, #0
 8005468:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	4413      	add	r3, r2
 8005472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005476:	461a      	mov	r2, r3
 8005478:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800547c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	3301      	adds	r3, #1
 8005482:	613b      	str	r3, [r7, #16]
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	429a      	cmp	r2, r3
 800548a:	d3b7      	bcc.n	80053fc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800549a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800549e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80054ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80054ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d105      	bne.n	80054c0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	f043 0210 	orr.w	r2, r3, #16
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	699a      	ldr	r2, [r3, #24]
 80054c4:	4b0e      	ldr	r3, [pc, #56]	; (8005500 <USB_DevInit+0x2b4>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80054cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d005      	beq.n	80054de <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	f043 0208 	orr.w	r2, r3, #8
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80054de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d105      	bne.n	80054f0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	699a      	ldr	r2, [r3, #24]
 80054e8:	4b06      	ldr	r3, [pc, #24]	; (8005504 <USB_DevInit+0x2b8>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80054f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3718      	adds	r7, #24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054fc:	b004      	add	sp, #16
 80054fe:	4770      	bx	lr
 8005500:	803c3800 	.word	0x803c3800
 8005504:	40000004 	.word	0x40000004

08005508 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005512:	2300      	movs	r3, #0
 8005514:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	3301      	adds	r3, #1
 800551a:	60fb      	str	r3, [r7, #12]
 800551c:	4a12      	ldr	r2, [pc, #72]	; (8005568 <USB_FlushTxFifo+0x60>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d901      	bls.n	8005526 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e01a      	b.n	800555c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	2b00      	cmp	r3, #0
 800552c:	daf3      	bge.n	8005516 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800552e:	2300      	movs	r3, #0
 8005530:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	019b      	lsls	r3, r3, #6
 8005536:	f043 0220 	orr.w	r2, r3, #32
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	3301      	adds	r3, #1
 8005542:	60fb      	str	r3, [r7, #12]
 8005544:	4a08      	ldr	r2, [pc, #32]	; (8005568 <USB_FlushTxFifo+0x60>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d901      	bls.n	800554e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e006      	b.n	800555c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b20      	cmp	r3, #32
 8005558:	d0f1      	beq.n	800553e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr
 8005568:	00030d40 	.word	0x00030d40

0800556c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005574:	2300      	movs	r3, #0
 8005576:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	3301      	adds	r3, #1
 800557c:	60fb      	str	r3, [r7, #12]
 800557e:	4a11      	ldr	r2, [pc, #68]	; (80055c4 <USB_FlushRxFifo+0x58>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d901      	bls.n	8005588 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e017      	b.n	80055b8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	2b00      	cmp	r3, #0
 800558e:	daf3      	bge.n	8005578 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005590:	2300      	movs	r3, #0
 8005592:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2210      	movs	r2, #16
 8005598:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	3301      	adds	r3, #1
 800559e:	60fb      	str	r3, [r7, #12]
 80055a0:	4a08      	ldr	r2, [pc, #32]	; (80055c4 <USB_FlushRxFifo+0x58>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d901      	bls.n	80055aa <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e006      	b.n	80055b8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	f003 0310 	and.w	r3, r3, #16
 80055b2:	2b10      	cmp	r3, #16
 80055b4:	d0f1      	beq.n	800559a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	00030d40 	.word	0x00030d40

080055c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	460b      	mov	r3, r1
 80055d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	78fb      	ldrb	r3, [r7, #3]
 80055e2:	68f9      	ldr	r1, [r7, #12]
 80055e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055e8:	4313      	orrs	r3, r2
 80055ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b085      	sub	sp, #20
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005614:	f023 0303 	bic.w	r3, r3, #3
 8005618:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005628:	f043 0302 	orr.w	r3, r3, #2
 800562c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3714      	adds	r7, #20
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	f003 0301 	and.w	r3, r3, #1
}
 800564c:	4618      	mov	r0, r3
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005660:	2300      	movs	r3, #0
 8005662:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	3301      	adds	r3, #1
 8005668:	60fb      	str	r3, [r7, #12]
 800566a:	4a13      	ldr	r2, [pc, #76]	; (80056b8 <USB_CoreReset+0x60>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d901      	bls.n	8005674 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e01a      	b.n	80056aa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	2b00      	cmp	r3, #0
 800567a:	daf3      	bge.n	8005664 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800567c:	2300      	movs	r3, #0
 800567e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	f043 0201 	orr.w	r2, r3, #1
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	3301      	adds	r3, #1
 8005690:	60fb      	str	r3, [r7, #12]
 8005692:	4a09      	ldr	r2, [pc, #36]	; (80056b8 <USB_CoreReset+0x60>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d901      	bls.n	800569c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e006      	b.n	80056aa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d0f1      	beq.n	800568c <USB_CoreReset+0x34>

  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	00030d40 	.word	0x00030d40

080056bc <__errno>:
 80056bc:	4b01      	ldr	r3, [pc, #4]	; (80056c4 <__errno+0x8>)
 80056be:	6818      	ldr	r0, [r3, #0]
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	20000010 	.word	0x20000010

080056c8 <__libc_init_array>:
 80056c8:	b570      	push	{r4, r5, r6, lr}
 80056ca:	4d0d      	ldr	r5, [pc, #52]	; (8005700 <__libc_init_array+0x38>)
 80056cc:	4c0d      	ldr	r4, [pc, #52]	; (8005704 <__libc_init_array+0x3c>)
 80056ce:	1b64      	subs	r4, r4, r5
 80056d0:	10a4      	asrs	r4, r4, #2
 80056d2:	2600      	movs	r6, #0
 80056d4:	42a6      	cmp	r6, r4
 80056d6:	d109      	bne.n	80056ec <__libc_init_array+0x24>
 80056d8:	4d0b      	ldr	r5, [pc, #44]	; (8005708 <__libc_init_array+0x40>)
 80056da:	4c0c      	ldr	r4, [pc, #48]	; (800570c <__libc_init_array+0x44>)
 80056dc:	f002 feca 	bl	8008474 <_init>
 80056e0:	1b64      	subs	r4, r4, r5
 80056e2:	10a4      	asrs	r4, r4, #2
 80056e4:	2600      	movs	r6, #0
 80056e6:	42a6      	cmp	r6, r4
 80056e8:	d105      	bne.n	80056f6 <__libc_init_array+0x2e>
 80056ea:	bd70      	pop	{r4, r5, r6, pc}
 80056ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80056f0:	4798      	blx	r3
 80056f2:	3601      	adds	r6, #1
 80056f4:	e7ee      	b.n	80056d4 <__libc_init_array+0xc>
 80056f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80056fa:	4798      	blx	r3
 80056fc:	3601      	adds	r6, #1
 80056fe:	e7f2      	b.n	80056e6 <__libc_init_array+0x1e>
 8005700:	080088cc 	.word	0x080088cc
 8005704:	080088cc 	.word	0x080088cc
 8005708:	080088cc 	.word	0x080088cc
 800570c:	080088d0 	.word	0x080088d0

08005710 <memset>:
 8005710:	4402      	add	r2, r0
 8005712:	4603      	mov	r3, r0
 8005714:	4293      	cmp	r3, r2
 8005716:	d100      	bne.n	800571a <memset+0xa>
 8005718:	4770      	bx	lr
 800571a:	f803 1b01 	strb.w	r1, [r3], #1
 800571e:	e7f9      	b.n	8005714 <memset+0x4>

08005720 <__cvt>:
 8005720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005724:	ec55 4b10 	vmov	r4, r5, d0
 8005728:	2d00      	cmp	r5, #0
 800572a:	460e      	mov	r6, r1
 800572c:	4619      	mov	r1, r3
 800572e:	462b      	mov	r3, r5
 8005730:	bfbb      	ittet	lt
 8005732:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005736:	461d      	movlt	r5, r3
 8005738:	2300      	movge	r3, #0
 800573a:	232d      	movlt	r3, #45	; 0x2d
 800573c:	700b      	strb	r3, [r1, #0]
 800573e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005740:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005744:	4691      	mov	r9, r2
 8005746:	f023 0820 	bic.w	r8, r3, #32
 800574a:	bfbc      	itt	lt
 800574c:	4622      	movlt	r2, r4
 800574e:	4614      	movlt	r4, r2
 8005750:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005754:	d005      	beq.n	8005762 <__cvt+0x42>
 8005756:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800575a:	d100      	bne.n	800575e <__cvt+0x3e>
 800575c:	3601      	adds	r6, #1
 800575e:	2102      	movs	r1, #2
 8005760:	e000      	b.n	8005764 <__cvt+0x44>
 8005762:	2103      	movs	r1, #3
 8005764:	ab03      	add	r3, sp, #12
 8005766:	9301      	str	r3, [sp, #4]
 8005768:	ab02      	add	r3, sp, #8
 800576a:	9300      	str	r3, [sp, #0]
 800576c:	ec45 4b10 	vmov	d0, r4, r5
 8005770:	4653      	mov	r3, sl
 8005772:	4632      	mov	r2, r6
 8005774:	f000 fd00 	bl	8006178 <_dtoa_r>
 8005778:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800577c:	4607      	mov	r7, r0
 800577e:	d102      	bne.n	8005786 <__cvt+0x66>
 8005780:	f019 0f01 	tst.w	r9, #1
 8005784:	d022      	beq.n	80057cc <__cvt+0xac>
 8005786:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800578a:	eb07 0906 	add.w	r9, r7, r6
 800578e:	d110      	bne.n	80057b2 <__cvt+0x92>
 8005790:	783b      	ldrb	r3, [r7, #0]
 8005792:	2b30      	cmp	r3, #48	; 0x30
 8005794:	d10a      	bne.n	80057ac <__cvt+0x8c>
 8005796:	2200      	movs	r2, #0
 8005798:	2300      	movs	r3, #0
 800579a:	4620      	mov	r0, r4
 800579c:	4629      	mov	r1, r5
 800579e:	f7fb f9b3 	bl	8000b08 <__aeabi_dcmpeq>
 80057a2:	b918      	cbnz	r0, 80057ac <__cvt+0x8c>
 80057a4:	f1c6 0601 	rsb	r6, r6, #1
 80057a8:	f8ca 6000 	str.w	r6, [sl]
 80057ac:	f8da 3000 	ldr.w	r3, [sl]
 80057b0:	4499      	add	r9, r3
 80057b2:	2200      	movs	r2, #0
 80057b4:	2300      	movs	r3, #0
 80057b6:	4620      	mov	r0, r4
 80057b8:	4629      	mov	r1, r5
 80057ba:	f7fb f9a5 	bl	8000b08 <__aeabi_dcmpeq>
 80057be:	b108      	cbz	r0, 80057c4 <__cvt+0xa4>
 80057c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80057c4:	2230      	movs	r2, #48	; 0x30
 80057c6:	9b03      	ldr	r3, [sp, #12]
 80057c8:	454b      	cmp	r3, r9
 80057ca:	d307      	bcc.n	80057dc <__cvt+0xbc>
 80057cc:	9b03      	ldr	r3, [sp, #12]
 80057ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80057d0:	1bdb      	subs	r3, r3, r7
 80057d2:	4638      	mov	r0, r7
 80057d4:	6013      	str	r3, [r2, #0]
 80057d6:	b004      	add	sp, #16
 80057d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057dc:	1c59      	adds	r1, r3, #1
 80057de:	9103      	str	r1, [sp, #12]
 80057e0:	701a      	strb	r2, [r3, #0]
 80057e2:	e7f0      	b.n	80057c6 <__cvt+0xa6>

080057e4 <__exponent>:
 80057e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057e6:	4603      	mov	r3, r0
 80057e8:	2900      	cmp	r1, #0
 80057ea:	bfb8      	it	lt
 80057ec:	4249      	neglt	r1, r1
 80057ee:	f803 2b02 	strb.w	r2, [r3], #2
 80057f2:	bfb4      	ite	lt
 80057f4:	222d      	movlt	r2, #45	; 0x2d
 80057f6:	222b      	movge	r2, #43	; 0x2b
 80057f8:	2909      	cmp	r1, #9
 80057fa:	7042      	strb	r2, [r0, #1]
 80057fc:	dd2a      	ble.n	8005854 <__exponent+0x70>
 80057fe:	f10d 0407 	add.w	r4, sp, #7
 8005802:	46a4      	mov	ip, r4
 8005804:	270a      	movs	r7, #10
 8005806:	46a6      	mov	lr, r4
 8005808:	460a      	mov	r2, r1
 800580a:	fb91 f6f7 	sdiv	r6, r1, r7
 800580e:	fb07 1516 	mls	r5, r7, r6, r1
 8005812:	3530      	adds	r5, #48	; 0x30
 8005814:	2a63      	cmp	r2, #99	; 0x63
 8005816:	f104 34ff 	add.w	r4, r4, #4294967295
 800581a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800581e:	4631      	mov	r1, r6
 8005820:	dcf1      	bgt.n	8005806 <__exponent+0x22>
 8005822:	3130      	adds	r1, #48	; 0x30
 8005824:	f1ae 0502 	sub.w	r5, lr, #2
 8005828:	f804 1c01 	strb.w	r1, [r4, #-1]
 800582c:	1c44      	adds	r4, r0, #1
 800582e:	4629      	mov	r1, r5
 8005830:	4561      	cmp	r1, ip
 8005832:	d30a      	bcc.n	800584a <__exponent+0x66>
 8005834:	f10d 0209 	add.w	r2, sp, #9
 8005838:	eba2 020e 	sub.w	r2, r2, lr
 800583c:	4565      	cmp	r5, ip
 800583e:	bf88      	it	hi
 8005840:	2200      	movhi	r2, #0
 8005842:	4413      	add	r3, r2
 8005844:	1a18      	subs	r0, r3, r0
 8005846:	b003      	add	sp, #12
 8005848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800584a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800584e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005852:	e7ed      	b.n	8005830 <__exponent+0x4c>
 8005854:	2330      	movs	r3, #48	; 0x30
 8005856:	3130      	adds	r1, #48	; 0x30
 8005858:	7083      	strb	r3, [r0, #2]
 800585a:	70c1      	strb	r1, [r0, #3]
 800585c:	1d03      	adds	r3, r0, #4
 800585e:	e7f1      	b.n	8005844 <__exponent+0x60>

08005860 <_printf_float>:
 8005860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005864:	ed2d 8b02 	vpush	{d8}
 8005868:	b08d      	sub	sp, #52	; 0x34
 800586a:	460c      	mov	r4, r1
 800586c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005870:	4616      	mov	r6, r2
 8005872:	461f      	mov	r7, r3
 8005874:	4605      	mov	r5, r0
 8005876:	f001 fa6b 	bl	8006d50 <_localeconv_r>
 800587a:	f8d0 a000 	ldr.w	sl, [r0]
 800587e:	4650      	mov	r0, sl
 8005880:	f7fa fcc6 	bl	8000210 <strlen>
 8005884:	2300      	movs	r3, #0
 8005886:	930a      	str	r3, [sp, #40]	; 0x28
 8005888:	6823      	ldr	r3, [r4, #0]
 800588a:	9305      	str	r3, [sp, #20]
 800588c:	f8d8 3000 	ldr.w	r3, [r8]
 8005890:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005894:	3307      	adds	r3, #7
 8005896:	f023 0307 	bic.w	r3, r3, #7
 800589a:	f103 0208 	add.w	r2, r3, #8
 800589e:	f8c8 2000 	str.w	r2, [r8]
 80058a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80058aa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80058ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80058b2:	9307      	str	r3, [sp, #28]
 80058b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80058b8:	ee08 0a10 	vmov	s16, r0
 80058bc:	4b9f      	ldr	r3, [pc, #636]	; (8005b3c <_printf_float+0x2dc>)
 80058be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058c2:	f04f 32ff 	mov.w	r2, #4294967295
 80058c6:	f7fb f951 	bl	8000b6c <__aeabi_dcmpun>
 80058ca:	bb88      	cbnz	r0, 8005930 <_printf_float+0xd0>
 80058cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058d0:	4b9a      	ldr	r3, [pc, #616]	; (8005b3c <_printf_float+0x2dc>)
 80058d2:	f04f 32ff 	mov.w	r2, #4294967295
 80058d6:	f7fb f92b 	bl	8000b30 <__aeabi_dcmple>
 80058da:	bb48      	cbnz	r0, 8005930 <_printf_float+0xd0>
 80058dc:	2200      	movs	r2, #0
 80058de:	2300      	movs	r3, #0
 80058e0:	4640      	mov	r0, r8
 80058e2:	4649      	mov	r1, r9
 80058e4:	f7fb f91a 	bl	8000b1c <__aeabi_dcmplt>
 80058e8:	b110      	cbz	r0, 80058f0 <_printf_float+0x90>
 80058ea:	232d      	movs	r3, #45	; 0x2d
 80058ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058f0:	4b93      	ldr	r3, [pc, #588]	; (8005b40 <_printf_float+0x2e0>)
 80058f2:	4894      	ldr	r0, [pc, #592]	; (8005b44 <_printf_float+0x2e4>)
 80058f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80058f8:	bf94      	ite	ls
 80058fa:	4698      	movls	r8, r3
 80058fc:	4680      	movhi	r8, r0
 80058fe:	2303      	movs	r3, #3
 8005900:	6123      	str	r3, [r4, #16]
 8005902:	9b05      	ldr	r3, [sp, #20]
 8005904:	f023 0204 	bic.w	r2, r3, #4
 8005908:	6022      	str	r2, [r4, #0]
 800590a:	f04f 0900 	mov.w	r9, #0
 800590e:	9700      	str	r7, [sp, #0]
 8005910:	4633      	mov	r3, r6
 8005912:	aa0b      	add	r2, sp, #44	; 0x2c
 8005914:	4621      	mov	r1, r4
 8005916:	4628      	mov	r0, r5
 8005918:	f000 f9d8 	bl	8005ccc <_printf_common>
 800591c:	3001      	adds	r0, #1
 800591e:	f040 8090 	bne.w	8005a42 <_printf_float+0x1e2>
 8005922:	f04f 30ff 	mov.w	r0, #4294967295
 8005926:	b00d      	add	sp, #52	; 0x34
 8005928:	ecbd 8b02 	vpop	{d8}
 800592c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005930:	4642      	mov	r2, r8
 8005932:	464b      	mov	r3, r9
 8005934:	4640      	mov	r0, r8
 8005936:	4649      	mov	r1, r9
 8005938:	f7fb f918 	bl	8000b6c <__aeabi_dcmpun>
 800593c:	b140      	cbz	r0, 8005950 <_printf_float+0xf0>
 800593e:	464b      	mov	r3, r9
 8005940:	2b00      	cmp	r3, #0
 8005942:	bfbc      	itt	lt
 8005944:	232d      	movlt	r3, #45	; 0x2d
 8005946:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800594a:	487f      	ldr	r0, [pc, #508]	; (8005b48 <_printf_float+0x2e8>)
 800594c:	4b7f      	ldr	r3, [pc, #508]	; (8005b4c <_printf_float+0x2ec>)
 800594e:	e7d1      	b.n	80058f4 <_printf_float+0x94>
 8005950:	6863      	ldr	r3, [r4, #4]
 8005952:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005956:	9206      	str	r2, [sp, #24]
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	d13f      	bne.n	80059dc <_printf_float+0x17c>
 800595c:	2306      	movs	r3, #6
 800595e:	6063      	str	r3, [r4, #4]
 8005960:	9b05      	ldr	r3, [sp, #20]
 8005962:	6861      	ldr	r1, [r4, #4]
 8005964:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005968:	2300      	movs	r3, #0
 800596a:	9303      	str	r3, [sp, #12]
 800596c:	ab0a      	add	r3, sp, #40	; 0x28
 800596e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005972:	ab09      	add	r3, sp, #36	; 0x24
 8005974:	ec49 8b10 	vmov	d0, r8, r9
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	6022      	str	r2, [r4, #0]
 800597c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005980:	4628      	mov	r0, r5
 8005982:	f7ff fecd 	bl	8005720 <__cvt>
 8005986:	9b06      	ldr	r3, [sp, #24]
 8005988:	9909      	ldr	r1, [sp, #36]	; 0x24
 800598a:	2b47      	cmp	r3, #71	; 0x47
 800598c:	4680      	mov	r8, r0
 800598e:	d108      	bne.n	80059a2 <_printf_float+0x142>
 8005990:	1cc8      	adds	r0, r1, #3
 8005992:	db02      	blt.n	800599a <_printf_float+0x13a>
 8005994:	6863      	ldr	r3, [r4, #4]
 8005996:	4299      	cmp	r1, r3
 8005998:	dd41      	ble.n	8005a1e <_printf_float+0x1be>
 800599a:	f1ab 0b02 	sub.w	fp, fp, #2
 800599e:	fa5f fb8b 	uxtb.w	fp, fp
 80059a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80059a6:	d820      	bhi.n	80059ea <_printf_float+0x18a>
 80059a8:	3901      	subs	r1, #1
 80059aa:	465a      	mov	r2, fp
 80059ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80059b0:	9109      	str	r1, [sp, #36]	; 0x24
 80059b2:	f7ff ff17 	bl	80057e4 <__exponent>
 80059b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059b8:	1813      	adds	r3, r2, r0
 80059ba:	2a01      	cmp	r2, #1
 80059bc:	4681      	mov	r9, r0
 80059be:	6123      	str	r3, [r4, #16]
 80059c0:	dc02      	bgt.n	80059c8 <_printf_float+0x168>
 80059c2:	6822      	ldr	r2, [r4, #0]
 80059c4:	07d2      	lsls	r2, r2, #31
 80059c6:	d501      	bpl.n	80059cc <_printf_float+0x16c>
 80059c8:	3301      	adds	r3, #1
 80059ca:	6123      	str	r3, [r4, #16]
 80059cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d09c      	beq.n	800590e <_printf_float+0xae>
 80059d4:	232d      	movs	r3, #45	; 0x2d
 80059d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059da:	e798      	b.n	800590e <_printf_float+0xae>
 80059dc:	9a06      	ldr	r2, [sp, #24]
 80059de:	2a47      	cmp	r2, #71	; 0x47
 80059e0:	d1be      	bne.n	8005960 <_printf_float+0x100>
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1bc      	bne.n	8005960 <_printf_float+0x100>
 80059e6:	2301      	movs	r3, #1
 80059e8:	e7b9      	b.n	800595e <_printf_float+0xfe>
 80059ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80059ee:	d118      	bne.n	8005a22 <_printf_float+0x1c2>
 80059f0:	2900      	cmp	r1, #0
 80059f2:	6863      	ldr	r3, [r4, #4]
 80059f4:	dd0b      	ble.n	8005a0e <_printf_float+0x1ae>
 80059f6:	6121      	str	r1, [r4, #16]
 80059f8:	b913      	cbnz	r3, 8005a00 <_printf_float+0x1a0>
 80059fa:	6822      	ldr	r2, [r4, #0]
 80059fc:	07d0      	lsls	r0, r2, #31
 80059fe:	d502      	bpl.n	8005a06 <_printf_float+0x1a6>
 8005a00:	3301      	adds	r3, #1
 8005a02:	440b      	add	r3, r1
 8005a04:	6123      	str	r3, [r4, #16]
 8005a06:	65a1      	str	r1, [r4, #88]	; 0x58
 8005a08:	f04f 0900 	mov.w	r9, #0
 8005a0c:	e7de      	b.n	80059cc <_printf_float+0x16c>
 8005a0e:	b913      	cbnz	r3, 8005a16 <_printf_float+0x1b6>
 8005a10:	6822      	ldr	r2, [r4, #0]
 8005a12:	07d2      	lsls	r2, r2, #31
 8005a14:	d501      	bpl.n	8005a1a <_printf_float+0x1ba>
 8005a16:	3302      	adds	r3, #2
 8005a18:	e7f4      	b.n	8005a04 <_printf_float+0x1a4>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e7f2      	b.n	8005a04 <_printf_float+0x1a4>
 8005a1e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a24:	4299      	cmp	r1, r3
 8005a26:	db05      	blt.n	8005a34 <_printf_float+0x1d4>
 8005a28:	6823      	ldr	r3, [r4, #0]
 8005a2a:	6121      	str	r1, [r4, #16]
 8005a2c:	07d8      	lsls	r0, r3, #31
 8005a2e:	d5ea      	bpl.n	8005a06 <_printf_float+0x1a6>
 8005a30:	1c4b      	adds	r3, r1, #1
 8005a32:	e7e7      	b.n	8005a04 <_printf_float+0x1a4>
 8005a34:	2900      	cmp	r1, #0
 8005a36:	bfd4      	ite	le
 8005a38:	f1c1 0202 	rsble	r2, r1, #2
 8005a3c:	2201      	movgt	r2, #1
 8005a3e:	4413      	add	r3, r2
 8005a40:	e7e0      	b.n	8005a04 <_printf_float+0x1a4>
 8005a42:	6823      	ldr	r3, [r4, #0]
 8005a44:	055a      	lsls	r2, r3, #21
 8005a46:	d407      	bmi.n	8005a58 <_printf_float+0x1f8>
 8005a48:	6923      	ldr	r3, [r4, #16]
 8005a4a:	4642      	mov	r2, r8
 8005a4c:	4631      	mov	r1, r6
 8005a4e:	4628      	mov	r0, r5
 8005a50:	47b8      	blx	r7
 8005a52:	3001      	adds	r0, #1
 8005a54:	d12c      	bne.n	8005ab0 <_printf_float+0x250>
 8005a56:	e764      	b.n	8005922 <_printf_float+0xc2>
 8005a58:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a5c:	f240 80e0 	bls.w	8005c20 <_printf_float+0x3c0>
 8005a60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a64:	2200      	movs	r2, #0
 8005a66:	2300      	movs	r3, #0
 8005a68:	f7fb f84e 	bl	8000b08 <__aeabi_dcmpeq>
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	d034      	beq.n	8005ada <_printf_float+0x27a>
 8005a70:	4a37      	ldr	r2, [pc, #220]	; (8005b50 <_printf_float+0x2f0>)
 8005a72:	2301      	movs	r3, #1
 8005a74:	4631      	mov	r1, r6
 8005a76:	4628      	mov	r0, r5
 8005a78:	47b8      	blx	r7
 8005a7a:	3001      	adds	r0, #1
 8005a7c:	f43f af51 	beq.w	8005922 <_printf_float+0xc2>
 8005a80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a84:	429a      	cmp	r2, r3
 8005a86:	db02      	blt.n	8005a8e <_printf_float+0x22e>
 8005a88:	6823      	ldr	r3, [r4, #0]
 8005a8a:	07d8      	lsls	r0, r3, #31
 8005a8c:	d510      	bpl.n	8005ab0 <_printf_float+0x250>
 8005a8e:	ee18 3a10 	vmov	r3, s16
 8005a92:	4652      	mov	r2, sl
 8005a94:	4631      	mov	r1, r6
 8005a96:	4628      	mov	r0, r5
 8005a98:	47b8      	blx	r7
 8005a9a:	3001      	adds	r0, #1
 8005a9c:	f43f af41 	beq.w	8005922 <_printf_float+0xc2>
 8005aa0:	f04f 0800 	mov.w	r8, #0
 8005aa4:	f104 091a 	add.w	r9, r4, #26
 8005aa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	4543      	cmp	r3, r8
 8005aae:	dc09      	bgt.n	8005ac4 <_printf_float+0x264>
 8005ab0:	6823      	ldr	r3, [r4, #0]
 8005ab2:	079b      	lsls	r3, r3, #30
 8005ab4:	f100 8105 	bmi.w	8005cc2 <_printf_float+0x462>
 8005ab8:	68e0      	ldr	r0, [r4, #12]
 8005aba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005abc:	4298      	cmp	r0, r3
 8005abe:	bfb8      	it	lt
 8005ac0:	4618      	movlt	r0, r3
 8005ac2:	e730      	b.n	8005926 <_printf_float+0xc6>
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	464a      	mov	r2, r9
 8005ac8:	4631      	mov	r1, r6
 8005aca:	4628      	mov	r0, r5
 8005acc:	47b8      	blx	r7
 8005ace:	3001      	adds	r0, #1
 8005ad0:	f43f af27 	beq.w	8005922 <_printf_float+0xc2>
 8005ad4:	f108 0801 	add.w	r8, r8, #1
 8005ad8:	e7e6      	b.n	8005aa8 <_printf_float+0x248>
 8005ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	dc39      	bgt.n	8005b54 <_printf_float+0x2f4>
 8005ae0:	4a1b      	ldr	r2, [pc, #108]	; (8005b50 <_printf_float+0x2f0>)
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	4631      	mov	r1, r6
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	47b8      	blx	r7
 8005aea:	3001      	adds	r0, #1
 8005aec:	f43f af19 	beq.w	8005922 <_printf_float+0xc2>
 8005af0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005af4:	4313      	orrs	r3, r2
 8005af6:	d102      	bne.n	8005afe <_printf_float+0x29e>
 8005af8:	6823      	ldr	r3, [r4, #0]
 8005afa:	07d9      	lsls	r1, r3, #31
 8005afc:	d5d8      	bpl.n	8005ab0 <_printf_float+0x250>
 8005afe:	ee18 3a10 	vmov	r3, s16
 8005b02:	4652      	mov	r2, sl
 8005b04:	4631      	mov	r1, r6
 8005b06:	4628      	mov	r0, r5
 8005b08:	47b8      	blx	r7
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	f43f af09 	beq.w	8005922 <_printf_float+0xc2>
 8005b10:	f04f 0900 	mov.w	r9, #0
 8005b14:	f104 0a1a 	add.w	sl, r4, #26
 8005b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b1a:	425b      	negs	r3, r3
 8005b1c:	454b      	cmp	r3, r9
 8005b1e:	dc01      	bgt.n	8005b24 <_printf_float+0x2c4>
 8005b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b22:	e792      	b.n	8005a4a <_printf_float+0x1ea>
 8005b24:	2301      	movs	r3, #1
 8005b26:	4652      	mov	r2, sl
 8005b28:	4631      	mov	r1, r6
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	47b8      	blx	r7
 8005b2e:	3001      	adds	r0, #1
 8005b30:	f43f aef7 	beq.w	8005922 <_printf_float+0xc2>
 8005b34:	f109 0901 	add.w	r9, r9, #1
 8005b38:	e7ee      	b.n	8005b18 <_printf_float+0x2b8>
 8005b3a:	bf00      	nop
 8005b3c:	7fefffff 	.word	0x7fefffff
 8005b40:	080084e4 	.word	0x080084e4
 8005b44:	080084e8 	.word	0x080084e8
 8005b48:	080084f0 	.word	0x080084f0
 8005b4c:	080084ec 	.word	0x080084ec
 8005b50:	080084f4 	.word	0x080084f4
 8005b54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	bfa8      	it	ge
 8005b5c:	461a      	movge	r2, r3
 8005b5e:	2a00      	cmp	r2, #0
 8005b60:	4691      	mov	r9, r2
 8005b62:	dc37      	bgt.n	8005bd4 <_printf_float+0x374>
 8005b64:	f04f 0b00 	mov.w	fp, #0
 8005b68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b6c:	f104 021a 	add.w	r2, r4, #26
 8005b70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b72:	9305      	str	r3, [sp, #20]
 8005b74:	eba3 0309 	sub.w	r3, r3, r9
 8005b78:	455b      	cmp	r3, fp
 8005b7a:	dc33      	bgt.n	8005be4 <_printf_float+0x384>
 8005b7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b80:	429a      	cmp	r2, r3
 8005b82:	db3b      	blt.n	8005bfc <_printf_float+0x39c>
 8005b84:	6823      	ldr	r3, [r4, #0]
 8005b86:	07da      	lsls	r2, r3, #31
 8005b88:	d438      	bmi.n	8005bfc <_printf_float+0x39c>
 8005b8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b8c:	9b05      	ldr	r3, [sp, #20]
 8005b8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	eba2 0901 	sub.w	r9, r2, r1
 8005b96:	4599      	cmp	r9, r3
 8005b98:	bfa8      	it	ge
 8005b9a:	4699      	movge	r9, r3
 8005b9c:	f1b9 0f00 	cmp.w	r9, #0
 8005ba0:	dc35      	bgt.n	8005c0e <_printf_float+0x3ae>
 8005ba2:	f04f 0800 	mov.w	r8, #0
 8005ba6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005baa:	f104 0a1a 	add.w	sl, r4, #26
 8005bae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bb2:	1a9b      	subs	r3, r3, r2
 8005bb4:	eba3 0309 	sub.w	r3, r3, r9
 8005bb8:	4543      	cmp	r3, r8
 8005bba:	f77f af79 	ble.w	8005ab0 <_printf_float+0x250>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	4652      	mov	r2, sl
 8005bc2:	4631      	mov	r1, r6
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	47b8      	blx	r7
 8005bc8:	3001      	adds	r0, #1
 8005bca:	f43f aeaa 	beq.w	8005922 <_printf_float+0xc2>
 8005bce:	f108 0801 	add.w	r8, r8, #1
 8005bd2:	e7ec      	b.n	8005bae <_printf_float+0x34e>
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	4631      	mov	r1, r6
 8005bd8:	4642      	mov	r2, r8
 8005bda:	4628      	mov	r0, r5
 8005bdc:	47b8      	blx	r7
 8005bde:	3001      	adds	r0, #1
 8005be0:	d1c0      	bne.n	8005b64 <_printf_float+0x304>
 8005be2:	e69e      	b.n	8005922 <_printf_float+0xc2>
 8005be4:	2301      	movs	r3, #1
 8005be6:	4631      	mov	r1, r6
 8005be8:	4628      	mov	r0, r5
 8005bea:	9205      	str	r2, [sp, #20]
 8005bec:	47b8      	blx	r7
 8005bee:	3001      	adds	r0, #1
 8005bf0:	f43f ae97 	beq.w	8005922 <_printf_float+0xc2>
 8005bf4:	9a05      	ldr	r2, [sp, #20]
 8005bf6:	f10b 0b01 	add.w	fp, fp, #1
 8005bfa:	e7b9      	b.n	8005b70 <_printf_float+0x310>
 8005bfc:	ee18 3a10 	vmov	r3, s16
 8005c00:	4652      	mov	r2, sl
 8005c02:	4631      	mov	r1, r6
 8005c04:	4628      	mov	r0, r5
 8005c06:	47b8      	blx	r7
 8005c08:	3001      	adds	r0, #1
 8005c0a:	d1be      	bne.n	8005b8a <_printf_float+0x32a>
 8005c0c:	e689      	b.n	8005922 <_printf_float+0xc2>
 8005c0e:	9a05      	ldr	r2, [sp, #20]
 8005c10:	464b      	mov	r3, r9
 8005c12:	4442      	add	r2, r8
 8005c14:	4631      	mov	r1, r6
 8005c16:	4628      	mov	r0, r5
 8005c18:	47b8      	blx	r7
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	d1c1      	bne.n	8005ba2 <_printf_float+0x342>
 8005c1e:	e680      	b.n	8005922 <_printf_float+0xc2>
 8005c20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c22:	2a01      	cmp	r2, #1
 8005c24:	dc01      	bgt.n	8005c2a <_printf_float+0x3ca>
 8005c26:	07db      	lsls	r3, r3, #31
 8005c28:	d538      	bpl.n	8005c9c <_printf_float+0x43c>
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	4642      	mov	r2, r8
 8005c2e:	4631      	mov	r1, r6
 8005c30:	4628      	mov	r0, r5
 8005c32:	47b8      	blx	r7
 8005c34:	3001      	adds	r0, #1
 8005c36:	f43f ae74 	beq.w	8005922 <_printf_float+0xc2>
 8005c3a:	ee18 3a10 	vmov	r3, s16
 8005c3e:	4652      	mov	r2, sl
 8005c40:	4631      	mov	r1, r6
 8005c42:	4628      	mov	r0, r5
 8005c44:	47b8      	blx	r7
 8005c46:	3001      	adds	r0, #1
 8005c48:	f43f ae6b 	beq.w	8005922 <_printf_float+0xc2>
 8005c4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c50:	2200      	movs	r2, #0
 8005c52:	2300      	movs	r3, #0
 8005c54:	f7fa ff58 	bl	8000b08 <__aeabi_dcmpeq>
 8005c58:	b9d8      	cbnz	r0, 8005c92 <_printf_float+0x432>
 8005c5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c5c:	f108 0201 	add.w	r2, r8, #1
 8005c60:	3b01      	subs	r3, #1
 8005c62:	4631      	mov	r1, r6
 8005c64:	4628      	mov	r0, r5
 8005c66:	47b8      	blx	r7
 8005c68:	3001      	adds	r0, #1
 8005c6a:	d10e      	bne.n	8005c8a <_printf_float+0x42a>
 8005c6c:	e659      	b.n	8005922 <_printf_float+0xc2>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	4652      	mov	r2, sl
 8005c72:	4631      	mov	r1, r6
 8005c74:	4628      	mov	r0, r5
 8005c76:	47b8      	blx	r7
 8005c78:	3001      	adds	r0, #1
 8005c7a:	f43f ae52 	beq.w	8005922 <_printf_float+0xc2>
 8005c7e:	f108 0801 	add.w	r8, r8, #1
 8005c82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c84:	3b01      	subs	r3, #1
 8005c86:	4543      	cmp	r3, r8
 8005c88:	dcf1      	bgt.n	8005c6e <_printf_float+0x40e>
 8005c8a:	464b      	mov	r3, r9
 8005c8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c90:	e6dc      	b.n	8005a4c <_printf_float+0x1ec>
 8005c92:	f04f 0800 	mov.w	r8, #0
 8005c96:	f104 0a1a 	add.w	sl, r4, #26
 8005c9a:	e7f2      	b.n	8005c82 <_printf_float+0x422>
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	4642      	mov	r2, r8
 8005ca0:	e7df      	b.n	8005c62 <_printf_float+0x402>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	464a      	mov	r2, r9
 8005ca6:	4631      	mov	r1, r6
 8005ca8:	4628      	mov	r0, r5
 8005caa:	47b8      	blx	r7
 8005cac:	3001      	adds	r0, #1
 8005cae:	f43f ae38 	beq.w	8005922 <_printf_float+0xc2>
 8005cb2:	f108 0801 	add.w	r8, r8, #1
 8005cb6:	68e3      	ldr	r3, [r4, #12]
 8005cb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005cba:	1a5b      	subs	r3, r3, r1
 8005cbc:	4543      	cmp	r3, r8
 8005cbe:	dcf0      	bgt.n	8005ca2 <_printf_float+0x442>
 8005cc0:	e6fa      	b.n	8005ab8 <_printf_float+0x258>
 8005cc2:	f04f 0800 	mov.w	r8, #0
 8005cc6:	f104 0919 	add.w	r9, r4, #25
 8005cca:	e7f4      	b.n	8005cb6 <_printf_float+0x456>

08005ccc <_printf_common>:
 8005ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cd0:	4616      	mov	r6, r2
 8005cd2:	4699      	mov	r9, r3
 8005cd4:	688a      	ldr	r2, [r1, #8]
 8005cd6:	690b      	ldr	r3, [r1, #16]
 8005cd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	bfb8      	it	lt
 8005ce0:	4613      	movlt	r3, r2
 8005ce2:	6033      	str	r3, [r6, #0]
 8005ce4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ce8:	4607      	mov	r7, r0
 8005cea:	460c      	mov	r4, r1
 8005cec:	b10a      	cbz	r2, 8005cf2 <_printf_common+0x26>
 8005cee:	3301      	adds	r3, #1
 8005cf0:	6033      	str	r3, [r6, #0]
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	0699      	lsls	r1, r3, #26
 8005cf6:	bf42      	ittt	mi
 8005cf8:	6833      	ldrmi	r3, [r6, #0]
 8005cfa:	3302      	addmi	r3, #2
 8005cfc:	6033      	strmi	r3, [r6, #0]
 8005cfe:	6825      	ldr	r5, [r4, #0]
 8005d00:	f015 0506 	ands.w	r5, r5, #6
 8005d04:	d106      	bne.n	8005d14 <_printf_common+0x48>
 8005d06:	f104 0a19 	add.w	sl, r4, #25
 8005d0a:	68e3      	ldr	r3, [r4, #12]
 8005d0c:	6832      	ldr	r2, [r6, #0]
 8005d0e:	1a9b      	subs	r3, r3, r2
 8005d10:	42ab      	cmp	r3, r5
 8005d12:	dc26      	bgt.n	8005d62 <_printf_common+0x96>
 8005d14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d18:	1e13      	subs	r3, r2, #0
 8005d1a:	6822      	ldr	r2, [r4, #0]
 8005d1c:	bf18      	it	ne
 8005d1e:	2301      	movne	r3, #1
 8005d20:	0692      	lsls	r2, r2, #26
 8005d22:	d42b      	bmi.n	8005d7c <_printf_common+0xb0>
 8005d24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d28:	4649      	mov	r1, r9
 8005d2a:	4638      	mov	r0, r7
 8005d2c:	47c0      	blx	r8
 8005d2e:	3001      	adds	r0, #1
 8005d30:	d01e      	beq.n	8005d70 <_printf_common+0xa4>
 8005d32:	6823      	ldr	r3, [r4, #0]
 8005d34:	68e5      	ldr	r5, [r4, #12]
 8005d36:	6832      	ldr	r2, [r6, #0]
 8005d38:	f003 0306 	and.w	r3, r3, #6
 8005d3c:	2b04      	cmp	r3, #4
 8005d3e:	bf08      	it	eq
 8005d40:	1aad      	subeq	r5, r5, r2
 8005d42:	68a3      	ldr	r3, [r4, #8]
 8005d44:	6922      	ldr	r2, [r4, #16]
 8005d46:	bf0c      	ite	eq
 8005d48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d4c:	2500      	movne	r5, #0
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	bfc4      	itt	gt
 8005d52:	1a9b      	subgt	r3, r3, r2
 8005d54:	18ed      	addgt	r5, r5, r3
 8005d56:	2600      	movs	r6, #0
 8005d58:	341a      	adds	r4, #26
 8005d5a:	42b5      	cmp	r5, r6
 8005d5c:	d11a      	bne.n	8005d94 <_printf_common+0xc8>
 8005d5e:	2000      	movs	r0, #0
 8005d60:	e008      	b.n	8005d74 <_printf_common+0xa8>
 8005d62:	2301      	movs	r3, #1
 8005d64:	4652      	mov	r2, sl
 8005d66:	4649      	mov	r1, r9
 8005d68:	4638      	mov	r0, r7
 8005d6a:	47c0      	blx	r8
 8005d6c:	3001      	adds	r0, #1
 8005d6e:	d103      	bne.n	8005d78 <_printf_common+0xac>
 8005d70:	f04f 30ff 	mov.w	r0, #4294967295
 8005d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d78:	3501      	adds	r5, #1
 8005d7a:	e7c6      	b.n	8005d0a <_printf_common+0x3e>
 8005d7c:	18e1      	adds	r1, r4, r3
 8005d7e:	1c5a      	adds	r2, r3, #1
 8005d80:	2030      	movs	r0, #48	; 0x30
 8005d82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d86:	4422      	add	r2, r4
 8005d88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d90:	3302      	adds	r3, #2
 8005d92:	e7c7      	b.n	8005d24 <_printf_common+0x58>
 8005d94:	2301      	movs	r3, #1
 8005d96:	4622      	mov	r2, r4
 8005d98:	4649      	mov	r1, r9
 8005d9a:	4638      	mov	r0, r7
 8005d9c:	47c0      	blx	r8
 8005d9e:	3001      	adds	r0, #1
 8005da0:	d0e6      	beq.n	8005d70 <_printf_common+0xa4>
 8005da2:	3601      	adds	r6, #1
 8005da4:	e7d9      	b.n	8005d5a <_printf_common+0x8e>
	...

08005da8 <_printf_i>:
 8005da8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dac:	460c      	mov	r4, r1
 8005dae:	4691      	mov	r9, r2
 8005db0:	7e27      	ldrb	r7, [r4, #24]
 8005db2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005db4:	2f78      	cmp	r7, #120	; 0x78
 8005db6:	4680      	mov	r8, r0
 8005db8:	469a      	mov	sl, r3
 8005dba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dbe:	d807      	bhi.n	8005dd0 <_printf_i+0x28>
 8005dc0:	2f62      	cmp	r7, #98	; 0x62
 8005dc2:	d80a      	bhi.n	8005dda <_printf_i+0x32>
 8005dc4:	2f00      	cmp	r7, #0
 8005dc6:	f000 80d8 	beq.w	8005f7a <_printf_i+0x1d2>
 8005dca:	2f58      	cmp	r7, #88	; 0x58
 8005dcc:	f000 80a3 	beq.w	8005f16 <_printf_i+0x16e>
 8005dd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005dd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005dd8:	e03a      	b.n	8005e50 <_printf_i+0xa8>
 8005dda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005dde:	2b15      	cmp	r3, #21
 8005de0:	d8f6      	bhi.n	8005dd0 <_printf_i+0x28>
 8005de2:	a001      	add	r0, pc, #4	; (adr r0, 8005de8 <_printf_i+0x40>)
 8005de4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005de8:	08005e41 	.word	0x08005e41
 8005dec:	08005e55 	.word	0x08005e55
 8005df0:	08005dd1 	.word	0x08005dd1
 8005df4:	08005dd1 	.word	0x08005dd1
 8005df8:	08005dd1 	.word	0x08005dd1
 8005dfc:	08005dd1 	.word	0x08005dd1
 8005e00:	08005e55 	.word	0x08005e55
 8005e04:	08005dd1 	.word	0x08005dd1
 8005e08:	08005dd1 	.word	0x08005dd1
 8005e0c:	08005dd1 	.word	0x08005dd1
 8005e10:	08005dd1 	.word	0x08005dd1
 8005e14:	08005f61 	.word	0x08005f61
 8005e18:	08005e85 	.word	0x08005e85
 8005e1c:	08005f43 	.word	0x08005f43
 8005e20:	08005dd1 	.word	0x08005dd1
 8005e24:	08005dd1 	.word	0x08005dd1
 8005e28:	08005f83 	.word	0x08005f83
 8005e2c:	08005dd1 	.word	0x08005dd1
 8005e30:	08005e85 	.word	0x08005e85
 8005e34:	08005dd1 	.word	0x08005dd1
 8005e38:	08005dd1 	.word	0x08005dd1
 8005e3c:	08005f4b 	.word	0x08005f4b
 8005e40:	680b      	ldr	r3, [r1, #0]
 8005e42:	1d1a      	adds	r2, r3, #4
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	600a      	str	r2, [r1, #0]
 8005e48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e50:	2301      	movs	r3, #1
 8005e52:	e0a3      	b.n	8005f9c <_printf_i+0x1f4>
 8005e54:	6825      	ldr	r5, [r4, #0]
 8005e56:	6808      	ldr	r0, [r1, #0]
 8005e58:	062e      	lsls	r6, r5, #24
 8005e5a:	f100 0304 	add.w	r3, r0, #4
 8005e5e:	d50a      	bpl.n	8005e76 <_printf_i+0xce>
 8005e60:	6805      	ldr	r5, [r0, #0]
 8005e62:	600b      	str	r3, [r1, #0]
 8005e64:	2d00      	cmp	r5, #0
 8005e66:	da03      	bge.n	8005e70 <_printf_i+0xc8>
 8005e68:	232d      	movs	r3, #45	; 0x2d
 8005e6a:	426d      	negs	r5, r5
 8005e6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e70:	485e      	ldr	r0, [pc, #376]	; (8005fec <_printf_i+0x244>)
 8005e72:	230a      	movs	r3, #10
 8005e74:	e019      	b.n	8005eaa <_printf_i+0x102>
 8005e76:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005e7a:	6805      	ldr	r5, [r0, #0]
 8005e7c:	600b      	str	r3, [r1, #0]
 8005e7e:	bf18      	it	ne
 8005e80:	b22d      	sxthne	r5, r5
 8005e82:	e7ef      	b.n	8005e64 <_printf_i+0xbc>
 8005e84:	680b      	ldr	r3, [r1, #0]
 8005e86:	6825      	ldr	r5, [r4, #0]
 8005e88:	1d18      	adds	r0, r3, #4
 8005e8a:	6008      	str	r0, [r1, #0]
 8005e8c:	0628      	lsls	r0, r5, #24
 8005e8e:	d501      	bpl.n	8005e94 <_printf_i+0xec>
 8005e90:	681d      	ldr	r5, [r3, #0]
 8005e92:	e002      	b.n	8005e9a <_printf_i+0xf2>
 8005e94:	0669      	lsls	r1, r5, #25
 8005e96:	d5fb      	bpl.n	8005e90 <_printf_i+0xe8>
 8005e98:	881d      	ldrh	r5, [r3, #0]
 8005e9a:	4854      	ldr	r0, [pc, #336]	; (8005fec <_printf_i+0x244>)
 8005e9c:	2f6f      	cmp	r7, #111	; 0x6f
 8005e9e:	bf0c      	ite	eq
 8005ea0:	2308      	moveq	r3, #8
 8005ea2:	230a      	movne	r3, #10
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005eaa:	6866      	ldr	r6, [r4, #4]
 8005eac:	60a6      	str	r6, [r4, #8]
 8005eae:	2e00      	cmp	r6, #0
 8005eb0:	bfa2      	ittt	ge
 8005eb2:	6821      	ldrge	r1, [r4, #0]
 8005eb4:	f021 0104 	bicge.w	r1, r1, #4
 8005eb8:	6021      	strge	r1, [r4, #0]
 8005eba:	b90d      	cbnz	r5, 8005ec0 <_printf_i+0x118>
 8005ebc:	2e00      	cmp	r6, #0
 8005ebe:	d04d      	beq.n	8005f5c <_printf_i+0x1b4>
 8005ec0:	4616      	mov	r6, r2
 8005ec2:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ec6:	fb03 5711 	mls	r7, r3, r1, r5
 8005eca:	5dc7      	ldrb	r7, [r0, r7]
 8005ecc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ed0:	462f      	mov	r7, r5
 8005ed2:	42bb      	cmp	r3, r7
 8005ed4:	460d      	mov	r5, r1
 8005ed6:	d9f4      	bls.n	8005ec2 <_printf_i+0x11a>
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d10b      	bne.n	8005ef4 <_printf_i+0x14c>
 8005edc:	6823      	ldr	r3, [r4, #0]
 8005ede:	07df      	lsls	r7, r3, #31
 8005ee0:	d508      	bpl.n	8005ef4 <_printf_i+0x14c>
 8005ee2:	6923      	ldr	r3, [r4, #16]
 8005ee4:	6861      	ldr	r1, [r4, #4]
 8005ee6:	4299      	cmp	r1, r3
 8005ee8:	bfde      	ittt	le
 8005eea:	2330      	movle	r3, #48	; 0x30
 8005eec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ef0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ef4:	1b92      	subs	r2, r2, r6
 8005ef6:	6122      	str	r2, [r4, #16]
 8005ef8:	f8cd a000 	str.w	sl, [sp]
 8005efc:	464b      	mov	r3, r9
 8005efe:	aa03      	add	r2, sp, #12
 8005f00:	4621      	mov	r1, r4
 8005f02:	4640      	mov	r0, r8
 8005f04:	f7ff fee2 	bl	8005ccc <_printf_common>
 8005f08:	3001      	adds	r0, #1
 8005f0a:	d14c      	bne.n	8005fa6 <_printf_i+0x1fe>
 8005f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f10:	b004      	add	sp, #16
 8005f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f16:	4835      	ldr	r0, [pc, #212]	; (8005fec <_printf_i+0x244>)
 8005f18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	680e      	ldr	r6, [r1, #0]
 8005f20:	061f      	lsls	r7, r3, #24
 8005f22:	f856 5b04 	ldr.w	r5, [r6], #4
 8005f26:	600e      	str	r6, [r1, #0]
 8005f28:	d514      	bpl.n	8005f54 <_printf_i+0x1ac>
 8005f2a:	07d9      	lsls	r1, r3, #31
 8005f2c:	bf44      	itt	mi
 8005f2e:	f043 0320 	orrmi.w	r3, r3, #32
 8005f32:	6023      	strmi	r3, [r4, #0]
 8005f34:	b91d      	cbnz	r5, 8005f3e <_printf_i+0x196>
 8005f36:	6823      	ldr	r3, [r4, #0]
 8005f38:	f023 0320 	bic.w	r3, r3, #32
 8005f3c:	6023      	str	r3, [r4, #0]
 8005f3e:	2310      	movs	r3, #16
 8005f40:	e7b0      	b.n	8005ea4 <_printf_i+0xfc>
 8005f42:	6823      	ldr	r3, [r4, #0]
 8005f44:	f043 0320 	orr.w	r3, r3, #32
 8005f48:	6023      	str	r3, [r4, #0]
 8005f4a:	2378      	movs	r3, #120	; 0x78
 8005f4c:	4828      	ldr	r0, [pc, #160]	; (8005ff0 <_printf_i+0x248>)
 8005f4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f52:	e7e3      	b.n	8005f1c <_printf_i+0x174>
 8005f54:	065e      	lsls	r6, r3, #25
 8005f56:	bf48      	it	mi
 8005f58:	b2ad      	uxthmi	r5, r5
 8005f5a:	e7e6      	b.n	8005f2a <_printf_i+0x182>
 8005f5c:	4616      	mov	r6, r2
 8005f5e:	e7bb      	b.n	8005ed8 <_printf_i+0x130>
 8005f60:	680b      	ldr	r3, [r1, #0]
 8005f62:	6826      	ldr	r6, [r4, #0]
 8005f64:	6960      	ldr	r0, [r4, #20]
 8005f66:	1d1d      	adds	r5, r3, #4
 8005f68:	600d      	str	r5, [r1, #0]
 8005f6a:	0635      	lsls	r5, r6, #24
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	d501      	bpl.n	8005f74 <_printf_i+0x1cc>
 8005f70:	6018      	str	r0, [r3, #0]
 8005f72:	e002      	b.n	8005f7a <_printf_i+0x1d2>
 8005f74:	0671      	lsls	r1, r6, #25
 8005f76:	d5fb      	bpl.n	8005f70 <_printf_i+0x1c8>
 8005f78:	8018      	strh	r0, [r3, #0]
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	6123      	str	r3, [r4, #16]
 8005f7e:	4616      	mov	r6, r2
 8005f80:	e7ba      	b.n	8005ef8 <_printf_i+0x150>
 8005f82:	680b      	ldr	r3, [r1, #0]
 8005f84:	1d1a      	adds	r2, r3, #4
 8005f86:	600a      	str	r2, [r1, #0]
 8005f88:	681e      	ldr	r6, [r3, #0]
 8005f8a:	6862      	ldr	r2, [r4, #4]
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	4630      	mov	r0, r6
 8005f90:	f7fa f946 	bl	8000220 <memchr>
 8005f94:	b108      	cbz	r0, 8005f9a <_printf_i+0x1f2>
 8005f96:	1b80      	subs	r0, r0, r6
 8005f98:	6060      	str	r0, [r4, #4]
 8005f9a:	6863      	ldr	r3, [r4, #4]
 8005f9c:	6123      	str	r3, [r4, #16]
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fa4:	e7a8      	b.n	8005ef8 <_printf_i+0x150>
 8005fa6:	6923      	ldr	r3, [r4, #16]
 8005fa8:	4632      	mov	r2, r6
 8005faa:	4649      	mov	r1, r9
 8005fac:	4640      	mov	r0, r8
 8005fae:	47d0      	blx	sl
 8005fb0:	3001      	adds	r0, #1
 8005fb2:	d0ab      	beq.n	8005f0c <_printf_i+0x164>
 8005fb4:	6823      	ldr	r3, [r4, #0]
 8005fb6:	079b      	lsls	r3, r3, #30
 8005fb8:	d413      	bmi.n	8005fe2 <_printf_i+0x23a>
 8005fba:	68e0      	ldr	r0, [r4, #12]
 8005fbc:	9b03      	ldr	r3, [sp, #12]
 8005fbe:	4298      	cmp	r0, r3
 8005fc0:	bfb8      	it	lt
 8005fc2:	4618      	movlt	r0, r3
 8005fc4:	e7a4      	b.n	8005f10 <_printf_i+0x168>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	4632      	mov	r2, r6
 8005fca:	4649      	mov	r1, r9
 8005fcc:	4640      	mov	r0, r8
 8005fce:	47d0      	blx	sl
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	d09b      	beq.n	8005f0c <_printf_i+0x164>
 8005fd4:	3501      	adds	r5, #1
 8005fd6:	68e3      	ldr	r3, [r4, #12]
 8005fd8:	9903      	ldr	r1, [sp, #12]
 8005fda:	1a5b      	subs	r3, r3, r1
 8005fdc:	42ab      	cmp	r3, r5
 8005fde:	dcf2      	bgt.n	8005fc6 <_printf_i+0x21e>
 8005fe0:	e7eb      	b.n	8005fba <_printf_i+0x212>
 8005fe2:	2500      	movs	r5, #0
 8005fe4:	f104 0619 	add.w	r6, r4, #25
 8005fe8:	e7f5      	b.n	8005fd6 <_printf_i+0x22e>
 8005fea:	bf00      	nop
 8005fec:	080084f6 	.word	0x080084f6
 8005ff0:	08008507 	.word	0x08008507

08005ff4 <sniprintf>:
 8005ff4:	b40c      	push	{r2, r3}
 8005ff6:	b530      	push	{r4, r5, lr}
 8005ff8:	4b17      	ldr	r3, [pc, #92]	; (8006058 <sniprintf+0x64>)
 8005ffa:	1e0c      	subs	r4, r1, #0
 8005ffc:	681d      	ldr	r5, [r3, #0]
 8005ffe:	b09d      	sub	sp, #116	; 0x74
 8006000:	da08      	bge.n	8006014 <sniprintf+0x20>
 8006002:	238b      	movs	r3, #139	; 0x8b
 8006004:	602b      	str	r3, [r5, #0]
 8006006:	f04f 30ff 	mov.w	r0, #4294967295
 800600a:	b01d      	add	sp, #116	; 0x74
 800600c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006010:	b002      	add	sp, #8
 8006012:	4770      	bx	lr
 8006014:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006018:	f8ad 3014 	strh.w	r3, [sp, #20]
 800601c:	bf14      	ite	ne
 800601e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006022:	4623      	moveq	r3, r4
 8006024:	9304      	str	r3, [sp, #16]
 8006026:	9307      	str	r3, [sp, #28]
 8006028:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800602c:	9002      	str	r0, [sp, #8]
 800602e:	9006      	str	r0, [sp, #24]
 8006030:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006034:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006036:	ab21      	add	r3, sp, #132	; 0x84
 8006038:	a902      	add	r1, sp, #8
 800603a:	4628      	mov	r0, r5
 800603c:	9301      	str	r3, [sp, #4]
 800603e:	f001 fb35 	bl	80076ac <_svfiprintf_r>
 8006042:	1c43      	adds	r3, r0, #1
 8006044:	bfbc      	itt	lt
 8006046:	238b      	movlt	r3, #139	; 0x8b
 8006048:	602b      	strlt	r3, [r5, #0]
 800604a:	2c00      	cmp	r4, #0
 800604c:	d0dd      	beq.n	800600a <sniprintf+0x16>
 800604e:	9b02      	ldr	r3, [sp, #8]
 8006050:	2200      	movs	r2, #0
 8006052:	701a      	strb	r2, [r3, #0]
 8006054:	e7d9      	b.n	800600a <sniprintf+0x16>
 8006056:	bf00      	nop
 8006058:	20000010 	.word	0x20000010

0800605c <quorem>:
 800605c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006060:	6903      	ldr	r3, [r0, #16]
 8006062:	690c      	ldr	r4, [r1, #16]
 8006064:	42a3      	cmp	r3, r4
 8006066:	4607      	mov	r7, r0
 8006068:	f2c0 8081 	blt.w	800616e <quorem+0x112>
 800606c:	3c01      	subs	r4, #1
 800606e:	f101 0814 	add.w	r8, r1, #20
 8006072:	f100 0514 	add.w	r5, r0, #20
 8006076:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800607a:	9301      	str	r3, [sp, #4]
 800607c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006080:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006084:	3301      	adds	r3, #1
 8006086:	429a      	cmp	r2, r3
 8006088:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800608c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006090:	fbb2 f6f3 	udiv	r6, r2, r3
 8006094:	d331      	bcc.n	80060fa <quorem+0x9e>
 8006096:	f04f 0e00 	mov.w	lr, #0
 800609a:	4640      	mov	r0, r8
 800609c:	46ac      	mov	ip, r5
 800609e:	46f2      	mov	sl, lr
 80060a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80060a4:	b293      	uxth	r3, r2
 80060a6:	fb06 e303 	mla	r3, r6, r3, lr
 80060aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	ebaa 0303 	sub.w	r3, sl, r3
 80060b4:	0c12      	lsrs	r2, r2, #16
 80060b6:	f8dc a000 	ldr.w	sl, [ip]
 80060ba:	fb06 e202 	mla	r2, r6, r2, lr
 80060be:	fa13 f38a 	uxtah	r3, r3, sl
 80060c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80060c6:	fa1f fa82 	uxth.w	sl, r2
 80060ca:	f8dc 2000 	ldr.w	r2, [ip]
 80060ce:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80060d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060dc:	4581      	cmp	r9, r0
 80060de:	f84c 3b04 	str.w	r3, [ip], #4
 80060e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80060e6:	d2db      	bcs.n	80060a0 <quorem+0x44>
 80060e8:	f855 300b 	ldr.w	r3, [r5, fp]
 80060ec:	b92b      	cbnz	r3, 80060fa <quorem+0x9e>
 80060ee:	9b01      	ldr	r3, [sp, #4]
 80060f0:	3b04      	subs	r3, #4
 80060f2:	429d      	cmp	r5, r3
 80060f4:	461a      	mov	r2, r3
 80060f6:	d32e      	bcc.n	8006156 <quorem+0xfa>
 80060f8:	613c      	str	r4, [r7, #16]
 80060fa:	4638      	mov	r0, r7
 80060fc:	f001 f8c0 	bl	8007280 <__mcmp>
 8006100:	2800      	cmp	r0, #0
 8006102:	db24      	blt.n	800614e <quorem+0xf2>
 8006104:	3601      	adds	r6, #1
 8006106:	4628      	mov	r0, r5
 8006108:	f04f 0c00 	mov.w	ip, #0
 800610c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006110:	f8d0 e000 	ldr.w	lr, [r0]
 8006114:	b293      	uxth	r3, r2
 8006116:	ebac 0303 	sub.w	r3, ip, r3
 800611a:	0c12      	lsrs	r2, r2, #16
 800611c:	fa13 f38e 	uxtah	r3, r3, lr
 8006120:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006124:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006128:	b29b      	uxth	r3, r3
 800612a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800612e:	45c1      	cmp	r9, r8
 8006130:	f840 3b04 	str.w	r3, [r0], #4
 8006134:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006138:	d2e8      	bcs.n	800610c <quorem+0xb0>
 800613a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800613e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006142:	b922      	cbnz	r2, 800614e <quorem+0xf2>
 8006144:	3b04      	subs	r3, #4
 8006146:	429d      	cmp	r5, r3
 8006148:	461a      	mov	r2, r3
 800614a:	d30a      	bcc.n	8006162 <quorem+0x106>
 800614c:	613c      	str	r4, [r7, #16]
 800614e:	4630      	mov	r0, r6
 8006150:	b003      	add	sp, #12
 8006152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006156:	6812      	ldr	r2, [r2, #0]
 8006158:	3b04      	subs	r3, #4
 800615a:	2a00      	cmp	r2, #0
 800615c:	d1cc      	bne.n	80060f8 <quorem+0x9c>
 800615e:	3c01      	subs	r4, #1
 8006160:	e7c7      	b.n	80060f2 <quorem+0x96>
 8006162:	6812      	ldr	r2, [r2, #0]
 8006164:	3b04      	subs	r3, #4
 8006166:	2a00      	cmp	r2, #0
 8006168:	d1f0      	bne.n	800614c <quorem+0xf0>
 800616a:	3c01      	subs	r4, #1
 800616c:	e7eb      	b.n	8006146 <quorem+0xea>
 800616e:	2000      	movs	r0, #0
 8006170:	e7ee      	b.n	8006150 <quorem+0xf4>
 8006172:	0000      	movs	r0, r0
 8006174:	0000      	movs	r0, r0
	...

08006178 <_dtoa_r>:
 8006178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800617c:	ed2d 8b02 	vpush	{d8}
 8006180:	ec57 6b10 	vmov	r6, r7, d0
 8006184:	b095      	sub	sp, #84	; 0x54
 8006186:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006188:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800618c:	9105      	str	r1, [sp, #20]
 800618e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006192:	4604      	mov	r4, r0
 8006194:	9209      	str	r2, [sp, #36]	; 0x24
 8006196:	930f      	str	r3, [sp, #60]	; 0x3c
 8006198:	b975      	cbnz	r5, 80061b8 <_dtoa_r+0x40>
 800619a:	2010      	movs	r0, #16
 800619c:	f000 fddc 	bl	8006d58 <malloc>
 80061a0:	4602      	mov	r2, r0
 80061a2:	6260      	str	r0, [r4, #36]	; 0x24
 80061a4:	b920      	cbnz	r0, 80061b0 <_dtoa_r+0x38>
 80061a6:	4bb2      	ldr	r3, [pc, #712]	; (8006470 <_dtoa_r+0x2f8>)
 80061a8:	21ea      	movs	r1, #234	; 0xea
 80061aa:	48b2      	ldr	r0, [pc, #712]	; (8006474 <_dtoa_r+0x2fc>)
 80061ac:	f001 fb8e 	bl	80078cc <__assert_func>
 80061b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80061b4:	6005      	str	r5, [r0, #0]
 80061b6:	60c5      	str	r5, [r0, #12]
 80061b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061ba:	6819      	ldr	r1, [r3, #0]
 80061bc:	b151      	cbz	r1, 80061d4 <_dtoa_r+0x5c>
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	604a      	str	r2, [r1, #4]
 80061c2:	2301      	movs	r3, #1
 80061c4:	4093      	lsls	r3, r2
 80061c6:	608b      	str	r3, [r1, #8]
 80061c8:	4620      	mov	r0, r4
 80061ca:	f000 fe1b 	bl	8006e04 <_Bfree>
 80061ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061d0:	2200      	movs	r2, #0
 80061d2:	601a      	str	r2, [r3, #0]
 80061d4:	1e3b      	subs	r3, r7, #0
 80061d6:	bfb9      	ittee	lt
 80061d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80061dc:	9303      	strlt	r3, [sp, #12]
 80061de:	2300      	movge	r3, #0
 80061e0:	f8c8 3000 	strge.w	r3, [r8]
 80061e4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80061e8:	4ba3      	ldr	r3, [pc, #652]	; (8006478 <_dtoa_r+0x300>)
 80061ea:	bfbc      	itt	lt
 80061ec:	2201      	movlt	r2, #1
 80061ee:	f8c8 2000 	strlt.w	r2, [r8]
 80061f2:	ea33 0309 	bics.w	r3, r3, r9
 80061f6:	d11b      	bne.n	8006230 <_dtoa_r+0xb8>
 80061f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80061fa:	f242 730f 	movw	r3, #9999	; 0x270f
 80061fe:	6013      	str	r3, [r2, #0]
 8006200:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006204:	4333      	orrs	r3, r6
 8006206:	f000 857a 	beq.w	8006cfe <_dtoa_r+0xb86>
 800620a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800620c:	b963      	cbnz	r3, 8006228 <_dtoa_r+0xb0>
 800620e:	4b9b      	ldr	r3, [pc, #620]	; (800647c <_dtoa_r+0x304>)
 8006210:	e024      	b.n	800625c <_dtoa_r+0xe4>
 8006212:	4b9b      	ldr	r3, [pc, #620]	; (8006480 <_dtoa_r+0x308>)
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	3308      	adds	r3, #8
 8006218:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800621a:	6013      	str	r3, [r2, #0]
 800621c:	9800      	ldr	r0, [sp, #0]
 800621e:	b015      	add	sp, #84	; 0x54
 8006220:	ecbd 8b02 	vpop	{d8}
 8006224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006228:	4b94      	ldr	r3, [pc, #592]	; (800647c <_dtoa_r+0x304>)
 800622a:	9300      	str	r3, [sp, #0]
 800622c:	3303      	adds	r3, #3
 800622e:	e7f3      	b.n	8006218 <_dtoa_r+0xa0>
 8006230:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006234:	2200      	movs	r2, #0
 8006236:	ec51 0b17 	vmov	r0, r1, d7
 800623a:	2300      	movs	r3, #0
 800623c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006240:	f7fa fc62 	bl	8000b08 <__aeabi_dcmpeq>
 8006244:	4680      	mov	r8, r0
 8006246:	b158      	cbz	r0, 8006260 <_dtoa_r+0xe8>
 8006248:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800624a:	2301      	movs	r3, #1
 800624c:	6013      	str	r3, [r2, #0]
 800624e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006250:	2b00      	cmp	r3, #0
 8006252:	f000 8551 	beq.w	8006cf8 <_dtoa_r+0xb80>
 8006256:	488b      	ldr	r0, [pc, #556]	; (8006484 <_dtoa_r+0x30c>)
 8006258:	6018      	str	r0, [r3, #0]
 800625a:	1e43      	subs	r3, r0, #1
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	e7dd      	b.n	800621c <_dtoa_r+0xa4>
 8006260:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006264:	aa12      	add	r2, sp, #72	; 0x48
 8006266:	a913      	add	r1, sp, #76	; 0x4c
 8006268:	4620      	mov	r0, r4
 800626a:	f001 f8ad 	bl	80073c8 <__d2b>
 800626e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006272:	4683      	mov	fp, r0
 8006274:	2d00      	cmp	r5, #0
 8006276:	d07c      	beq.n	8006372 <_dtoa_r+0x1fa>
 8006278:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800627a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800627e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006282:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006286:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800628a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800628e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006292:	4b7d      	ldr	r3, [pc, #500]	; (8006488 <_dtoa_r+0x310>)
 8006294:	2200      	movs	r2, #0
 8006296:	4630      	mov	r0, r6
 8006298:	4639      	mov	r1, r7
 800629a:	f7fa f815 	bl	80002c8 <__aeabi_dsub>
 800629e:	a36e      	add	r3, pc, #440	; (adr r3, 8006458 <_dtoa_r+0x2e0>)
 80062a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a4:	f7fa f9c8 	bl	8000638 <__aeabi_dmul>
 80062a8:	a36d      	add	r3, pc, #436	; (adr r3, 8006460 <_dtoa_r+0x2e8>)
 80062aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ae:	f7fa f80d 	bl	80002cc <__adddf3>
 80062b2:	4606      	mov	r6, r0
 80062b4:	4628      	mov	r0, r5
 80062b6:	460f      	mov	r7, r1
 80062b8:	f7fa f954 	bl	8000564 <__aeabi_i2d>
 80062bc:	a36a      	add	r3, pc, #424	; (adr r3, 8006468 <_dtoa_r+0x2f0>)
 80062be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c2:	f7fa f9b9 	bl	8000638 <__aeabi_dmul>
 80062c6:	4602      	mov	r2, r0
 80062c8:	460b      	mov	r3, r1
 80062ca:	4630      	mov	r0, r6
 80062cc:	4639      	mov	r1, r7
 80062ce:	f7f9 fffd 	bl	80002cc <__adddf3>
 80062d2:	4606      	mov	r6, r0
 80062d4:	460f      	mov	r7, r1
 80062d6:	f7fa fc5f 	bl	8000b98 <__aeabi_d2iz>
 80062da:	2200      	movs	r2, #0
 80062dc:	4682      	mov	sl, r0
 80062de:	2300      	movs	r3, #0
 80062e0:	4630      	mov	r0, r6
 80062e2:	4639      	mov	r1, r7
 80062e4:	f7fa fc1a 	bl	8000b1c <__aeabi_dcmplt>
 80062e8:	b148      	cbz	r0, 80062fe <_dtoa_r+0x186>
 80062ea:	4650      	mov	r0, sl
 80062ec:	f7fa f93a 	bl	8000564 <__aeabi_i2d>
 80062f0:	4632      	mov	r2, r6
 80062f2:	463b      	mov	r3, r7
 80062f4:	f7fa fc08 	bl	8000b08 <__aeabi_dcmpeq>
 80062f8:	b908      	cbnz	r0, 80062fe <_dtoa_r+0x186>
 80062fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062fe:	f1ba 0f16 	cmp.w	sl, #22
 8006302:	d854      	bhi.n	80063ae <_dtoa_r+0x236>
 8006304:	4b61      	ldr	r3, [pc, #388]	; (800648c <_dtoa_r+0x314>)
 8006306:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800630a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006312:	f7fa fc03 	bl	8000b1c <__aeabi_dcmplt>
 8006316:	2800      	cmp	r0, #0
 8006318:	d04b      	beq.n	80063b2 <_dtoa_r+0x23a>
 800631a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800631e:	2300      	movs	r3, #0
 8006320:	930e      	str	r3, [sp, #56]	; 0x38
 8006322:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006324:	1b5d      	subs	r5, r3, r5
 8006326:	1e6b      	subs	r3, r5, #1
 8006328:	9304      	str	r3, [sp, #16]
 800632a:	bf43      	ittte	mi
 800632c:	2300      	movmi	r3, #0
 800632e:	f1c5 0801 	rsbmi	r8, r5, #1
 8006332:	9304      	strmi	r3, [sp, #16]
 8006334:	f04f 0800 	movpl.w	r8, #0
 8006338:	f1ba 0f00 	cmp.w	sl, #0
 800633c:	db3b      	blt.n	80063b6 <_dtoa_r+0x23e>
 800633e:	9b04      	ldr	r3, [sp, #16]
 8006340:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006344:	4453      	add	r3, sl
 8006346:	9304      	str	r3, [sp, #16]
 8006348:	2300      	movs	r3, #0
 800634a:	9306      	str	r3, [sp, #24]
 800634c:	9b05      	ldr	r3, [sp, #20]
 800634e:	2b09      	cmp	r3, #9
 8006350:	d869      	bhi.n	8006426 <_dtoa_r+0x2ae>
 8006352:	2b05      	cmp	r3, #5
 8006354:	bfc4      	itt	gt
 8006356:	3b04      	subgt	r3, #4
 8006358:	9305      	strgt	r3, [sp, #20]
 800635a:	9b05      	ldr	r3, [sp, #20]
 800635c:	f1a3 0302 	sub.w	r3, r3, #2
 8006360:	bfcc      	ite	gt
 8006362:	2500      	movgt	r5, #0
 8006364:	2501      	movle	r5, #1
 8006366:	2b03      	cmp	r3, #3
 8006368:	d869      	bhi.n	800643e <_dtoa_r+0x2c6>
 800636a:	e8df f003 	tbb	[pc, r3]
 800636e:	4e2c      	.short	0x4e2c
 8006370:	5a4c      	.short	0x5a4c
 8006372:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006376:	441d      	add	r5, r3
 8006378:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800637c:	2b20      	cmp	r3, #32
 800637e:	bfc1      	itttt	gt
 8006380:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006384:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006388:	fa09 f303 	lslgt.w	r3, r9, r3
 800638c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006390:	bfda      	itte	le
 8006392:	f1c3 0320 	rsble	r3, r3, #32
 8006396:	fa06 f003 	lslle.w	r0, r6, r3
 800639a:	4318      	orrgt	r0, r3
 800639c:	f7fa f8d2 	bl	8000544 <__aeabi_ui2d>
 80063a0:	2301      	movs	r3, #1
 80063a2:	4606      	mov	r6, r0
 80063a4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80063a8:	3d01      	subs	r5, #1
 80063aa:	9310      	str	r3, [sp, #64]	; 0x40
 80063ac:	e771      	b.n	8006292 <_dtoa_r+0x11a>
 80063ae:	2301      	movs	r3, #1
 80063b0:	e7b6      	b.n	8006320 <_dtoa_r+0x1a8>
 80063b2:	900e      	str	r0, [sp, #56]	; 0x38
 80063b4:	e7b5      	b.n	8006322 <_dtoa_r+0x1aa>
 80063b6:	f1ca 0300 	rsb	r3, sl, #0
 80063ba:	9306      	str	r3, [sp, #24]
 80063bc:	2300      	movs	r3, #0
 80063be:	eba8 080a 	sub.w	r8, r8, sl
 80063c2:	930d      	str	r3, [sp, #52]	; 0x34
 80063c4:	e7c2      	b.n	800634c <_dtoa_r+0x1d4>
 80063c6:	2300      	movs	r3, #0
 80063c8:	9308      	str	r3, [sp, #32]
 80063ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	dc39      	bgt.n	8006444 <_dtoa_r+0x2cc>
 80063d0:	f04f 0901 	mov.w	r9, #1
 80063d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80063d8:	464b      	mov	r3, r9
 80063da:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80063de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80063e0:	2200      	movs	r2, #0
 80063e2:	6042      	str	r2, [r0, #4]
 80063e4:	2204      	movs	r2, #4
 80063e6:	f102 0614 	add.w	r6, r2, #20
 80063ea:	429e      	cmp	r6, r3
 80063ec:	6841      	ldr	r1, [r0, #4]
 80063ee:	d92f      	bls.n	8006450 <_dtoa_r+0x2d8>
 80063f0:	4620      	mov	r0, r4
 80063f2:	f000 fcc7 	bl	8006d84 <_Balloc>
 80063f6:	9000      	str	r0, [sp, #0]
 80063f8:	2800      	cmp	r0, #0
 80063fa:	d14b      	bne.n	8006494 <_dtoa_r+0x31c>
 80063fc:	4b24      	ldr	r3, [pc, #144]	; (8006490 <_dtoa_r+0x318>)
 80063fe:	4602      	mov	r2, r0
 8006400:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006404:	e6d1      	b.n	80061aa <_dtoa_r+0x32>
 8006406:	2301      	movs	r3, #1
 8006408:	e7de      	b.n	80063c8 <_dtoa_r+0x250>
 800640a:	2300      	movs	r3, #0
 800640c:	9308      	str	r3, [sp, #32]
 800640e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006410:	eb0a 0903 	add.w	r9, sl, r3
 8006414:	f109 0301 	add.w	r3, r9, #1
 8006418:	2b01      	cmp	r3, #1
 800641a:	9301      	str	r3, [sp, #4]
 800641c:	bfb8      	it	lt
 800641e:	2301      	movlt	r3, #1
 8006420:	e7dd      	b.n	80063de <_dtoa_r+0x266>
 8006422:	2301      	movs	r3, #1
 8006424:	e7f2      	b.n	800640c <_dtoa_r+0x294>
 8006426:	2501      	movs	r5, #1
 8006428:	2300      	movs	r3, #0
 800642a:	9305      	str	r3, [sp, #20]
 800642c:	9508      	str	r5, [sp, #32]
 800642e:	f04f 39ff 	mov.w	r9, #4294967295
 8006432:	2200      	movs	r2, #0
 8006434:	f8cd 9004 	str.w	r9, [sp, #4]
 8006438:	2312      	movs	r3, #18
 800643a:	9209      	str	r2, [sp, #36]	; 0x24
 800643c:	e7cf      	b.n	80063de <_dtoa_r+0x266>
 800643e:	2301      	movs	r3, #1
 8006440:	9308      	str	r3, [sp, #32]
 8006442:	e7f4      	b.n	800642e <_dtoa_r+0x2b6>
 8006444:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006448:	f8cd 9004 	str.w	r9, [sp, #4]
 800644c:	464b      	mov	r3, r9
 800644e:	e7c6      	b.n	80063de <_dtoa_r+0x266>
 8006450:	3101      	adds	r1, #1
 8006452:	6041      	str	r1, [r0, #4]
 8006454:	0052      	lsls	r2, r2, #1
 8006456:	e7c6      	b.n	80063e6 <_dtoa_r+0x26e>
 8006458:	636f4361 	.word	0x636f4361
 800645c:	3fd287a7 	.word	0x3fd287a7
 8006460:	8b60c8b3 	.word	0x8b60c8b3
 8006464:	3fc68a28 	.word	0x3fc68a28
 8006468:	509f79fb 	.word	0x509f79fb
 800646c:	3fd34413 	.word	0x3fd34413
 8006470:	08008525 	.word	0x08008525
 8006474:	0800853c 	.word	0x0800853c
 8006478:	7ff00000 	.word	0x7ff00000
 800647c:	08008521 	.word	0x08008521
 8006480:	08008518 	.word	0x08008518
 8006484:	080084f5 	.word	0x080084f5
 8006488:	3ff80000 	.word	0x3ff80000
 800648c:	08008638 	.word	0x08008638
 8006490:	0800859b 	.word	0x0800859b
 8006494:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006496:	9a00      	ldr	r2, [sp, #0]
 8006498:	601a      	str	r2, [r3, #0]
 800649a:	9b01      	ldr	r3, [sp, #4]
 800649c:	2b0e      	cmp	r3, #14
 800649e:	f200 80ad 	bhi.w	80065fc <_dtoa_r+0x484>
 80064a2:	2d00      	cmp	r5, #0
 80064a4:	f000 80aa 	beq.w	80065fc <_dtoa_r+0x484>
 80064a8:	f1ba 0f00 	cmp.w	sl, #0
 80064ac:	dd36      	ble.n	800651c <_dtoa_r+0x3a4>
 80064ae:	4ac3      	ldr	r2, [pc, #780]	; (80067bc <_dtoa_r+0x644>)
 80064b0:	f00a 030f 	and.w	r3, sl, #15
 80064b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80064b8:	ed93 7b00 	vldr	d7, [r3]
 80064bc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80064c0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80064c4:	eeb0 8a47 	vmov.f32	s16, s14
 80064c8:	eef0 8a67 	vmov.f32	s17, s15
 80064cc:	d016      	beq.n	80064fc <_dtoa_r+0x384>
 80064ce:	4bbc      	ldr	r3, [pc, #752]	; (80067c0 <_dtoa_r+0x648>)
 80064d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80064d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064d8:	f7fa f9d8 	bl	800088c <__aeabi_ddiv>
 80064dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064e0:	f007 070f 	and.w	r7, r7, #15
 80064e4:	2503      	movs	r5, #3
 80064e6:	4eb6      	ldr	r6, [pc, #728]	; (80067c0 <_dtoa_r+0x648>)
 80064e8:	b957      	cbnz	r7, 8006500 <_dtoa_r+0x388>
 80064ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064ee:	ec53 2b18 	vmov	r2, r3, d8
 80064f2:	f7fa f9cb 	bl	800088c <__aeabi_ddiv>
 80064f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064fa:	e029      	b.n	8006550 <_dtoa_r+0x3d8>
 80064fc:	2502      	movs	r5, #2
 80064fe:	e7f2      	b.n	80064e6 <_dtoa_r+0x36e>
 8006500:	07f9      	lsls	r1, r7, #31
 8006502:	d508      	bpl.n	8006516 <_dtoa_r+0x39e>
 8006504:	ec51 0b18 	vmov	r0, r1, d8
 8006508:	e9d6 2300 	ldrd	r2, r3, [r6]
 800650c:	f7fa f894 	bl	8000638 <__aeabi_dmul>
 8006510:	ec41 0b18 	vmov	d8, r0, r1
 8006514:	3501      	adds	r5, #1
 8006516:	107f      	asrs	r7, r7, #1
 8006518:	3608      	adds	r6, #8
 800651a:	e7e5      	b.n	80064e8 <_dtoa_r+0x370>
 800651c:	f000 80a6 	beq.w	800666c <_dtoa_r+0x4f4>
 8006520:	f1ca 0600 	rsb	r6, sl, #0
 8006524:	4ba5      	ldr	r3, [pc, #660]	; (80067bc <_dtoa_r+0x644>)
 8006526:	4fa6      	ldr	r7, [pc, #664]	; (80067c0 <_dtoa_r+0x648>)
 8006528:	f006 020f 	and.w	r2, r6, #15
 800652c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006534:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006538:	f7fa f87e 	bl	8000638 <__aeabi_dmul>
 800653c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006540:	1136      	asrs	r6, r6, #4
 8006542:	2300      	movs	r3, #0
 8006544:	2502      	movs	r5, #2
 8006546:	2e00      	cmp	r6, #0
 8006548:	f040 8085 	bne.w	8006656 <_dtoa_r+0x4de>
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1d2      	bne.n	80064f6 <_dtoa_r+0x37e>
 8006550:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006552:	2b00      	cmp	r3, #0
 8006554:	f000 808c 	beq.w	8006670 <_dtoa_r+0x4f8>
 8006558:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800655c:	4b99      	ldr	r3, [pc, #612]	; (80067c4 <_dtoa_r+0x64c>)
 800655e:	2200      	movs	r2, #0
 8006560:	4630      	mov	r0, r6
 8006562:	4639      	mov	r1, r7
 8006564:	f7fa fada 	bl	8000b1c <__aeabi_dcmplt>
 8006568:	2800      	cmp	r0, #0
 800656a:	f000 8081 	beq.w	8006670 <_dtoa_r+0x4f8>
 800656e:	9b01      	ldr	r3, [sp, #4]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d07d      	beq.n	8006670 <_dtoa_r+0x4f8>
 8006574:	f1b9 0f00 	cmp.w	r9, #0
 8006578:	dd3c      	ble.n	80065f4 <_dtoa_r+0x47c>
 800657a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800657e:	9307      	str	r3, [sp, #28]
 8006580:	2200      	movs	r2, #0
 8006582:	4b91      	ldr	r3, [pc, #580]	; (80067c8 <_dtoa_r+0x650>)
 8006584:	4630      	mov	r0, r6
 8006586:	4639      	mov	r1, r7
 8006588:	f7fa f856 	bl	8000638 <__aeabi_dmul>
 800658c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006590:	3501      	adds	r5, #1
 8006592:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006596:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800659a:	4628      	mov	r0, r5
 800659c:	f7f9 ffe2 	bl	8000564 <__aeabi_i2d>
 80065a0:	4632      	mov	r2, r6
 80065a2:	463b      	mov	r3, r7
 80065a4:	f7fa f848 	bl	8000638 <__aeabi_dmul>
 80065a8:	4b88      	ldr	r3, [pc, #544]	; (80067cc <_dtoa_r+0x654>)
 80065aa:	2200      	movs	r2, #0
 80065ac:	f7f9 fe8e 	bl	80002cc <__adddf3>
 80065b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80065b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065b8:	9303      	str	r3, [sp, #12]
 80065ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d15c      	bne.n	800667a <_dtoa_r+0x502>
 80065c0:	4b83      	ldr	r3, [pc, #524]	; (80067d0 <_dtoa_r+0x658>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	4630      	mov	r0, r6
 80065c6:	4639      	mov	r1, r7
 80065c8:	f7f9 fe7e 	bl	80002c8 <__aeabi_dsub>
 80065cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065d0:	4606      	mov	r6, r0
 80065d2:	460f      	mov	r7, r1
 80065d4:	f7fa fac0 	bl	8000b58 <__aeabi_dcmpgt>
 80065d8:	2800      	cmp	r0, #0
 80065da:	f040 8296 	bne.w	8006b0a <_dtoa_r+0x992>
 80065de:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80065e2:	4630      	mov	r0, r6
 80065e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065e8:	4639      	mov	r1, r7
 80065ea:	f7fa fa97 	bl	8000b1c <__aeabi_dcmplt>
 80065ee:	2800      	cmp	r0, #0
 80065f0:	f040 8288 	bne.w	8006b04 <_dtoa_r+0x98c>
 80065f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80065f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f2c0 8158 	blt.w	80068b4 <_dtoa_r+0x73c>
 8006604:	f1ba 0f0e 	cmp.w	sl, #14
 8006608:	f300 8154 	bgt.w	80068b4 <_dtoa_r+0x73c>
 800660c:	4b6b      	ldr	r3, [pc, #428]	; (80067bc <_dtoa_r+0x644>)
 800660e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006612:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006618:	2b00      	cmp	r3, #0
 800661a:	f280 80e3 	bge.w	80067e4 <_dtoa_r+0x66c>
 800661e:	9b01      	ldr	r3, [sp, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	f300 80df 	bgt.w	80067e4 <_dtoa_r+0x66c>
 8006626:	f040 826d 	bne.w	8006b04 <_dtoa_r+0x98c>
 800662a:	4b69      	ldr	r3, [pc, #420]	; (80067d0 <_dtoa_r+0x658>)
 800662c:	2200      	movs	r2, #0
 800662e:	4640      	mov	r0, r8
 8006630:	4649      	mov	r1, r9
 8006632:	f7fa f801 	bl	8000638 <__aeabi_dmul>
 8006636:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800663a:	f7fa fa83 	bl	8000b44 <__aeabi_dcmpge>
 800663e:	9e01      	ldr	r6, [sp, #4]
 8006640:	4637      	mov	r7, r6
 8006642:	2800      	cmp	r0, #0
 8006644:	f040 8243 	bne.w	8006ace <_dtoa_r+0x956>
 8006648:	9d00      	ldr	r5, [sp, #0]
 800664a:	2331      	movs	r3, #49	; 0x31
 800664c:	f805 3b01 	strb.w	r3, [r5], #1
 8006650:	f10a 0a01 	add.w	sl, sl, #1
 8006654:	e23f      	b.n	8006ad6 <_dtoa_r+0x95e>
 8006656:	07f2      	lsls	r2, r6, #31
 8006658:	d505      	bpl.n	8006666 <_dtoa_r+0x4ee>
 800665a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800665e:	f7f9 ffeb 	bl	8000638 <__aeabi_dmul>
 8006662:	3501      	adds	r5, #1
 8006664:	2301      	movs	r3, #1
 8006666:	1076      	asrs	r6, r6, #1
 8006668:	3708      	adds	r7, #8
 800666a:	e76c      	b.n	8006546 <_dtoa_r+0x3ce>
 800666c:	2502      	movs	r5, #2
 800666e:	e76f      	b.n	8006550 <_dtoa_r+0x3d8>
 8006670:	9b01      	ldr	r3, [sp, #4]
 8006672:	f8cd a01c 	str.w	sl, [sp, #28]
 8006676:	930c      	str	r3, [sp, #48]	; 0x30
 8006678:	e78d      	b.n	8006596 <_dtoa_r+0x41e>
 800667a:	9900      	ldr	r1, [sp, #0]
 800667c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800667e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006680:	4b4e      	ldr	r3, [pc, #312]	; (80067bc <_dtoa_r+0x644>)
 8006682:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006686:	4401      	add	r1, r0
 8006688:	9102      	str	r1, [sp, #8]
 800668a:	9908      	ldr	r1, [sp, #32]
 800668c:	eeb0 8a47 	vmov.f32	s16, s14
 8006690:	eef0 8a67 	vmov.f32	s17, s15
 8006694:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006698:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800669c:	2900      	cmp	r1, #0
 800669e:	d045      	beq.n	800672c <_dtoa_r+0x5b4>
 80066a0:	494c      	ldr	r1, [pc, #304]	; (80067d4 <_dtoa_r+0x65c>)
 80066a2:	2000      	movs	r0, #0
 80066a4:	f7fa f8f2 	bl	800088c <__aeabi_ddiv>
 80066a8:	ec53 2b18 	vmov	r2, r3, d8
 80066ac:	f7f9 fe0c 	bl	80002c8 <__aeabi_dsub>
 80066b0:	9d00      	ldr	r5, [sp, #0]
 80066b2:	ec41 0b18 	vmov	d8, r0, r1
 80066b6:	4639      	mov	r1, r7
 80066b8:	4630      	mov	r0, r6
 80066ba:	f7fa fa6d 	bl	8000b98 <__aeabi_d2iz>
 80066be:	900c      	str	r0, [sp, #48]	; 0x30
 80066c0:	f7f9 ff50 	bl	8000564 <__aeabi_i2d>
 80066c4:	4602      	mov	r2, r0
 80066c6:	460b      	mov	r3, r1
 80066c8:	4630      	mov	r0, r6
 80066ca:	4639      	mov	r1, r7
 80066cc:	f7f9 fdfc 	bl	80002c8 <__aeabi_dsub>
 80066d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066d2:	3330      	adds	r3, #48	; 0x30
 80066d4:	f805 3b01 	strb.w	r3, [r5], #1
 80066d8:	ec53 2b18 	vmov	r2, r3, d8
 80066dc:	4606      	mov	r6, r0
 80066de:	460f      	mov	r7, r1
 80066e0:	f7fa fa1c 	bl	8000b1c <__aeabi_dcmplt>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	d165      	bne.n	80067b4 <_dtoa_r+0x63c>
 80066e8:	4632      	mov	r2, r6
 80066ea:	463b      	mov	r3, r7
 80066ec:	4935      	ldr	r1, [pc, #212]	; (80067c4 <_dtoa_r+0x64c>)
 80066ee:	2000      	movs	r0, #0
 80066f0:	f7f9 fdea 	bl	80002c8 <__aeabi_dsub>
 80066f4:	ec53 2b18 	vmov	r2, r3, d8
 80066f8:	f7fa fa10 	bl	8000b1c <__aeabi_dcmplt>
 80066fc:	2800      	cmp	r0, #0
 80066fe:	f040 80b9 	bne.w	8006874 <_dtoa_r+0x6fc>
 8006702:	9b02      	ldr	r3, [sp, #8]
 8006704:	429d      	cmp	r5, r3
 8006706:	f43f af75 	beq.w	80065f4 <_dtoa_r+0x47c>
 800670a:	4b2f      	ldr	r3, [pc, #188]	; (80067c8 <_dtoa_r+0x650>)
 800670c:	ec51 0b18 	vmov	r0, r1, d8
 8006710:	2200      	movs	r2, #0
 8006712:	f7f9 ff91 	bl	8000638 <__aeabi_dmul>
 8006716:	4b2c      	ldr	r3, [pc, #176]	; (80067c8 <_dtoa_r+0x650>)
 8006718:	ec41 0b18 	vmov	d8, r0, r1
 800671c:	2200      	movs	r2, #0
 800671e:	4630      	mov	r0, r6
 8006720:	4639      	mov	r1, r7
 8006722:	f7f9 ff89 	bl	8000638 <__aeabi_dmul>
 8006726:	4606      	mov	r6, r0
 8006728:	460f      	mov	r7, r1
 800672a:	e7c4      	b.n	80066b6 <_dtoa_r+0x53e>
 800672c:	ec51 0b17 	vmov	r0, r1, d7
 8006730:	f7f9 ff82 	bl	8000638 <__aeabi_dmul>
 8006734:	9b02      	ldr	r3, [sp, #8]
 8006736:	9d00      	ldr	r5, [sp, #0]
 8006738:	930c      	str	r3, [sp, #48]	; 0x30
 800673a:	ec41 0b18 	vmov	d8, r0, r1
 800673e:	4639      	mov	r1, r7
 8006740:	4630      	mov	r0, r6
 8006742:	f7fa fa29 	bl	8000b98 <__aeabi_d2iz>
 8006746:	9011      	str	r0, [sp, #68]	; 0x44
 8006748:	f7f9 ff0c 	bl	8000564 <__aeabi_i2d>
 800674c:	4602      	mov	r2, r0
 800674e:	460b      	mov	r3, r1
 8006750:	4630      	mov	r0, r6
 8006752:	4639      	mov	r1, r7
 8006754:	f7f9 fdb8 	bl	80002c8 <__aeabi_dsub>
 8006758:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800675a:	3330      	adds	r3, #48	; 0x30
 800675c:	f805 3b01 	strb.w	r3, [r5], #1
 8006760:	9b02      	ldr	r3, [sp, #8]
 8006762:	429d      	cmp	r5, r3
 8006764:	4606      	mov	r6, r0
 8006766:	460f      	mov	r7, r1
 8006768:	f04f 0200 	mov.w	r2, #0
 800676c:	d134      	bne.n	80067d8 <_dtoa_r+0x660>
 800676e:	4b19      	ldr	r3, [pc, #100]	; (80067d4 <_dtoa_r+0x65c>)
 8006770:	ec51 0b18 	vmov	r0, r1, d8
 8006774:	f7f9 fdaa 	bl	80002cc <__adddf3>
 8006778:	4602      	mov	r2, r0
 800677a:	460b      	mov	r3, r1
 800677c:	4630      	mov	r0, r6
 800677e:	4639      	mov	r1, r7
 8006780:	f7fa f9ea 	bl	8000b58 <__aeabi_dcmpgt>
 8006784:	2800      	cmp	r0, #0
 8006786:	d175      	bne.n	8006874 <_dtoa_r+0x6fc>
 8006788:	ec53 2b18 	vmov	r2, r3, d8
 800678c:	4911      	ldr	r1, [pc, #68]	; (80067d4 <_dtoa_r+0x65c>)
 800678e:	2000      	movs	r0, #0
 8006790:	f7f9 fd9a 	bl	80002c8 <__aeabi_dsub>
 8006794:	4602      	mov	r2, r0
 8006796:	460b      	mov	r3, r1
 8006798:	4630      	mov	r0, r6
 800679a:	4639      	mov	r1, r7
 800679c:	f7fa f9be 	bl	8000b1c <__aeabi_dcmplt>
 80067a0:	2800      	cmp	r0, #0
 80067a2:	f43f af27 	beq.w	80065f4 <_dtoa_r+0x47c>
 80067a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067a8:	1e6b      	subs	r3, r5, #1
 80067aa:	930c      	str	r3, [sp, #48]	; 0x30
 80067ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80067b0:	2b30      	cmp	r3, #48	; 0x30
 80067b2:	d0f8      	beq.n	80067a6 <_dtoa_r+0x62e>
 80067b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80067b8:	e04a      	b.n	8006850 <_dtoa_r+0x6d8>
 80067ba:	bf00      	nop
 80067bc:	08008638 	.word	0x08008638
 80067c0:	08008610 	.word	0x08008610
 80067c4:	3ff00000 	.word	0x3ff00000
 80067c8:	40240000 	.word	0x40240000
 80067cc:	401c0000 	.word	0x401c0000
 80067d0:	40140000 	.word	0x40140000
 80067d4:	3fe00000 	.word	0x3fe00000
 80067d8:	4baf      	ldr	r3, [pc, #700]	; (8006a98 <_dtoa_r+0x920>)
 80067da:	f7f9 ff2d 	bl	8000638 <__aeabi_dmul>
 80067de:	4606      	mov	r6, r0
 80067e0:	460f      	mov	r7, r1
 80067e2:	e7ac      	b.n	800673e <_dtoa_r+0x5c6>
 80067e4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80067e8:	9d00      	ldr	r5, [sp, #0]
 80067ea:	4642      	mov	r2, r8
 80067ec:	464b      	mov	r3, r9
 80067ee:	4630      	mov	r0, r6
 80067f0:	4639      	mov	r1, r7
 80067f2:	f7fa f84b 	bl	800088c <__aeabi_ddiv>
 80067f6:	f7fa f9cf 	bl	8000b98 <__aeabi_d2iz>
 80067fa:	9002      	str	r0, [sp, #8]
 80067fc:	f7f9 feb2 	bl	8000564 <__aeabi_i2d>
 8006800:	4642      	mov	r2, r8
 8006802:	464b      	mov	r3, r9
 8006804:	f7f9 ff18 	bl	8000638 <__aeabi_dmul>
 8006808:	4602      	mov	r2, r0
 800680a:	460b      	mov	r3, r1
 800680c:	4630      	mov	r0, r6
 800680e:	4639      	mov	r1, r7
 8006810:	f7f9 fd5a 	bl	80002c8 <__aeabi_dsub>
 8006814:	9e02      	ldr	r6, [sp, #8]
 8006816:	9f01      	ldr	r7, [sp, #4]
 8006818:	3630      	adds	r6, #48	; 0x30
 800681a:	f805 6b01 	strb.w	r6, [r5], #1
 800681e:	9e00      	ldr	r6, [sp, #0]
 8006820:	1bae      	subs	r6, r5, r6
 8006822:	42b7      	cmp	r7, r6
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	d137      	bne.n	800689a <_dtoa_r+0x722>
 800682a:	f7f9 fd4f 	bl	80002cc <__adddf3>
 800682e:	4642      	mov	r2, r8
 8006830:	464b      	mov	r3, r9
 8006832:	4606      	mov	r6, r0
 8006834:	460f      	mov	r7, r1
 8006836:	f7fa f98f 	bl	8000b58 <__aeabi_dcmpgt>
 800683a:	b9c8      	cbnz	r0, 8006870 <_dtoa_r+0x6f8>
 800683c:	4642      	mov	r2, r8
 800683e:	464b      	mov	r3, r9
 8006840:	4630      	mov	r0, r6
 8006842:	4639      	mov	r1, r7
 8006844:	f7fa f960 	bl	8000b08 <__aeabi_dcmpeq>
 8006848:	b110      	cbz	r0, 8006850 <_dtoa_r+0x6d8>
 800684a:	9b02      	ldr	r3, [sp, #8]
 800684c:	07d9      	lsls	r1, r3, #31
 800684e:	d40f      	bmi.n	8006870 <_dtoa_r+0x6f8>
 8006850:	4620      	mov	r0, r4
 8006852:	4659      	mov	r1, fp
 8006854:	f000 fad6 	bl	8006e04 <_Bfree>
 8006858:	2300      	movs	r3, #0
 800685a:	702b      	strb	r3, [r5, #0]
 800685c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800685e:	f10a 0001 	add.w	r0, sl, #1
 8006862:	6018      	str	r0, [r3, #0]
 8006864:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006866:	2b00      	cmp	r3, #0
 8006868:	f43f acd8 	beq.w	800621c <_dtoa_r+0xa4>
 800686c:	601d      	str	r5, [r3, #0]
 800686e:	e4d5      	b.n	800621c <_dtoa_r+0xa4>
 8006870:	f8cd a01c 	str.w	sl, [sp, #28]
 8006874:	462b      	mov	r3, r5
 8006876:	461d      	mov	r5, r3
 8006878:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800687c:	2a39      	cmp	r2, #57	; 0x39
 800687e:	d108      	bne.n	8006892 <_dtoa_r+0x71a>
 8006880:	9a00      	ldr	r2, [sp, #0]
 8006882:	429a      	cmp	r2, r3
 8006884:	d1f7      	bne.n	8006876 <_dtoa_r+0x6fe>
 8006886:	9a07      	ldr	r2, [sp, #28]
 8006888:	9900      	ldr	r1, [sp, #0]
 800688a:	3201      	adds	r2, #1
 800688c:	9207      	str	r2, [sp, #28]
 800688e:	2230      	movs	r2, #48	; 0x30
 8006890:	700a      	strb	r2, [r1, #0]
 8006892:	781a      	ldrb	r2, [r3, #0]
 8006894:	3201      	adds	r2, #1
 8006896:	701a      	strb	r2, [r3, #0]
 8006898:	e78c      	b.n	80067b4 <_dtoa_r+0x63c>
 800689a:	4b7f      	ldr	r3, [pc, #508]	; (8006a98 <_dtoa_r+0x920>)
 800689c:	2200      	movs	r2, #0
 800689e:	f7f9 fecb 	bl	8000638 <__aeabi_dmul>
 80068a2:	2200      	movs	r2, #0
 80068a4:	2300      	movs	r3, #0
 80068a6:	4606      	mov	r6, r0
 80068a8:	460f      	mov	r7, r1
 80068aa:	f7fa f92d 	bl	8000b08 <__aeabi_dcmpeq>
 80068ae:	2800      	cmp	r0, #0
 80068b0:	d09b      	beq.n	80067ea <_dtoa_r+0x672>
 80068b2:	e7cd      	b.n	8006850 <_dtoa_r+0x6d8>
 80068b4:	9a08      	ldr	r2, [sp, #32]
 80068b6:	2a00      	cmp	r2, #0
 80068b8:	f000 80c4 	beq.w	8006a44 <_dtoa_r+0x8cc>
 80068bc:	9a05      	ldr	r2, [sp, #20]
 80068be:	2a01      	cmp	r2, #1
 80068c0:	f300 80a8 	bgt.w	8006a14 <_dtoa_r+0x89c>
 80068c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80068c6:	2a00      	cmp	r2, #0
 80068c8:	f000 80a0 	beq.w	8006a0c <_dtoa_r+0x894>
 80068cc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80068d0:	9e06      	ldr	r6, [sp, #24]
 80068d2:	4645      	mov	r5, r8
 80068d4:	9a04      	ldr	r2, [sp, #16]
 80068d6:	2101      	movs	r1, #1
 80068d8:	441a      	add	r2, r3
 80068da:	4620      	mov	r0, r4
 80068dc:	4498      	add	r8, r3
 80068de:	9204      	str	r2, [sp, #16]
 80068e0:	f000 fb4c 	bl	8006f7c <__i2b>
 80068e4:	4607      	mov	r7, r0
 80068e6:	2d00      	cmp	r5, #0
 80068e8:	dd0b      	ble.n	8006902 <_dtoa_r+0x78a>
 80068ea:	9b04      	ldr	r3, [sp, #16]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	dd08      	ble.n	8006902 <_dtoa_r+0x78a>
 80068f0:	42ab      	cmp	r3, r5
 80068f2:	9a04      	ldr	r2, [sp, #16]
 80068f4:	bfa8      	it	ge
 80068f6:	462b      	movge	r3, r5
 80068f8:	eba8 0803 	sub.w	r8, r8, r3
 80068fc:	1aed      	subs	r5, r5, r3
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	9304      	str	r3, [sp, #16]
 8006902:	9b06      	ldr	r3, [sp, #24]
 8006904:	b1fb      	cbz	r3, 8006946 <_dtoa_r+0x7ce>
 8006906:	9b08      	ldr	r3, [sp, #32]
 8006908:	2b00      	cmp	r3, #0
 800690a:	f000 809f 	beq.w	8006a4c <_dtoa_r+0x8d4>
 800690e:	2e00      	cmp	r6, #0
 8006910:	dd11      	ble.n	8006936 <_dtoa_r+0x7be>
 8006912:	4639      	mov	r1, r7
 8006914:	4632      	mov	r2, r6
 8006916:	4620      	mov	r0, r4
 8006918:	f000 fbec 	bl	80070f4 <__pow5mult>
 800691c:	465a      	mov	r2, fp
 800691e:	4601      	mov	r1, r0
 8006920:	4607      	mov	r7, r0
 8006922:	4620      	mov	r0, r4
 8006924:	f000 fb40 	bl	8006fa8 <__multiply>
 8006928:	4659      	mov	r1, fp
 800692a:	9007      	str	r0, [sp, #28]
 800692c:	4620      	mov	r0, r4
 800692e:	f000 fa69 	bl	8006e04 <_Bfree>
 8006932:	9b07      	ldr	r3, [sp, #28]
 8006934:	469b      	mov	fp, r3
 8006936:	9b06      	ldr	r3, [sp, #24]
 8006938:	1b9a      	subs	r2, r3, r6
 800693a:	d004      	beq.n	8006946 <_dtoa_r+0x7ce>
 800693c:	4659      	mov	r1, fp
 800693e:	4620      	mov	r0, r4
 8006940:	f000 fbd8 	bl	80070f4 <__pow5mult>
 8006944:	4683      	mov	fp, r0
 8006946:	2101      	movs	r1, #1
 8006948:	4620      	mov	r0, r4
 800694a:	f000 fb17 	bl	8006f7c <__i2b>
 800694e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006950:	2b00      	cmp	r3, #0
 8006952:	4606      	mov	r6, r0
 8006954:	dd7c      	ble.n	8006a50 <_dtoa_r+0x8d8>
 8006956:	461a      	mov	r2, r3
 8006958:	4601      	mov	r1, r0
 800695a:	4620      	mov	r0, r4
 800695c:	f000 fbca 	bl	80070f4 <__pow5mult>
 8006960:	9b05      	ldr	r3, [sp, #20]
 8006962:	2b01      	cmp	r3, #1
 8006964:	4606      	mov	r6, r0
 8006966:	dd76      	ble.n	8006a56 <_dtoa_r+0x8de>
 8006968:	2300      	movs	r3, #0
 800696a:	9306      	str	r3, [sp, #24]
 800696c:	6933      	ldr	r3, [r6, #16]
 800696e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006972:	6918      	ldr	r0, [r3, #16]
 8006974:	f000 fab2 	bl	8006edc <__hi0bits>
 8006978:	f1c0 0020 	rsb	r0, r0, #32
 800697c:	9b04      	ldr	r3, [sp, #16]
 800697e:	4418      	add	r0, r3
 8006980:	f010 001f 	ands.w	r0, r0, #31
 8006984:	f000 8086 	beq.w	8006a94 <_dtoa_r+0x91c>
 8006988:	f1c0 0320 	rsb	r3, r0, #32
 800698c:	2b04      	cmp	r3, #4
 800698e:	dd7f      	ble.n	8006a90 <_dtoa_r+0x918>
 8006990:	f1c0 001c 	rsb	r0, r0, #28
 8006994:	9b04      	ldr	r3, [sp, #16]
 8006996:	4403      	add	r3, r0
 8006998:	4480      	add	r8, r0
 800699a:	4405      	add	r5, r0
 800699c:	9304      	str	r3, [sp, #16]
 800699e:	f1b8 0f00 	cmp.w	r8, #0
 80069a2:	dd05      	ble.n	80069b0 <_dtoa_r+0x838>
 80069a4:	4659      	mov	r1, fp
 80069a6:	4642      	mov	r2, r8
 80069a8:	4620      	mov	r0, r4
 80069aa:	f000 fbfd 	bl	80071a8 <__lshift>
 80069ae:	4683      	mov	fp, r0
 80069b0:	9b04      	ldr	r3, [sp, #16]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	dd05      	ble.n	80069c2 <_dtoa_r+0x84a>
 80069b6:	4631      	mov	r1, r6
 80069b8:	461a      	mov	r2, r3
 80069ba:	4620      	mov	r0, r4
 80069bc:	f000 fbf4 	bl	80071a8 <__lshift>
 80069c0:	4606      	mov	r6, r0
 80069c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d069      	beq.n	8006a9c <_dtoa_r+0x924>
 80069c8:	4631      	mov	r1, r6
 80069ca:	4658      	mov	r0, fp
 80069cc:	f000 fc58 	bl	8007280 <__mcmp>
 80069d0:	2800      	cmp	r0, #0
 80069d2:	da63      	bge.n	8006a9c <_dtoa_r+0x924>
 80069d4:	2300      	movs	r3, #0
 80069d6:	4659      	mov	r1, fp
 80069d8:	220a      	movs	r2, #10
 80069da:	4620      	mov	r0, r4
 80069dc:	f000 fa34 	bl	8006e48 <__multadd>
 80069e0:	9b08      	ldr	r3, [sp, #32]
 80069e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069e6:	4683      	mov	fp, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f000 818f 	beq.w	8006d0c <_dtoa_r+0xb94>
 80069ee:	4639      	mov	r1, r7
 80069f0:	2300      	movs	r3, #0
 80069f2:	220a      	movs	r2, #10
 80069f4:	4620      	mov	r0, r4
 80069f6:	f000 fa27 	bl	8006e48 <__multadd>
 80069fa:	f1b9 0f00 	cmp.w	r9, #0
 80069fe:	4607      	mov	r7, r0
 8006a00:	f300 808e 	bgt.w	8006b20 <_dtoa_r+0x9a8>
 8006a04:	9b05      	ldr	r3, [sp, #20]
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	dc50      	bgt.n	8006aac <_dtoa_r+0x934>
 8006a0a:	e089      	b.n	8006b20 <_dtoa_r+0x9a8>
 8006a0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006a12:	e75d      	b.n	80068d0 <_dtoa_r+0x758>
 8006a14:	9b01      	ldr	r3, [sp, #4]
 8006a16:	1e5e      	subs	r6, r3, #1
 8006a18:	9b06      	ldr	r3, [sp, #24]
 8006a1a:	42b3      	cmp	r3, r6
 8006a1c:	bfbf      	itttt	lt
 8006a1e:	9b06      	ldrlt	r3, [sp, #24]
 8006a20:	9606      	strlt	r6, [sp, #24]
 8006a22:	1af2      	sublt	r2, r6, r3
 8006a24:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006a26:	bfb6      	itet	lt
 8006a28:	189b      	addlt	r3, r3, r2
 8006a2a:	1b9e      	subge	r6, r3, r6
 8006a2c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006a2e:	9b01      	ldr	r3, [sp, #4]
 8006a30:	bfb8      	it	lt
 8006a32:	2600      	movlt	r6, #0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	bfb5      	itete	lt
 8006a38:	eba8 0503 	sublt.w	r5, r8, r3
 8006a3c:	9b01      	ldrge	r3, [sp, #4]
 8006a3e:	2300      	movlt	r3, #0
 8006a40:	4645      	movge	r5, r8
 8006a42:	e747      	b.n	80068d4 <_dtoa_r+0x75c>
 8006a44:	9e06      	ldr	r6, [sp, #24]
 8006a46:	9f08      	ldr	r7, [sp, #32]
 8006a48:	4645      	mov	r5, r8
 8006a4a:	e74c      	b.n	80068e6 <_dtoa_r+0x76e>
 8006a4c:	9a06      	ldr	r2, [sp, #24]
 8006a4e:	e775      	b.n	800693c <_dtoa_r+0x7c4>
 8006a50:	9b05      	ldr	r3, [sp, #20]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	dc18      	bgt.n	8006a88 <_dtoa_r+0x910>
 8006a56:	9b02      	ldr	r3, [sp, #8]
 8006a58:	b9b3      	cbnz	r3, 8006a88 <_dtoa_r+0x910>
 8006a5a:	9b03      	ldr	r3, [sp, #12]
 8006a5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a60:	b9a3      	cbnz	r3, 8006a8c <_dtoa_r+0x914>
 8006a62:	9b03      	ldr	r3, [sp, #12]
 8006a64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a68:	0d1b      	lsrs	r3, r3, #20
 8006a6a:	051b      	lsls	r3, r3, #20
 8006a6c:	b12b      	cbz	r3, 8006a7a <_dtoa_r+0x902>
 8006a6e:	9b04      	ldr	r3, [sp, #16]
 8006a70:	3301      	adds	r3, #1
 8006a72:	9304      	str	r3, [sp, #16]
 8006a74:	f108 0801 	add.w	r8, r8, #1
 8006a78:	2301      	movs	r3, #1
 8006a7a:	9306      	str	r3, [sp, #24]
 8006a7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f47f af74 	bne.w	800696c <_dtoa_r+0x7f4>
 8006a84:	2001      	movs	r0, #1
 8006a86:	e779      	b.n	800697c <_dtoa_r+0x804>
 8006a88:	2300      	movs	r3, #0
 8006a8a:	e7f6      	b.n	8006a7a <_dtoa_r+0x902>
 8006a8c:	9b02      	ldr	r3, [sp, #8]
 8006a8e:	e7f4      	b.n	8006a7a <_dtoa_r+0x902>
 8006a90:	d085      	beq.n	800699e <_dtoa_r+0x826>
 8006a92:	4618      	mov	r0, r3
 8006a94:	301c      	adds	r0, #28
 8006a96:	e77d      	b.n	8006994 <_dtoa_r+0x81c>
 8006a98:	40240000 	.word	0x40240000
 8006a9c:	9b01      	ldr	r3, [sp, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	dc38      	bgt.n	8006b14 <_dtoa_r+0x99c>
 8006aa2:	9b05      	ldr	r3, [sp, #20]
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	dd35      	ble.n	8006b14 <_dtoa_r+0x99c>
 8006aa8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006aac:	f1b9 0f00 	cmp.w	r9, #0
 8006ab0:	d10d      	bne.n	8006ace <_dtoa_r+0x956>
 8006ab2:	4631      	mov	r1, r6
 8006ab4:	464b      	mov	r3, r9
 8006ab6:	2205      	movs	r2, #5
 8006ab8:	4620      	mov	r0, r4
 8006aba:	f000 f9c5 	bl	8006e48 <__multadd>
 8006abe:	4601      	mov	r1, r0
 8006ac0:	4606      	mov	r6, r0
 8006ac2:	4658      	mov	r0, fp
 8006ac4:	f000 fbdc 	bl	8007280 <__mcmp>
 8006ac8:	2800      	cmp	r0, #0
 8006aca:	f73f adbd 	bgt.w	8006648 <_dtoa_r+0x4d0>
 8006ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ad0:	9d00      	ldr	r5, [sp, #0]
 8006ad2:	ea6f 0a03 	mvn.w	sl, r3
 8006ad6:	f04f 0800 	mov.w	r8, #0
 8006ada:	4631      	mov	r1, r6
 8006adc:	4620      	mov	r0, r4
 8006ade:	f000 f991 	bl	8006e04 <_Bfree>
 8006ae2:	2f00      	cmp	r7, #0
 8006ae4:	f43f aeb4 	beq.w	8006850 <_dtoa_r+0x6d8>
 8006ae8:	f1b8 0f00 	cmp.w	r8, #0
 8006aec:	d005      	beq.n	8006afa <_dtoa_r+0x982>
 8006aee:	45b8      	cmp	r8, r7
 8006af0:	d003      	beq.n	8006afa <_dtoa_r+0x982>
 8006af2:	4641      	mov	r1, r8
 8006af4:	4620      	mov	r0, r4
 8006af6:	f000 f985 	bl	8006e04 <_Bfree>
 8006afa:	4639      	mov	r1, r7
 8006afc:	4620      	mov	r0, r4
 8006afe:	f000 f981 	bl	8006e04 <_Bfree>
 8006b02:	e6a5      	b.n	8006850 <_dtoa_r+0x6d8>
 8006b04:	2600      	movs	r6, #0
 8006b06:	4637      	mov	r7, r6
 8006b08:	e7e1      	b.n	8006ace <_dtoa_r+0x956>
 8006b0a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006b0c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006b10:	4637      	mov	r7, r6
 8006b12:	e599      	b.n	8006648 <_dtoa_r+0x4d0>
 8006b14:	9b08      	ldr	r3, [sp, #32]
 8006b16:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f000 80fd 	beq.w	8006d1a <_dtoa_r+0xba2>
 8006b20:	2d00      	cmp	r5, #0
 8006b22:	dd05      	ble.n	8006b30 <_dtoa_r+0x9b8>
 8006b24:	4639      	mov	r1, r7
 8006b26:	462a      	mov	r2, r5
 8006b28:	4620      	mov	r0, r4
 8006b2a:	f000 fb3d 	bl	80071a8 <__lshift>
 8006b2e:	4607      	mov	r7, r0
 8006b30:	9b06      	ldr	r3, [sp, #24]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d05c      	beq.n	8006bf0 <_dtoa_r+0xa78>
 8006b36:	6879      	ldr	r1, [r7, #4]
 8006b38:	4620      	mov	r0, r4
 8006b3a:	f000 f923 	bl	8006d84 <_Balloc>
 8006b3e:	4605      	mov	r5, r0
 8006b40:	b928      	cbnz	r0, 8006b4e <_dtoa_r+0x9d6>
 8006b42:	4b80      	ldr	r3, [pc, #512]	; (8006d44 <_dtoa_r+0xbcc>)
 8006b44:	4602      	mov	r2, r0
 8006b46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006b4a:	f7ff bb2e 	b.w	80061aa <_dtoa_r+0x32>
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	3202      	adds	r2, #2
 8006b52:	0092      	lsls	r2, r2, #2
 8006b54:	f107 010c 	add.w	r1, r7, #12
 8006b58:	300c      	adds	r0, #12
 8006b5a:	f000 f905 	bl	8006d68 <memcpy>
 8006b5e:	2201      	movs	r2, #1
 8006b60:	4629      	mov	r1, r5
 8006b62:	4620      	mov	r0, r4
 8006b64:	f000 fb20 	bl	80071a8 <__lshift>
 8006b68:	9b00      	ldr	r3, [sp, #0]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	9301      	str	r3, [sp, #4]
 8006b6e:	9b00      	ldr	r3, [sp, #0]
 8006b70:	444b      	add	r3, r9
 8006b72:	9307      	str	r3, [sp, #28]
 8006b74:	9b02      	ldr	r3, [sp, #8]
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	46b8      	mov	r8, r7
 8006b7c:	9306      	str	r3, [sp, #24]
 8006b7e:	4607      	mov	r7, r0
 8006b80:	9b01      	ldr	r3, [sp, #4]
 8006b82:	4631      	mov	r1, r6
 8006b84:	3b01      	subs	r3, #1
 8006b86:	4658      	mov	r0, fp
 8006b88:	9302      	str	r3, [sp, #8]
 8006b8a:	f7ff fa67 	bl	800605c <quorem>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	3330      	adds	r3, #48	; 0x30
 8006b92:	9004      	str	r0, [sp, #16]
 8006b94:	4641      	mov	r1, r8
 8006b96:	4658      	mov	r0, fp
 8006b98:	9308      	str	r3, [sp, #32]
 8006b9a:	f000 fb71 	bl	8007280 <__mcmp>
 8006b9e:	463a      	mov	r2, r7
 8006ba0:	4681      	mov	r9, r0
 8006ba2:	4631      	mov	r1, r6
 8006ba4:	4620      	mov	r0, r4
 8006ba6:	f000 fb87 	bl	80072b8 <__mdiff>
 8006baa:	68c2      	ldr	r2, [r0, #12]
 8006bac:	9b08      	ldr	r3, [sp, #32]
 8006bae:	4605      	mov	r5, r0
 8006bb0:	bb02      	cbnz	r2, 8006bf4 <_dtoa_r+0xa7c>
 8006bb2:	4601      	mov	r1, r0
 8006bb4:	4658      	mov	r0, fp
 8006bb6:	f000 fb63 	bl	8007280 <__mcmp>
 8006bba:	9b08      	ldr	r3, [sp, #32]
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	4629      	mov	r1, r5
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006bc6:	f000 f91d 	bl	8006e04 <_Bfree>
 8006bca:	9b05      	ldr	r3, [sp, #20]
 8006bcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bce:	9d01      	ldr	r5, [sp, #4]
 8006bd0:	ea43 0102 	orr.w	r1, r3, r2
 8006bd4:	9b06      	ldr	r3, [sp, #24]
 8006bd6:	430b      	orrs	r3, r1
 8006bd8:	9b08      	ldr	r3, [sp, #32]
 8006bda:	d10d      	bne.n	8006bf8 <_dtoa_r+0xa80>
 8006bdc:	2b39      	cmp	r3, #57	; 0x39
 8006bde:	d029      	beq.n	8006c34 <_dtoa_r+0xabc>
 8006be0:	f1b9 0f00 	cmp.w	r9, #0
 8006be4:	dd01      	ble.n	8006bea <_dtoa_r+0xa72>
 8006be6:	9b04      	ldr	r3, [sp, #16]
 8006be8:	3331      	adds	r3, #49	; 0x31
 8006bea:	9a02      	ldr	r2, [sp, #8]
 8006bec:	7013      	strb	r3, [r2, #0]
 8006bee:	e774      	b.n	8006ada <_dtoa_r+0x962>
 8006bf0:	4638      	mov	r0, r7
 8006bf2:	e7b9      	b.n	8006b68 <_dtoa_r+0x9f0>
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	e7e2      	b.n	8006bbe <_dtoa_r+0xa46>
 8006bf8:	f1b9 0f00 	cmp.w	r9, #0
 8006bfc:	db06      	blt.n	8006c0c <_dtoa_r+0xa94>
 8006bfe:	9905      	ldr	r1, [sp, #20]
 8006c00:	ea41 0909 	orr.w	r9, r1, r9
 8006c04:	9906      	ldr	r1, [sp, #24]
 8006c06:	ea59 0101 	orrs.w	r1, r9, r1
 8006c0a:	d120      	bne.n	8006c4e <_dtoa_r+0xad6>
 8006c0c:	2a00      	cmp	r2, #0
 8006c0e:	ddec      	ble.n	8006bea <_dtoa_r+0xa72>
 8006c10:	4659      	mov	r1, fp
 8006c12:	2201      	movs	r2, #1
 8006c14:	4620      	mov	r0, r4
 8006c16:	9301      	str	r3, [sp, #4]
 8006c18:	f000 fac6 	bl	80071a8 <__lshift>
 8006c1c:	4631      	mov	r1, r6
 8006c1e:	4683      	mov	fp, r0
 8006c20:	f000 fb2e 	bl	8007280 <__mcmp>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	9b01      	ldr	r3, [sp, #4]
 8006c28:	dc02      	bgt.n	8006c30 <_dtoa_r+0xab8>
 8006c2a:	d1de      	bne.n	8006bea <_dtoa_r+0xa72>
 8006c2c:	07da      	lsls	r2, r3, #31
 8006c2e:	d5dc      	bpl.n	8006bea <_dtoa_r+0xa72>
 8006c30:	2b39      	cmp	r3, #57	; 0x39
 8006c32:	d1d8      	bne.n	8006be6 <_dtoa_r+0xa6e>
 8006c34:	9a02      	ldr	r2, [sp, #8]
 8006c36:	2339      	movs	r3, #57	; 0x39
 8006c38:	7013      	strb	r3, [r2, #0]
 8006c3a:	462b      	mov	r3, r5
 8006c3c:	461d      	mov	r5, r3
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006c44:	2a39      	cmp	r2, #57	; 0x39
 8006c46:	d050      	beq.n	8006cea <_dtoa_r+0xb72>
 8006c48:	3201      	adds	r2, #1
 8006c4a:	701a      	strb	r2, [r3, #0]
 8006c4c:	e745      	b.n	8006ada <_dtoa_r+0x962>
 8006c4e:	2a00      	cmp	r2, #0
 8006c50:	dd03      	ble.n	8006c5a <_dtoa_r+0xae2>
 8006c52:	2b39      	cmp	r3, #57	; 0x39
 8006c54:	d0ee      	beq.n	8006c34 <_dtoa_r+0xabc>
 8006c56:	3301      	adds	r3, #1
 8006c58:	e7c7      	b.n	8006bea <_dtoa_r+0xa72>
 8006c5a:	9a01      	ldr	r2, [sp, #4]
 8006c5c:	9907      	ldr	r1, [sp, #28]
 8006c5e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006c62:	428a      	cmp	r2, r1
 8006c64:	d02a      	beq.n	8006cbc <_dtoa_r+0xb44>
 8006c66:	4659      	mov	r1, fp
 8006c68:	2300      	movs	r3, #0
 8006c6a:	220a      	movs	r2, #10
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	f000 f8eb 	bl	8006e48 <__multadd>
 8006c72:	45b8      	cmp	r8, r7
 8006c74:	4683      	mov	fp, r0
 8006c76:	f04f 0300 	mov.w	r3, #0
 8006c7a:	f04f 020a 	mov.w	r2, #10
 8006c7e:	4641      	mov	r1, r8
 8006c80:	4620      	mov	r0, r4
 8006c82:	d107      	bne.n	8006c94 <_dtoa_r+0xb1c>
 8006c84:	f000 f8e0 	bl	8006e48 <__multadd>
 8006c88:	4680      	mov	r8, r0
 8006c8a:	4607      	mov	r7, r0
 8006c8c:	9b01      	ldr	r3, [sp, #4]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	9301      	str	r3, [sp, #4]
 8006c92:	e775      	b.n	8006b80 <_dtoa_r+0xa08>
 8006c94:	f000 f8d8 	bl	8006e48 <__multadd>
 8006c98:	4639      	mov	r1, r7
 8006c9a:	4680      	mov	r8, r0
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	220a      	movs	r2, #10
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f000 f8d1 	bl	8006e48 <__multadd>
 8006ca6:	4607      	mov	r7, r0
 8006ca8:	e7f0      	b.n	8006c8c <_dtoa_r+0xb14>
 8006caa:	f1b9 0f00 	cmp.w	r9, #0
 8006cae:	9a00      	ldr	r2, [sp, #0]
 8006cb0:	bfcc      	ite	gt
 8006cb2:	464d      	movgt	r5, r9
 8006cb4:	2501      	movle	r5, #1
 8006cb6:	4415      	add	r5, r2
 8006cb8:	f04f 0800 	mov.w	r8, #0
 8006cbc:	4659      	mov	r1, fp
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	9301      	str	r3, [sp, #4]
 8006cc4:	f000 fa70 	bl	80071a8 <__lshift>
 8006cc8:	4631      	mov	r1, r6
 8006cca:	4683      	mov	fp, r0
 8006ccc:	f000 fad8 	bl	8007280 <__mcmp>
 8006cd0:	2800      	cmp	r0, #0
 8006cd2:	dcb2      	bgt.n	8006c3a <_dtoa_r+0xac2>
 8006cd4:	d102      	bne.n	8006cdc <_dtoa_r+0xb64>
 8006cd6:	9b01      	ldr	r3, [sp, #4]
 8006cd8:	07db      	lsls	r3, r3, #31
 8006cda:	d4ae      	bmi.n	8006c3a <_dtoa_r+0xac2>
 8006cdc:	462b      	mov	r3, r5
 8006cde:	461d      	mov	r5, r3
 8006ce0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ce4:	2a30      	cmp	r2, #48	; 0x30
 8006ce6:	d0fa      	beq.n	8006cde <_dtoa_r+0xb66>
 8006ce8:	e6f7      	b.n	8006ada <_dtoa_r+0x962>
 8006cea:	9a00      	ldr	r2, [sp, #0]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d1a5      	bne.n	8006c3c <_dtoa_r+0xac4>
 8006cf0:	f10a 0a01 	add.w	sl, sl, #1
 8006cf4:	2331      	movs	r3, #49	; 0x31
 8006cf6:	e779      	b.n	8006bec <_dtoa_r+0xa74>
 8006cf8:	4b13      	ldr	r3, [pc, #76]	; (8006d48 <_dtoa_r+0xbd0>)
 8006cfa:	f7ff baaf 	b.w	800625c <_dtoa_r+0xe4>
 8006cfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f47f aa86 	bne.w	8006212 <_dtoa_r+0x9a>
 8006d06:	4b11      	ldr	r3, [pc, #68]	; (8006d4c <_dtoa_r+0xbd4>)
 8006d08:	f7ff baa8 	b.w	800625c <_dtoa_r+0xe4>
 8006d0c:	f1b9 0f00 	cmp.w	r9, #0
 8006d10:	dc03      	bgt.n	8006d1a <_dtoa_r+0xba2>
 8006d12:	9b05      	ldr	r3, [sp, #20]
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	f73f aec9 	bgt.w	8006aac <_dtoa_r+0x934>
 8006d1a:	9d00      	ldr	r5, [sp, #0]
 8006d1c:	4631      	mov	r1, r6
 8006d1e:	4658      	mov	r0, fp
 8006d20:	f7ff f99c 	bl	800605c <quorem>
 8006d24:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006d28:	f805 3b01 	strb.w	r3, [r5], #1
 8006d2c:	9a00      	ldr	r2, [sp, #0]
 8006d2e:	1aaa      	subs	r2, r5, r2
 8006d30:	4591      	cmp	r9, r2
 8006d32:	ddba      	ble.n	8006caa <_dtoa_r+0xb32>
 8006d34:	4659      	mov	r1, fp
 8006d36:	2300      	movs	r3, #0
 8006d38:	220a      	movs	r2, #10
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	f000 f884 	bl	8006e48 <__multadd>
 8006d40:	4683      	mov	fp, r0
 8006d42:	e7eb      	b.n	8006d1c <_dtoa_r+0xba4>
 8006d44:	0800859b 	.word	0x0800859b
 8006d48:	080084f4 	.word	0x080084f4
 8006d4c:	08008518 	.word	0x08008518

08006d50 <_localeconv_r>:
 8006d50:	4800      	ldr	r0, [pc, #0]	; (8006d54 <_localeconv_r+0x4>)
 8006d52:	4770      	bx	lr
 8006d54:	20000164 	.word	0x20000164

08006d58 <malloc>:
 8006d58:	4b02      	ldr	r3, [pc, #8]	; (8006d64 <malloc+0xc>)
 8006d5a:	4601      	mov	r1, r0
 8006d5c:	6818      	ldr	r0, [r3, #0]
 8006d5e:	f000 bbef 	b.w	8007540 <_malloc_r>
 8006d62:	bf00      	nop
 8006d64:	20000010 	.word	0x20000010

08006d68 <memcpy>:
 8006d68:	440a      	add	r2, r1
 8006d6a:	4291      	cmp	r1, r2
 8006d6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d70:	d100      	bne.n	8006d74 <memcpy+0xc>
 8006d72:	4770      	bx	lr
 8006d74:	b510      	push	{r4, lr}
 8006d76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d7e:	4291      	cmp	r1, r2
 8006d80:	d1f9      	bne.n	8006d76 <memcpy+0xe>
 8006d82:	bd10      	pop	{r4, pc}

08006d84 <_Balloc>:
 8006d84:	b570      	push	{r4, r5, r6, lr}
 8006d86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006d88:	4604      	mov	r4, r0
 8006d8a:	460d      	mov	r5, r1
 8006d8c:	b976      	cbnz	r6, 8006dac <_Balloc+0x28>
 8006d8e:	2010      	movs	r0, #16
 8006d90:	f7ff ffe2 	bl	8006d58 <malloc>
 8006d94:	4602      	mov	r2, r0
 8006d96:	6260      	str	r0, [r4, #36]	; 0x24
 8006d98:	b920      	cbnz	r0, 8006da4 <_Balloc+0x20>
 8006d9a:	4b18      	ldr	r3, [pc, #96]	; (8006dfc <_Balloc+0x78>)
 8006d9c:	4818      	ldr	r0, [pc, #96]	; (8006e00 <_Balloc+0x7c>)
 8006d9e:	2166      	movs	r1, #102	; 0x66
 8006da0:	f000 fd94 	bl	80078cc <__assert_func>
 8006da4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006da8:	6006      	str	r6, [r0, #0]
 8006daa:	60c6      	str	r6, [r0, #12]
 8006dac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006dae:	68f3      	ldr	r3, [r6, #12]
 8006db0:	b183      	cbz	r3, 8006dd4 <_Balloc+0x50>
 8006db2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006dba:	b9b8      	cbnz	r0, 8006dec <_Balloc+0x68>
 8006dbc:	2101      	movs	r1, #1
 8006dbe:	fa01 f605 	lsl.w	r6, r1, r5
 8006dc2:	1d72      	adds	r2, r6, #5
 8006dc4:	0092      	lsls	r2, r2, #2
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	f000 fb5a 	bl	8007480 <_calloc_r>
 8006dcc:	b160      	cbz	r0, 8006de8 <_Balloc+0x64>
 8006dce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006dd2:	e00e      	b.n	8006df2 <_Balloc+0x6e>
 8006dd4:	2221      	movs	r2, #33	; 0x21
 8006dd6:	2104      	movs	r1, #4
 8006dd8:	4620      	mov	r0, r4
 8006dda:	f000 fb51 	bl	8007480 <_calloc_r>
 8006dde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006de0:	60f0      	str	r0, [r6, #12]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1e4      	bne.n	8006db2 <_Balloc+0x2e>
 8006de8:	2000      	movs	r0, #0
 8006dea:	bd70      	pop	{r4, r5, r6, pc}
 8006dec:	6802      	ldr	r2, [r0, #0]
 8006dee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006df2:	2300      	movs	r3, #0
 8006df4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006df8:	e7f7      	b.n	8006dea <_Balloc+0x66>
 8006dfa:	bf00      	nop
 8006dfc:	08008525 	.word	0x08008525
 8006e00:	080085ac 	.word	0x080085ac

08006e04 <_Bfree>:
 8006e04:	b570      	push	{r4, r5, r6, lr}
 8006e06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e08:	4605      	mov	r5, r0
 8006e0a:	460c      	mov	r4, r1
 8006e0c:	b976      	cbnz	r6, 8006e2c <_Bfree+0x28>
 8006e0e:	2010      	movs	r0, #16
 8006e10:	f7ff ffa2 	bl	8006d58 <malloc>
 8006e14:	4602      	mov	r2, r0
 8006e16:	6268      	str	r0, [r5, #36]	; 0x24
 8006e18:	b920      	cbnz	r0, 8006e24 <_Bfree+0x20>
 8006e1a:	4b09      	ldr	r3, [pc, #36]	; (8006e40 <_Bfree+0x3c>)
 8006e1c:	4809      	ldr	r0, [pc, #36]	; (8006e44 <_Bfree+0x40>)
 8006e1e:	218a      	movs	r1, #138	; 0x8a
 8006e20:	f000 fd54 	bl	80078cc <__assert_func>
 8006e24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e28:	6006      	str	r6, [r0, #0]
 8006e2a:	60c6      	str	r6, [r0, #12]
 8006e2c:	b13c      	cbz	r4, 8006e3e <_Bfree+0x3a>
 8006e2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e30:	6862      	ldr	r2, [r4, #4]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e38:	6021      	str	r1, [r4, #0]
 8006e3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e3e:	bd70      	pop	{r4, r5, r6, pc}
 8006e40:	08008525 	.word	0x08008525
 8006e44:	080085ac 	.word	0x080085ac

08006e48 <__multadd>:
 8006e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e4c:	690e      	ldr	r6, [r1, #16]
 8006e4e:	4607      	mov	r7, r0
 8006e50:	4698      	mov	r8, r3
 8006e52:	460c      	mov	r4, r1
 8006e54:	f101 0014 	add.w	r0, r1, #20
 8006e58:	2300      	movs	r3, #0
 8006e5a:	6805      	ldr	r5, [r0, #0]
 8006e5c:	b2a9      	uxth	r1, r5
 8006e5e:	fb02 8101 	mla	r1, r2, r1, r8
 8006e62:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006e66:	0c2d      	lsrs	r5, r5, #16
 8006e68:	fb02 c505 	mla	r5, r2, r5, ip
 8006e6c:	b289      	uxth	r1, r1
 8006e6e:	3301      	adds	r3, #1
 8006e70:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006e74:	429e      	cmp	r6, r3
 8006e76:	f840 1b04 	str.w	r1, [r0], #4
 8006e7a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006e7e:	dcec      	bgt.n	8006e5a <__multadd+0x12>
 8006e80:	f1b8 0f00 	cmp.w	r8, #0
 8006e84:	d022      	beq.n	8006ecc <__multadd+0x84>
 8006e86:	68a3      	ldr	r3, [r4, #8]
 8006e88:	42b3      	cmp	r3, r6
 8006e8a:	dc19      	bgt.n	8006ec0 <__multadd+0x78>
 8006e8c:	6861      	ldr	r1, [r4, #4]
 8006e8e:	4638      	mov	r0, r7
 8006e90:	3101      	adds	r1, #1
 8006e92:	f7ff ff77 	bl	8006d84 <_Balloc>
 8006e96:	4605      	mov	r5, r0
 8006e98:	b928      	cbnz	r0, 8006ea6 <__multadd+0x5e>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	4b0d      	ldr	r3, [pc, #52]	; (8006ed4 <__multadd+0x8c>)
 8006e9e:	480e      	ldr	r0, [pc, #56]	; (8006ed8 <__multadd+0x90>)
 8006ea0:	21b5      	movs	r1, #181	; 0xb5
 8006ea2:	f000 fd13 	bl	80078cc <__assert_func>
 8006ea6:	6922      	ldr	r2, [r4, #16]
 8006ea8:	3202      	adds	r2, #2
 8006eaa:	f104 010c 	add.w	r1, r4, #12
 8006eae:	0092      	lsls	r2, r2, #2
 8006eb0:	300c      	adds	r0, #12
 8006eb2:	f7ff ff59 	bl	8006d68 <memcpy>
 8006eb6:	4621      	mov	r1, r4
 8006eb8:	4638      	mov	r0, r7
 8006eba:	f7ff ffa3 	bl	8006e04 <_Bfree>
 8006ebe:	462c      	mov	r4, r5
 8006ec0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006ec4:	3601      	adds	r6, #1
 8006ec6:	f8c3 8014 	str.w	r8, [r3, #20]
 8006eca:	6126      	str	r6, [r4, #16]
 8006ecc:	4620      	mov	r0, r4
 8006ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ed2:	bf00      	nop
 8006ed4:	0800859b 	.word	0x0800859b
 8006ed8:	080085ac 	.word	0x080085ac

08006edc <__hi0bits>:
 8006edc:	0c03      	lsrs	r3, r0, #16
 8006ede:	041b      	lsls	r3, r3, #16
 8006ee0:	b9d3      	cbnz	r3, 8006f18 <__hi0bits+0x3c>
 8006ee2:	0400      	lsls	r0, r0, #16
 8006ee4:	2310      	movs	r3, #16
 8006ee6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006eea:	bf04      	itt	eq
 8006eec:	0200      	lsleq	r0, r0, #8
 8006eee:	3308      	addeq	r3, #8
 8006ef0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006ef4:	bf04      	itt	eq
 8006ef6:	0100      	lsleq	r0, r0, #4
 8006ef8:	3304      	addeq	r3, #4
 8006efa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006efe:	bf04      	itt	eq
 8006f00:	0080      	lsleq	r0, r0, #2
 8006f02:	3302      	addeq	r3, #2
 8006f04:	2800      	cmp	r0, #0
 8006f06:	db05      	blt.n	8006f14 <__hi0bits+0x38>
 8006f08:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006f0c:	f103 0301 	add.w	r3, r3, #1
 8006f10:	bf08      	it	eq
 8006f12:	2320      	moveq	r3, #32
 8006f14:	4618      	mov	r0, r3
 8006f16:	4770      	bx	lr
 8006f18:	2300      	movs	r3, #0
 8006f1a:	e7e4      	b.n	8006ee6 <__hi0bits+0xa>

08006f1c <__lo0bits>:
 8006f1c:	6803      	ldr	r3, [r0, #0]
 8006f1e:	f013 0207 	ands.w	r2, r3, #7
 8006f22:	4601      	mov	r1, r0
 8006f24:	d00b      	beq.n	8006f3e <__lo0bits+0x22>
 8006f26:	07da      	lsls	r2, r3, #31
 8006f28:	d424      	bmi.n	8006f74 <__lo0bits+0x58>
 8006f2a:	0798      	lsls	r0, r3, #30
 8006f2c:	bf49      	itett	mi
 8006f2e:	085b      	lsrmi	r3, r3, #1
 8006f30:	089b      	lsrpl	r3, r3, #2
 8006f32:	2001      	movmi	r0, #1
 8006f34:	600b      	strmi	r3, [r1, #0]
 8006f36:	bf5c      	itt	pl
 8006f38:	600b      	strpl	r3, [r1, #0]
 8006f3a:	2002      	movpl	r0, #2
 8006f3c:	4770      	bx	lr
 8006f3e:	b298      	uxth	r0, r3
 8006f40:	b9b0      	cbnz	r0, 8006f70 <__lo0bits+0x54>
 8006f42:	0c1b      	lsrs	r3, r3, #16
 8006f44:	2010      	movs	r0, #16
 8006f46:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006f4a:	bf04      	itt	eq
 8006f4c:	0a1b      	lsreq	r3, r3, #8
 8006f4e:	3008      	addeq	r0, #8
 8006f50:	071a      	lsls	r2, r3, #28
 8006f52:	bf04      	itt	eq
 8006f54:	091b      	lsreq	r3, r3, #4
 8006f56:	3004      	addeq	r0, #4
 8006f58:	079a      	lsls	r2, r3, #30
 8006f5a:	bf04      	itt	eq
 8006f5c:	089b      	lsreq	r3, r3, #2
 8006f5e:	3002      	addeq	r0, #2
 8006f60:	07da      	lsls	r2, r3, #31
 8006f62:	d403      	bmi.n	8006f6c <__lo0bits+0x50>
 8006f64:	085b      	lsrs	r3, r3, #1
 8006f66:	f100 0001 	add.w	r0, r0, #1
 8006f6a:	d005      	beq.n	8006f78 <__lo0bits+0x5c>
 8006f6c:	600b      	str	r3, [r1, #0]
 8006f6e:	4770      	bx	lr
 8006f70:	4610      	mov	r0, r2
 8006f72:	e7e8      	b.n	8006f46 <__lo0bits+0x2a>
 8006f74:	2000      	movs	r0, #0
 8006f76:	4770      	bx	lr
 8006f78:	2020      	movs	r0, #32
 8006f7a:	4770      	bx	lr

08006f7c <__i2b>:
 8006f7c:	b510      	push	{r4, lr}
 8006f7e:	460c      	mov	r4, r1
 8006f80:	2101      	movs	r1, #1
 8006f82:	f7ff feff 	bl	8006d84 <_Balloc>
 8006f86:	4602      	mov	r2, r0
 8006f88:	b928      	cbnz	r0, 8006f96 <__i2b+0x1a>
 8006f8a:	4b05      	ldr	r3, [pc, #20]	; (8006fa0 <__i2b+0x24>)
 8006f8c:	4805      	ldr	r0, [pc, #20]	; (8006fa4 <__i2b+0x28>)
 8006f8e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006f92:	f000 fc9b 	bl	80078cc <__assert_func>
 8006f96:	2301      	movs	r3, #1
 8006f98:	6144      	str	r4, [r0, #20]
 8006f9a:	6103      	str	r3, [r0, #16]
 8006f9c:	bd10      	pop	{r4, pc}
 8006f9e:	bf00      	nop
 8006fa0:	0800859b 	.word	0x0800859b
 8006fa4:	080085ac 	.word	0x080085ac

08006fa8 <__multiply>:
 8006fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fac:	4614      	mov	r4, r2
 8006fae:	690a      	ldr	r2, [r1, #16]
 8006fb0:	6923      	ldr	r3, [r4, #16]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	bfb8      	it	lt
 8006fb6:	460b      	movlt	r3, r1
 8006fb8:	460d      	mov	r5, r1
 8006fba:	bfbc      	itt	lt
 8006fbc:	4625      	movlt	r5, r4
 8006fbe:	461c      	movlt	r4, r3
 8006fc0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006fc4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006fc8:	68ab      	ldr	r3, [r5, #8]
 8006fca:	6869      	ldr	r1, [r5, #4]
 8006fcc:	eb0a 0709 	add.w	r7, sl, r9
 8006fd0:	42bb      	cmp	r3, r7
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	bfb8      	it	lt
 8006fd6:	3101      	addlt	r1, #1
 8006fd8:	f7ff fed4 	bl	8006d84 <_Balloc>
 8006fdc:	b930      	cbnz	r0, 8006fec <__multiply+0x44>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	4b42      	ldr	r3, [pc, #264]	; (80070ec <__multiply+0x144>)
 8006fe2:	4843      	ldr	r0, [pc, #268]	; (80070f0 <__multiply+0x148>)
 8006fe4:	f240 115d 	movw	r1, #349	; 0x15d
 8006fe8:	f000 fc70 	bl	80078cc <__assert_func>
 8006fec:	f100 0614 	add.w	r6, r0, #20
 8006ff0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006ff4:	4633      	mov	r3, r6
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	4543      	cmp	r3, r8
 8006ffa:	d31e      	bcc.n	800703a <__multiply+0x92>
 8006ffc:	f105 0c14 	add.w	ip, r5, #20
 8007000:	f104 0314 	add.w	r3, r4, #20
 8007004:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007008:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800700c:	9202      	str	r2, [sp, #8]
 800700e:	ebac 0205 	sub.w	r2, ip, r5
 8007012:	3a15      	subs	r2, #21
 8007014:	f022 0203 	bic.w	r2, r2, #3
 8007018:	3204      	adds	r2, #4
 800701a:	f105 0115 	add.w	r1, r5, #21
 800701e:	458c      	cmp	ip, r1
 8007020:	bf38      	it	cc
 8007022:	2204      	movcc	r2, #4
 8007024:	9201      	str	r2, [sp, #4]
 8007026:	9a02      	ldr	r2, [sp, #8]
 8007028:	9303      	str	r3, [sp, #12]
 800702a:	429a      	cmp	r2, r3
 800702c:	d808      	bhi.n	8007040 <__multiply+0x98>
 800702e:	2f00      	cmp	r7, #0
 8007030:	dc55      	bgt.n	80070de <__multiply+0x136>
 8007032:	6107      	str	r7, [r0, #16]
 8007034:	b005      	add	sp, #20
 8007036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800703a:	f843 2b04 	str.w	r2, [r3], #4
 800703e:	e7db      	b.n	8006ff8 <__multiply+0x50>
 8007040:	f8b3 a000 	ldrh.w	sl, [r3]
 8007044:	f1ba 0f00 	cmp.w	sl, #0
 8007048:	d020      	beq.n	800708c <__multiply+0xe4>
 800704a:	f105 0e14 	add.w	lr, r5, #20
 800704e:	46b1      	mov	r9, r6
 8007050:	2200      	movs	r2, #0
 8007052:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007056:	f8d9 b000 	ldr.w	fp, [r9]
 800705a:	b2a1      	uxth	r1, r4
 800705c:	fa1f fb8b 	uxth.w	fp, fp
 8007060:	fb0a b101 	mla	r1, sl, r1, fp
 8007064:	4411      	add	r1, r2
 8007066:	f8d9 2000 	ldr.w	r2, [r9]
 800706a:	0c24      	lsrs	r4, r4, #16
 800706c:	0c12      	lsrs	r2, r2, #16
 800706e:	fb0a 2404 	mla	r4, sl, r4, r2
 8007072:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007076:	b289      	uxth	r1, r1
 8007078:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800707c:	45f4      	cmp	ip, lr
 800707e:	f849 1b04 	str.w	r1, [r9], #4
 8007082:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007086:	d8e4      	bhi.n	8007052 <__multiply+0xaa>
 8007088:	9901      	ldr	r1, [sp, #4]
 800708a:	5072      	str	r2, [r6, r1]
 800708c:	9a03      	ldr	r2, [sp, #12]
 800708e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007092:	3304      	adds	r3, #4
 8007094:	f1b9 0f00 	cmp.w	r9, #0
 8007098:	d01f      	beq.n	80070da <__multiply+0x132>
 800709a:	6834      	ldr	r4, [r6, #0]
 800709c:	f105 0114 	add.w	r1, r5, #20
 80070a0:	46b6      	mov	lr, r6
 80070a2:	f04f 0a00 	mov.w	sl, #0
 80070a6:	880a      	ldrh	r2, [r1, #0]
 80070a8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80070ac:	fb09 b202 	mla	r2, r9, r2, fp
 80070b0:	4492      	add	sl, r2
 80070b2:	b2a4      	uxth	r4, r4
 80070b4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80070b8:	f84e 4b04 	str.w	r4, [lr], #4
 80070bc:	f851 4b04 	ldr.w	r4, [r1], #4
 80070c0:	f8be 2000 	ldrh.w	r2, [lr]
 80070c4:	0c24      	lsrs	r4, r4, #16
 80070c6:	fb09 2404 	mla	r4, r9, r4, r2
 80070ca:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80070ce:	458c      	cmp	ip, r1
 80070d0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80070d4:	d8e7      	bhi.n	80070a6 <__multiply+0xfe>
 80070d6:	9a01      	ldr	r2, [sp, #4]
 80070d8:	50b4      	str	r4, [r6, r2]
 80070da:	3604      	adds	r6, #4
 80070dc:	e7a3      	b.n	8007026 <__multiply+0x7e>
 80070de:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1a5      	bne.n	8007032 <__multiply+0x8a>
 80070e6:	3f01      	subs	r7, #1
 80070e8:	e7a1      	b.n	800702e <__multiply+0x86>
 80070ea:	bf00      	nop
 80070ec:	0800859b 	.word	0x0800859b
 80070f0:	080085ac 	.word	0x080085ac

080070f4 <__pow5mult>:
 80070f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070f8:	4615      	mov	r5, r2
 80070fa:	f012 0203 	ands.w	r2, r2, #3
 80070fe:	4606      	mov	r6, r0
 8007100:	460f      	mov	r7, r1
 8007102:	d007      	beq.n	8007114 <__pow5mult+0x20>
 8007104:	4c25      	ldr	r4, [pc, #148]	; (800719c <__pow5mult+0xa8>)
 8007106:	3a01      	subs	r2, #1
 8007108:	2300      	movs	r3, #0
 800710a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800710e:	f7ff fe9b 	bl	8006e48 <__multadd>
 8007112:	4607      	mov	r7, r0
 8007114:	10ad      	asrs	r5, r5, #2
 8007116:	d03d      	beq.n	8007194 <__pow5mult+0xa0>
 8007118:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800711a:	b97c      	cbnz	r4, 800713c <__pow5mult+0x48>
 800711c:	2010      	movs	r0, #16
 800711e:	f7ff fe1b 	bl	8006d58 <malloc>
 8007122:	4602      	mov	r2, r0
 8007124:	6270      	str	r0, [r6, #36]	; 0x24
 8007126:	b928      	cbnz	r0, 8007134 <__pow5mult+0x40>
 8007128:	4b1d      	ldr	r3, [pc, #116]	; (80071a0 <__pow5mult+0xac>)
 800712a:	481e      	ldr	r0, [pc, #120]	; (80071a4 <__pow5mult+0xb0>)
 800712c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007130:	f000 fbcc 	bl	80078cc <__assert_func>
 8007134:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007138:	6004      	str	r4, [r0, #0]
 800713a:	60c4      	str	r4, [r0, #12]
 800713c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007140:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007144:	b94c      	cbnz	r4, 800715a <__pow5mult+0x66>
 8007146:	f240 2171 	movw	r1, #625	; 0x271
 800714a:	4630      	mov	r0, r6
 800714c:	f7ff ff16 	bl	8006f7c <__i2b>
 8007150:	2300      	movs	r3, #0
 8007152:	f8c8 0008 	str.w	r0, [r8, #8]
 8007156:	4604      	mov	r4, r0
 8007158:	6003      	str	r3, [r0, #0]
 800715a:	f04f 0900 	mov.w	r9, #0
 800715e:	07eb      	lsls	r3, r5, #31
 8007160:	d50a      	bpl.n	8007178 <__pow5mult+0x84>
 8007162:	4639      	mov	r1, r7
 8007164:	4622      	mov	r2, r4
 8007166:	4630      	mov	r0, r6
 8007168:	f7ff ff1e 	bl	8006fa8 <__multiply>
 800716c:	4639      	mov	r1, r7
 800716e:	4680      	mov	r8, r0
 8007170:	4630      	mov	r0, r6
 8007172:	f7ff fe47 	bl	8006e04 <_Bfree>
 8007176:	4647      	mov	r7, r8
 8007178:	106d      	asrs	r5, r5, #1
 800717a:	d00b      	beq.n	8007194 <__pow5mult+0xa0>
 800717c:	6820      	ldr	r0, [r4, #0]
 800717e:	b938      	cbnz	r0, 8007190 <__pow5mult+0x9c>
 8007180:	4622      	mov	r2, r4
 8007182:	4621      	mov	r1, r4
 8007184:	4630      	mov	r0, r6
 8007186:	f7ff ff0f 	bl	8006fa8 <__multiply>
 800718a:	6020      	str	r0, [r4, #0]
 800718c:	f8c0 9000 	str.w	r9, [r0]
 8007190:	4604      	mov	r4, r0
 8007192:	e7e4      	b.n	800715e <__pow5mult+0x6a>
 8007194:	4638      	mov	r0, r7
 8007196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800719a:	bf00      	nop
 800719c:	08008700 	.word	0x08008700
 80071a0:	08008525 	.word	0x08008525
 80071a4:	080085ac 	.word	0x080085ac

080071a8 <__lshift>:
 80071a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071ac:	460c      	mov	r4, r1
 80071ae:	6849      	ldr	r1, [r1, #4]
 80071b0:	6923      	ldr	r3, [r4, #16]
 80071b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80071b6:	68a3      	ldr	r3, [r4, #8]
 80071b8:	4607      	mov	r7, r0
 80071ba:	4691      	mov	r9, r2
 80071bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80071c0:	f108 0601 	add.w	r6, r8, #1
 80071c4:	42b3      	cmp	r3, r6
 80071c6:	db0b      	blt.n	80071e0 <__lshift+0x38>
 80071c8:	4638      	mov	r0, r7
 80071ca:	f7ff fddb 	bl	8006d84 <_Balloc>
 80071ce:	4605      	mov	r5, r0
 80071d0:	b948      	cbnz	r0, 80071e6 <__lshift+0x3e>
 80071d2:	4602      	mov	r2, r0
 80071d4:	4b28      	ldr	r3, [pc, #160]	; (8007278 <__lshift+0xd0>)
 80071d6:	4829      	ldr	r0, [pc, #164]	; (800727c <__lshift+0xd4>)
 80071d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80071dc:	f000 fb76 	bl	80078cc <__assert_func>
 80071e0:	3101      	adds	r1, #1
 80071e2:	005b      	lsls	r3, r3, #1
 80071e4:	e7ee      	b.n	80071c4 <__lshift+0x1c>
 80071e6:	2300      	movs	r3, #0
 80071e8:	f100 0114 	add.w	r1, r0, #20
 80071ec:	f100 0210 	add.w	r2, r0, #16
 80071f0:	4618      	mov	r0, r3
 80071f2:	4553      	cmp	r3, sl
 80071f4:	db33      	blt.n	800725e <__lshift+0xb6>
 80071f6:	6920      	ldr	r0, [r4, #16]
 80071f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80071fc:	f104 0314 	add.w	r3, r4, #20
 8007200:	f019 091f 	ands.w	r9, r9, #31
 8007204:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007208:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800720c:	d02b      	beq.n	8007266 <__lshift+0xbe>
 800720e:	f1c9 0e20 	rsb	lr, r9, #32
 8007212:	468a      	mov	sl, r1
 8007214:	2200      	movs	r2, #0
 8007216:	6818      	ldr	r0, [r3, #0]
 8007218:	fa00 f009 	lsl.w	r0, r0, r9
 800721c:	4302      	orrs	r2, r0
 800721e:	f84a 2b04 	str.w	r2, [sl], #4
 8007222:	f853 2b04 	ldr.w	r2, [r3], #4
 8007226:	459c      	cmp	ip, r3
 8007228:	fa22 f20e 	lsr.w	r2, r2, lr
 800722c:	d8f3      	bhi.n	8007216 <__lshift+0x6e>
 800722e:	ebac 0304 	sub.w	r3, ip, r4
 8007232:	3b15      	subs	r3, #21
 8007234:	f023 0303 	bic.w	r3, r3, #3
 8007238:	3304      	adds	r3, #4
 800723a:	f104 0015 	add.w	r0, r4, #21
 800723e:	4584      	cmp	ip, r0
 8007240:	bf38      	it	cc
 8007242:	2304      	movcc	r3, #4
 8007244:	50ca      	str	r2, [r1, r3]
 8007246:	b10a      	cbz	r2, 800724c <__lshift+0xa4>
 8007248:	f108 0602 	add.w	r6, r8, #2
 800724c:	3e01      	subs	r6, #1
 800724e:	4638      	mov	r0, r7
 8007250:	612e      	str	r6, [r5, #16]
 8007252:	4621      	mov	r1, r4
 8007254:	f7ff fdd6 	bl	8006e04 <_Bfree>
 8007258:	4628      	mov	r0, r5
 800725a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800725e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007262:	3301      	adds	r3, #1
 8007264:	e7c5      	b.n	80071f2 <__lshift+0x4a>
 8007266:	3904      	subs	r1, #4
 8007268:	f853 2b04 	ldr.w	r2, [r3], #4
 800726c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007270:	459c      	cmp	ip, r3
 8007272:	d8f9      	bhi.n	8007268 <__lshift+0xc0>
 8007274:	e7ea      	b.n	800724c <__lshift+0xa4>
 8007276:	bf00      	nop
 8007278:	0800859b 	.word	0x0800859b
 800727c:	080085ac 	.word	0x080085ac

08007280 <__mcmp>:
 8007280:	b530      	push	{r4, r5, lr}
 8007282:	6902      	ldr	r2, [r0, #16]
 8007284:	690c      	ldr	r4, [r1, #16]
 8007286:	1b12      	subs	r2, r2, r4
 8007288:	d10e      	bne.n	80072a8 <__mcmp+0x28>
 800728a:	f100 0314 	add.w	r3, r0, #20
 800728e:	3114      	adds	r1, #20
 8007290:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007294:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007298:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800729c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80072a0:	42a5      	cmp	r5, r4
 80072a2:	d003      	beq.n	80072ac <__mcmp+0x2c>
 80072a4:	d305      	bcc.n	80072b2 <__mcmp+0x32>
 80072a6:	2201      	movs	r2, #1
 80072a8:	4610      	mov	r0, r2
 80072aa:	bd30      	pop	{r4, r5, pc}
 80072ac:	4283      	cmp	r3, r0
 80072ae:	d3f3      	bcc.n	8007298 <__mcmp+0x18>
 80072b0:	e7fa      	b.n	80072a8 <__mcmp+0x28>
 80072b2:	f04f 32ff 	mov.w	r2, #4294967295
 80072b6:	e7f7      	b.n	80072a8 <__mcmp+0x28>

080072b8 <__mdiff>:
 80072b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072bc:	460c      	mov	r4, r1
 80072be:	4606      	mov	r6, r0
 80072c0:	4611      	mov	r1, r2
 80072c2:	4620      	mov	r0, r4
 80072c4:	4617      	mov	r7, r2
 80072c6:	f7ff ffdb 	bl	8007280 <__mcmp>
 80072ca:	1e05      	subs	r5, r0, #0
 80072cc:	d110      	bne.n	80072f0 <__mdiff+0x38>
 80072ce:	4629      	mov	r1, r5
 80072d0:	4630      	mov	r0, r6
 80072d2:	f7ff fd57 	bl	8006d84 <_Balloc>
 80072d6:	b930      	cbnz	r0, 80072e6 <__mdiff+0x2e>
 80072d8:	4b39      	ldr	r3, [pc, #228]	; (80073c0 <__mdiff+0x108>)
 80072da:	4602      	mov	r2, r0
 80072dc:	f240 2132 	movw	r1, #562	; 0x232
 80072e0:	4838      	ldr	r0, [pc, #224]	; (80073c4 <__mdiff+0x10c>)
 80072e2:	f000 faf3 	bl	80078cc <__assert_func>
 80072e6:	2301      	movs	r3, #1
 80072e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80072ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f0:	bfa4      	itt	ge
 80072f2:	463b      	movge	r3, r7
 80072f4:	4627      	movge	r7, r4
 80072f6:	4630      	mov	r0, r6
 80072f8:	6879      	ldr	r1, [r7, #4]
 80072fa:	bfa6      	itte	ge
 80072fc:	461c      	movge	r4, r3
 80072fe:	2500      	movge	r5, #0
 8007300:	2501      	movlt	r5, #1
 8007302:	f7ff fd3f 	bl	8006d84 <_Balloc>
 8007306:	b920      	cbnz	r0, 8007312 <__mdiff+0x5a>
 8007308:	4b2d      	ldr	r3, [pc, #180]	; (80073c0 <__mdiff+0x108>)
 800730a:	4602      	mov	r2, r0
 800730c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007310:	e7e6      	b.n	80072e0 <__mdiff+0x28>
 8007312:	693e      	ldr	r6, [r7, #16]
 8007314:	60c5      	str	r5, [r0, #12]
 8007316:	6925      	ldr	r5, [r4, #16]
 8007318:	f107 0114 	add.w	r1, r7, #20
 800731c:	f104 0914 	add.w	r9, r4, #20
 8007320:	f100 0e14 	add.w	lr, r0, #20
 8007324:	f107 0210 	add.w	r2, r7, #16
 8007328:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800732c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007330:	46f2      	mov	sl, lr
 8007332:	2700      	movs	r7, #0
 8007334:	f859 3b04 	ldr.w	r3, [r9], #4
 8007338:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800733c:	fa1f f883 	uxth.w	r8, r3
 8007340:	fa17 f78b 	uxtah	r7, r7, fp
 8007344:	0c1b      	lsrs	r3, r3, #16
 8007346:	eba7 0808 	sub.w	r8, r7, r8
 800734a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800734e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007352:	fa1f f888 	uxth.w	r8, r8
 8007356:	141f      	asrs	r7, r3, #16
 8007358:	454d      	cmp	r5, r9
 800735a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800735e:	f84a 3b04 	str.w	r3, [sl], #4
 8007362:	d8e7      	bhi.n	8007334 <__mdiff+0x7c>
 8007364:	1b2b      	subs	r3, r5, r4
 8007366:	3b15      	subs	r3, #21
 8007368:	f023 0303 	bic.w	r3, r3, #3
 800736c:	3304      	adds	r3, #4
 800736e:	3415      	adds	r4, #21
 8007370:	42a5      	cmp	r5, r4
 8007372:	bf38      	it	cc
 8007374:	2304      	movcc	r3, #4
 8007376:	4419      	add	r1, r3
 8007378:	4473      	add	r3, lr
 800737a:	469e      	mov	lr, r3
 800737c:	460d      	mov	r5, r1
 800737e:	4565      	cmp	r5, ip
 8007380:	d30e      	bcc.n	80073a0 <__mdiff+0xe8>
 8007382:	f10c 0203 	add.w	r2, ip, #3
 8007386:	1a52      	subs	r2, r2, r1
 8007388:	f022 0203 	bic.w	r2, r2, #3
 800738c:	3903      	subs	r1, #3
 800738e:	458c      	cmp	ip, r1
 8007390:	bf38      	it	cc
 8007392:	2200      	movcc	r2, #0
 8007394:	441a      	add	r2, r3
 8007396:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800739a:	b17b      	cbz	r3, 80073bc <__mdiff+0x104>
 800739c:	6106      	str	r6, [r0, #16]
 800739e:	e7a5      	b.n	80072ec <__mdiff+0x34>
 80073a0:	f855 8b04 	ldr.w	r8, [r5], #4
 80073a4:	fa17 f488 	uxtah	r4, r7, r8
 80073a8:	1422      	asrs	r2, r4, #16
 80073aa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80073ae:	b2a4      	uxth	r4, r4
 80073b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80073b4:	f84e 4b04 	str.w	r4, [lr], #4
 80073b8:	1417      	asrs	r7, r2, #16
 80073ba:	e7e0      	b.n	800737e <__mdiff+0xc6>
 80073bc:	3e01      	subs	r6, #1
 80073be:	e7ea      	b.n	8007396 <__mdiff+0xde>
 80073c0:	0800859b 	.word	0x0800859b
 80073c4:	080085ac 	.word	0x080085ac

080073c8 <__d2b>:
 80073c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80073cc:	4689      	mov	r9, r1
 80073ce:	2101      	movs	r1, #1
 80073d0:	ec57 6b10 	vmov	r6, r7, d0
 80073d4:	4690      	mov	r8, r2
 80073d6:	f7ff fcd5 	bl	8006d84 <_Balloc>
 80073da:	4604      	mov	r4, r0
 80073dc:	b930      	cbnz	r0, 80073ec <__d2b+0x24>
 80073de:	4602      	mov	r2, r0
 80073e0:	4b25      	ldr	r3, [pc, #148]	; (8007478 <__d2b+0xb0>)
 80073e2:	4826      	ldr	r0, [pc, #152]	; (800747c <__d2b+0xb4>)
 80073e4:	f240 310a 	movw	r1, #778	; 0x30a
 80073e8:	f000 fa70 	bl	80078cc <__assert_func>
 80073ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80073f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80073f4:	bb35      	cbnz	r5, 8007444 <__d2b+0x7c>
 80073f6:	2e00      	cmp	r6, #0
 80073f8:	9301      	str	r3, [sp, #4]
 80073fa:	d028      	beq.n	800744e <__d2b+0x86>
 80073fc:	4668      	mov	r0, sp
 80073fe:	9600      	str	r6, [sp, #0]
 8007400:	f7ff fd8c 	bl	8006f1c <__lo0bits>
 8007404:	9900      	ldr	r1, [sp, #0]
 8007406:	b300      	cbz	r0, 800744a <__d2b+0x82>
 8007408:	9a01      	ldr	r2, [sp, #4]
 800740a:	f1c0 0320 	rsb	r3, r0, #32
 800740e:	fa02 f303 	lsl.w	r3, r2, r3
 8007412:	430b      	orrs	r3, r1
 8007414:	40c2      	lsrs	r2, r0
 8007416:	6163      	str	r3, [r4, #20]
 8007418:	9201      	str	r2, [sp, #4]
 800741a:	9b01      	ldr	r3, [sp, #4]
 800741c:	61a3      	str	r3, [r4, #24]
 800741e:	2b00      	cmp	r3, #0
 8007420:	bf14      	ite	ne
 8007422:	2202      	movne	r2, #2
 8007424:	2201      	moveq	r2, #1
 8007426:	6122      	str	r2, [r4, #16]
 8007428:	b1d5      	cbz	r5, 8007460 <__d2b+0x98>
 800742a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800742e:	4405      	add	r5, r0
 8007430:	f8c9 5000 	str.w	r5, [r9]
 8007434:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007438:	f8c8 0000 	str.w	r0, [r8]
 800743c:	4620      	mov	r0, r4
 800743e:	b003      	add	sp, #12
 8007440:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007444:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007448:	e7d5      	b.n	80073f6 <__d2b+0x2e>
 800744a:	6161      	str	r1, [r4, #20]
 800744c:	e7e5      	b.n	800741a <__d2b+0x52>
 800744e:	a801      	add	r0, sp, #4
 8007450:	f7ff fd64 	bl	8006f1c <__lo0bits>
 8007454:	9b01      	ldr	r3, [sp, #4]
 8007456:	6163      	str	r3, [r4, #20]
 8007458:	2201      	movs	r2, #1
 800745a:	6122      	str	r2, [r4, #16]
 800745c:	3020      	adds	r0, #32
 800745e:	e7e3      	b.n	8007428 <__d2b+0x60>
 8007460:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007464:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007468:	f8c9 0000 	str.w	r0, [r9]
 800746c:	6918      	ldr	r0, [r3, #16]
 800746e:	f7ff fd35 	bl	8006edc <__hi0bits>
 8007472:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007476:	e7df      	b.n	8007438 <__d2b+0x70>
 8007478:	0800859b 	.word	0x0800859b
 800747c:	080085ac 	.word	0x080085ac

08007480 <_calloc_r>:
 8007480:	b513      	push	{r0, r1, r4, lr}
 8007482:	434a      	muls	r2, r1
 8007484:	4611      	mov	r1, r2
 8007486:	9201      	str	r2, [sp, #4]
 8007488:	f000 f85a 	bl	8007540 <_malloc_r>
 800748c:	4604      	mov	r4, r0
 800748e:	b118      	cbz	r0, 8007498 <_calloc_r+0x18>
 8007490:	9a01      	ldr	r2, [sp, #4]
 8007492:	2100      	movs	r1, #0
 8007494:	f7fe f93c 	bl	8005710 <memset>
 8007498:	4620      	mov	r0, r4
 800749a:	b002      	add	sp, #8
 800749c:	bd10      	pop	{r4, pc}
	...

080074a0 <_free_r>:
 80074a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074a2:	2900      	cmp	r1, #0
 80074a4:	d048      	beq.n	8007538 <_free_r+0x98>
 80074a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074aa:	9001      	str	r0, [sp, #4]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f1a1 0404 	sub.w	r4, r1, #4
 80074b2:	bfb8      	it	lt
 80074b4:	18e4      	addlt	r4, r4, r3
 80074b6:	f000 fa65 	bl	8007984 <__malloc_lock>
 80074ba:	4a20      	ldr	r2, [pc, #128]	; (800753c <_free_r+0x9c>)
 80074bc:	9801      	ldr	r0, [sp, #4]
 80074be:	6813      	ldr	r3, [r2, #0]
 80074c0:	4615      	mov	r5, r2
 80074c2:	b933      	cbnz	r3, 80074d2 <_free_r+0x32>
 80074c4:	6063      	str	r3, [r4, #4]
 80074c6:	6014      	str	r4, [r2, #0]
 80074c8:	b003      	add	sp, #12
 80074ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074ce:	f000 ba5f 	b.w	8007990 <__malloc_unlock>
 80074d2:	42a3      	cmp	r3, r4
 80074d4:	d90b      	bls.n	80074ee <_free_r+0x4e>
 80074d6:	6821      	ldr	r1, [r4, #0]
 80074d8:	1862      	adds	r2, r4, r1
 80074da:	4293      	cmp	r3, r2
 80074dc:	bf04      	itt	eq
 80074de:	681a      	ldreq	r2, [r3, #0]
 80074e0:	685b      	ldreq	r3, [r3, #4]
 80074e2:	6063      	str	r3, [r4, #4]
 80074e4:	bf04      	itt	eq
 80074e6:	1852      	addeq	r2, r2, r1
 80074e8:	6022      	streq	r2, [r4, #0]
 80074ea:	602c      	str	r4, [r5, #0]
 80074ec:	e7ec      	b.n	80074c8 <_free_r+0x28>
 80074ee:	461a      	mov	r2, r3
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	b10b      	cbz	r3, 80074f8 <_free_r+0x58>
 80074f4:	42a3      	cmp	r3, r4
 80074f6:	d9fa      	bls.n	80074ee <_free_r+0x4e>
 80074f8:	6811      	ldr	r1, [r2, #0]
 80074fa:	1855      	adds	r5, r2, r1
 80074fc:	42a5      	cmp	r5, r4
 80074fe:	d10b      	bne.n	8007518 <_free_r+0x78>
 8007500:	6824      	ldr	r4, [r4, #0]
 8007502:	4421      	add	r1, r4
 8007504:	1854      	adds	r4, r2, r1
 8007506:	42a3      	cmp	r3, r4
 8007508:	6011      	str	r1, [r2, #0]
 800750a:	d1dd      	bne.n	80074c8 <_free_r+0x28>
 800750c:	681c      	ldr	r4, [r3, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	6053      	str	r3, [r2, #4]
 8007512:	4421      	add	r1, r4
 8007514:	6011      	str	r1, [r2, #0]
 8007516:	e7d7      	b.n	80074c8 <_free_r+0x28>
 8007518:	d902      	bls.n	8007520 <_free_r+0x80>
 800751a:	230c      	movs	r3, #12
 800751c:	6003      	str	r3, [r0, #0]
 800751e:	e7d3      	b.n	80074c8 <_free_r+0x28>
 8007520:	6825      	ldr	r5, [r4, #0]
 8007522:	1961      	adds	r1, r4, r5
 8007524:	428b      	cmp	r3, r1
 8007526:	bf04      	itt	eq
 8007528:	6819      	ldreq	r1, [r3, #0]
 800752a:	685b      	ldreq	r3, [r3, #4]
 800752c:	6063      	str	r3, [r4, #4]
 800752e:	bf04      	itt	eq
 8007530:	1949      	addeq	r1, r1, r5
 8007532:	6021      	streq	r1, [r4, #0]
 8007534:	6054      	str	r4, [r2, #4]
 8007536:	e7c7      	b.n	80074c8 <_free_r+0x28>
 8007538:	b003      	add	sp, #12
 800753a:	bd30      	pop	{r4, r5, pc}
 800753c:	20000264 	.word	0x20000264

08007540 <_malloc_r>:
 8007540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007542:	1ccd      	adds	r5, r1, #3
 8007544:	f025 0503 	bic.w	r5, r5, #3
 8007548:	3508      	adds	r5, #8
 800754a:	2d0c      	cmp	r5, #12
 800754c:	bf38      	it	cc
 800754e:	250c      	movcc	r5, #12
 8007550:	2d00      	cmp	r5, #0
 8007552:	4606      	mov	r6, r0
 8007554:	db01      	blt.n	800755a <_malloc_r+0x1a>
 8007556:	42a9      	cmp	r1, r5
 8007558:	d903      	bls.n	8007562 <_malloc_r+0x22>
 800755a:	230c      	movs	r3, #12
 800755c:	6033      	str	r3, [r6, #0]
 800755e:	2000      	movs	r0, #0
 8007560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007562:	f000 fa0f 	bl	8007984 <__malloc_lock>
 8007566:	4921      	ldr	r1, [pc, #132]	; (80075ec <_malloc_r+0xac>)
 8007568:	680a      	ldr	r2, [r1, #0]
 800756a:	4614      	mov	r4, r2
 800756c:	b99c      	cbnz	r4, 8007596 <_malloc_r+0x56>
 800756e:	4f20      	ldr	r7, [pc, #128]	; (80075f0 <_malloc_r+0xb0>)
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	b923      	cbnz	r3, 800757e <_malloc_r+0x3e>
 8007574:	4621      	mov	r1, r4
 8007576:	4630      	mov	r0, r6
 8007578:	f000 f998 	bl	80078ac <_sbrk_r>
 800757c:	6038      	str	r0, [r7, #0]
 800757e:	4629      	mov	r1, r5
 8007580:	4630      	mov	r0, r6
 8007582:	f000 f993 	bl	80078ac <_sbrk_r>
 8007586:	1c43      	adds	r3, r0, #1
 8007588:	d123      	bne.n	80075d2 <_malloc_r+0x92>
 800758a:	230c      	movs	r3, #12
 800758c:	6033      	str	r3, [r6, #0]
 800758e:	4630      	mov	r0, r6
 8007590:	f000 f9fe 	bl	8007990 <__malloc_unlock>
 8007594:	e7e3      	b.n	800755e <_malloc_r+0x1e>
 8007596:	6823      	ldr	r3, [r4, #0]
 8007598:	1b5b      	subs	r3, r3, r5
 800759a:	d417      	bmi.n	80075cc <_malloc_r+0x8c>
 800759c:	2b0b      	cmp	r3, #11
 800759e:	d903      	bls.n	80075a8 <_malloc_r+0x68>
 80075a0:	6023      	str	r3, [r4, #0]
 80075a2:	441c      	add	r4, r3
 80075a4:	6025      	str	r5, [r4, #0]
 80075a6:	e004      	b.n	80075b2 <_malloc_r+0x72>
 80075a8:	6863      	ldr	r3, [r4, #4]
 80075aa:	42a2      	cmp	r2, r4
 80075ac:	bf0c      	ite	eq
 80075ae:	600b      	streq	r3, [r1, #0]
 80075b0:	6053      	strne	r3, [r2, #4]
 80075b2:	4630      	mov	r0, r6
 80075b4:	f000 f9ec 	bl	8007990 <__malloc_unlock>
 80075b8:	f104 000b 	add.w	r0, r4, #11
 80075bc:	1d23      	adds	r3, r4, #4
 80075be:	f020 0007 	bic.w	r0, r0, #7
 80075c2:	1ac2      	subs	r2, r0, r3
 80075c4:	d0cc      	beq.n	8007560 <_malloc_r+0x20>
 80075c6:	1a1b      	subs	r3, r3, r0
 80075c8:	50a3      	str	r3, [r4, r2]
 80075ca:	e7c9      	b.n	8007560 <_malloc_r+0x20>
 80075cc:	4622      	mov	r2, r4
 80075ce:	6864      	ldr	r4, [r4, #4]
 80075d0:	e7cc      	b.n	800756c <_malloc_r+0x2c>
 80075d2:	1cc4      	adds	r4, r0, #3
 80075d4:	f024 0403 	bic.w	r4, r4, #3
 80075d8:	42a0      	cmp	r0, r4
 80075da:	d0e3      	beq.n	80075a4 <_malloc_r+0x64>
 80075dc:	1a21      	subs	r1, r4, r0
 80075de:	4630      	mov	r0, r6
 80075e0:	f000 f964 	bl	80078ac <_sbrk_r>
 80075e4:	3001      	adds	r0, #1
 80075e6:	d1dd      	bne.n	80075a4 <_malloc_r+0x64>
 80075e8:	e7cf      	b.n	800758a <_malloc_r+0x4a>
 80075ea:	bf00      	nop
 80075ec:	20000264 	.word	0x20000264
 80075f0:	20000268 	.word	0x20000268

080075f4 <__ssputs_r>:
 80075f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075f8:	688e      	ldr	r6, [r1, #8]
 80075fa:	429e      	cmp	r6, r3
 80075fc:	4682      	mov	sl, r0
 80075fe:	460c      	mov	r4, r1
 8007600:	4690      	mov	r8, r2
 8007602:	461f      	mov	r7, r3
 8007604:	d838      	bhi.n	8007678 <__ssputs_r+0x84>
 8007606:	898a      	ldrh	r2, [r1, #12]
 8007608:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800760c:	d032      	beq.n	8007674 <__ssputs_r+0x80>
 800760e:	6825      	ldr	r5, [r4, #0]
 8007610:	6909      	ldr	r1, [r1, #16]
 8007612:	eba5 0901 	sub.w	r9, r5, r1
 8007616:	6965      	ldr	r5, [r4, #20]
 8007618:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800761c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007620:	3301      	adds	r3, #1
 8007622:	444b      	add	r3, r9
 8007624:	106d      	asrs	r5, r5, #1
 8007626:	429d      	cmp	r5, r3
 8007628:	bf38      	it	cc
 800762a:	461d      	movcc	r5, r3
 800762c:	0553      	lsls	r3, r2, #21
 800762e:	d531      	bpl.n	8007694 <__ssputs_r+0xa0>
 8007630:	4629      	mov	r1, r5
 8007632:	f7ff ff85 	bl	8007540 <_malloc_r>
 8007636:	4606      	mov	r6, r0
 8007638:	b950      	cbnz	r0, 8007650 <__ssputs_r+0x5c>
 800763a:	230c      	movs	r3, #12
 800763c:	f8ca 3000 	str.w	r3, [sl]
 8007640:	89a3      	ldrh	r3, [r4, #12]
 8007642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007646:	81a3      	strh	r3, [r4, #12]
 8007648:	f04f 30ff 	mov.w	r0, #4294967295
 800764c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007650:	6921      	ldr	r1, [r4, #16]
 8007652:	464a      	mov	r2, r9
 8007654:	f7ff fb88 	bl	8006d68 <memcpy>
 8007658:	89a3      	ldrh	r3, [r4, #12]
 800765a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800765e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007662:	81a3      	strh	r3, [r4, #12]
 8007664:	6126      	str	r6, [r4, #16]
 8007666:	6165      	str	r5, [r4, #20]
 8007668:	444e      	add	r6, r9
 800766a:	eba5 0509 	sub.w	r5, r5, r9
 800766e:	6026      	str	r6, [r4, #0]
 8007670:	60a5      	str	r5, [r4, #8]
 8007672:	463e      	mov	r6, r7
 8007674:	42be      	cmp	r6, r7
 8007676:	d900      	bls.n	800767a <__ssputs_r+0x86>
 8007678:	463e      	mov	r6, r7
 800767a:	4632      	mov	r2, r6
 800767c:	6820      	ldr	r0, [r4, #0]
 800767e:	4641      	mov	r1, r8
 8007680:	f000 f966 	bl	8007950 <memmove>
 8007684:	68a3      	ldr	r3, [r4, #8]
 8007686:	6822      	ldr	r2, [r4, #0]
 8007688:	1b9b      	subs	r3, r3, r6
 800768a:	4432      	add	r2, r6
 800768c:	60a3      	str	r3, [r4, #8]
 800768e:	6022      	str	r2, [r4, #0]
 8007690:	2000      	movs	r0, #0
 8007692:	e7db      	b.n	800764c <__ssputs_r+0x58>
 8007694:	462a      	mov	r2, r5
 8007696:	f000 f981 	bl	800799c <_realloc_r>
 800769a:	4606      	mov	r6, r0
 800769c:	2800      	cmp	r0, #0
 800769e:	d1e1      	bne.n	8007664 <__ssputs_r+0x70>
 80076a0:	6921      	ldr	r1, [r4, #16]
 80076a2:	4650      	mov	r0, sl
 80076a4:	f7ff fefc 	bl	80074a0 <_free_r>
 80076a8:	e7c7      	b.n	800763a <__ssputs_r+0x46>
	...

080076ac <_svfiprintf_r>:
 80076ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b0:	4698      	mov	r8, r3
 80076b2:	898b      	ldrh	r3, [r1, #12]
 80076b4:	061b      	lsls	r3, r3, #24
 80076b6:	b09d      	sub	sp, #116	; 0x74
 80076b8:	4607      	mov	r7, r0
 80076ba:	460d      	mov	r5, r1
 80076bc:	4614      	mov	r4, r2
 80076be:	d50e      	bpl.n	80076de <_svfiprintf_r+0x32>
 80076c0:	690b      	ldr	r3, [r1, #16]
 80076c2:	b963      	cbnz	r3, 80076de <_svfiprintf_r+0x32>
 80076c4:	2140      	movs	r1, #64	; 0x40
 80076c6:	f7ff ff3b 	bl	8007540 <_malloc_r>
 80076ca:	6028      	str	r0, [r5, #0]
 80076cc:	6128      	str	r0, [r5, #16]
 80076ce:	b920      	cbnz	r0, 80076da <_svfiprintf_r+0x2e>
 80076d0:	230c      	movs	r3, #12
 80076d2:	603b      	str	r3, [r7, #0]
 80076d4:	f04f 30ff 	mov.w	r0, #4294967295
 80076d8:	e0d1      	b.n	800787e <_svfiprintf_r+0x1d2>
 80076da:	2340      	movs	r3, #64	; 0x40
 80076dc:	616b      	str	r3, [r5, #20]
 80076de:	2300      	movs	r3, #0
 80076e0:	9309      	str	r3, [sp, #36]	; 0x24
 80076e2:	2320      	movs	r3, #32
 80076e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80076ec:	2330      	movs	r3, #48	; 0x30
 80076ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007898 <_svfiprintf_r+0x1ec>
 80076f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076f6:	f04f 0901 	mov.w	r9, #1
 80076fa:	4623      	mov	r3, r4
 80076fc:	469a      	mov	sl, r3
 80076fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007702:	b10a      	cbz	r2, 8007708 <_svfiprintf_r+0x5c>
 8007704:	2a25      	cmp	r2, #37	; 0x25
 8007706:	d1f9      	bne.n	80076fc <_svfiprintf_r+0x50>
 8007708:	ebba 0b04 	subs.w	fp, sl, r4
 800770c:	d00b      	beq.n	8007726 <_svfiprintf_r+0x7a>
 800770e:	465b      	mov	r3, fp
 8007710:	4622      	mov	r2, r4
 8007712:	4629      	mov	r1, r5
 8007714:	4638      	mov	r0, r7
 8007716:	f7ff ff6d 	bl	80075f4 <__ssputs_r>
 800771a:	3001      	adds	r0, #1
 800771c:	f000 80aa 	beq.w	8007874 <_svfiprintf_r+0x1c8>
 8007720:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007722:	445a      	add	r2, fp
 8007724:	9209      	str	r2, [sp, #36]	; 0x24
 8007726:	f89a 3000 	ldrb.w	r3, [sl]
 800772a:	2b00      	cmp	r3, #0
 800772c:	f000 80a2 	beq.w	8007874 <_svfiprintf_r+0x1c8>
 8007730:	2300      	movs	r3, #0
 8007732:	f04f 32ff 	mov.w	r2, #4294967295
 8007736:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800773a:	f10a 0a01 	add.w	sl, sl, #1
 800773e:	9304      	str	r3, [sp, #16]
 8007740:	9307      	str	r3, [sp, #28]
 8007742:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007746:	931a      	str	r3, [sp, #104]	; 0x68
 8007748:	4654      	mov	r4, sl
 800774a:	2205      	movs	r2, #5
 800774c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007750:	4851      	ldr	r0, [pc, #324]	; (8007898 <_svfiprintf_r+0x1ec>)
 8007752:	f7f8 fd65 	bl	8000220 <memchr>
 8007756:	9a04      	ldr	r2, [sp, #16]
 8007758:	b9d8      	cbnz	r0, 8007792 <_svfiprintf_r+0xe6>
 800775a:	06d0      	lsls	r0, r2, #27
 800775c:	bf44      	itt	mi
 800775e:	2320      	movmi	r3, #32
 8007760:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007764:	0711      	lsls	r1, r2, #28
 8007766:	bf44      	itt	mi
 8007768:	232b      	movmi	r3, #43	; 0x2b
 800776a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800776e:	f89a 3000 	ldrb.w	r3, [sl]
 8007772:	2b2a      	cmp	r3, #42	; 0x2a
 8007774:	d015      	beq.n	80077a2 <_svfiprintf_r+0xf6>
 8007776:	9a07      	ldr	r2, [sp, #28]
 8007778:	4654      	mov	r4, sl
 800777a:	2000      	movs	r0, #0
 800777c:	f04f 0c0a 	mov.w	ip, #10
 8007780:	4621      	mov	r1, r4
 8007782:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007786:	3b30      	subs	r3, #48	; 0x30
 8007788:	2b09      	cmp	r3, #9
 800778a:	d94e      	bls.n	800782a <_svfiprintf_r+0x17e>
 800778c:	b1b0      	cbz	r0, 80077bc <_svfiprintf_r+0x110>
 800778e:	9207      	str	r2, [sp, #28]
 8007790:	e014      	b.n	80077bc <_svfiprintf_r+0x110>
 8007792:	eba0 0308 	sub.w	r3, r0, r8
 8007796:	fa09 f303 	lsl.w	r3, r9, r3
 800779a:	4313      	orrs	r3, r2
 800779c:	9304      	str	r3, [sp, #16]
 800779e:	46a2      	mov	sl, r4
 80077a0:	e7d2      	b.n	8007748 <_svfiprintf_r+0x9c>
 80077a2:	9b03      	ldr	r3, [sp, #12]
 80077a4:	1d19      	adds	r1, r3, #4
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	9103      	str	r1, [sp, #12]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	bfbb      	ittet	lt
 80077ae:	425b      	neglt	r3, r3
 80077b0:	f042 0202 	orrlt.w	r2, r2, #2
 80077b4:	9307      	strge	r3, [sp, #28]
 80077b6:	9307      	strlt	r3, [sp, #28]
 80077b8:	bfb8      	it	lt
 80077ba:	9204      	strlt	r2, [sp, #16]
 80077bc:	7823      	ldrb	r3, [r4, #0]
 80077be:	2b2e      	cmp	r3, #46	; 0x2e
 80077c0:	d10c      	bne.n	80077dc <_svfiprintf_r+0x130>
 80077c2:	7863      	ldrb	r3, [r4, #1]
 80077c4:	2b2a      	cmp	r3, #42	; 0x2a
 80077c6:	d135      	bne.n	8007834 <_svfiprintf_r+0x188>
 80077c8:	9b03      	ldr	r3, [sp, #12]
 80077ca:	1d1a      	adds	r2, r3, #4
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	9203      	str	r2, [sp, #12]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	bfb8      	it	lt
 80077d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80077d8:	3402      	adds	r4, #2
 80077da:	9305      	str	r3, [sp, #20]
 80077dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80078a8 <_svfiprintf_r+0x1fc>
 80077e0:	7821      	ldrb	r1, [r4, #0]
 80077e2:	2203      	movs	r2, #3
 80077e4:	4650      	mov	r0, sl
 80077e6:	f7f8 fd1b 	bl	8000220 <memchr>
 80077ea:	b140      	cbz	r0, 80077fe <_svfiprintf_r+0x152>
 80077ec:	2340      	movs	r3, #64	; 0x40
 80077ee:	eba0 000a 	sub.w	r0, r0, sl
 80077f2:	fa03 f000 	lsl.w	r0, r3, r0
 80077f6:	9b04      	ldr	r3, [sp, #16]
 80077f8:	4303      	orrs	r3, r0
 80077fa:	3401      	adds	r4, #1
 80077fc:	9304      	str	r3, [sp, #16]
 80077fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007802:	4826      	ldr	r0, [pc, #152]	; (800789c <_svfiprintf_r+0x1f0>)
 8007804:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007808:	2206      	movs	r2, #6
 800780a:	f7f8 fd09 	bl	8000220 <memchr>
 800780e:	2800      	cmp	r0, #0
 8007810:	d038      	beq.n	8007884 <_svfiprintf_r+0x1d8>
 8007812:	4b23      	ldr	r3, [pc, #140]	; (80078a0 <_svfiprintf_r+0x1f4>)
 8007814:	bb1b      	cbnz	r3, 800785e <_svfiprintf_r+0x1b2>
 8007816:	9b03      	ldr	r3, [sp, #12]
 8007818:	3307      	adds	r3, #7
 800781a:	f023 0307 	bic.w	r3, r3, #7
 800781e:	3308      	adds	r3, #8
 8007820:	9303      	str	r3, [sp, #12]
 8007822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007824:	4433      	add	r3, r6
 8007826:	9309      	str	r3, [sp, #36]	; 0x24
 8007828:	e767      	b.n	80076fa <_svfiprintf_r+0x4e>
 800782a:	fb0c 3202 	mla	r2, ip, r2, r3
 800782e:	460c      	mov	r4, r1
 8007830:	2001      	movs	r0, #1
 8007832:	e7a5      	b.n	8007780 <_svfiprintf_r+0xd4>
 8007834:	2300      	movs	r3, #0
 8007836:	3401      	adds	r4, #1
 8007838:	9305      	str	r3, [sp, #20]
 800783a:	4619      	mov	r1, r3
 800783c:	f04f 0c0a 	mov.w	ip, #10
 8007840:	4620      	mov	r0, r4
 8007842:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007846:	3a30      	subs	r2, #48	; 0x30
 8007848:	2a09      	cmp	r2, #9
 800784a:	d903      	bls.n	8007854 <_svfiprintf_r+0x1a8>
 800784c:	2b00      	cmp	r3, #0
 800784e:	d0c5      	beq.n	80077dc <_svfiprintf_r+0x130>
 8007850:	9105      	str	r1, [sp, #20]
 8007852:	e7c3      	b.n	80077dc <_svfiprintf_r+0x130>
 8007854:	fb0c 2101 	mla	r1, ip, r1, r2
 8007858:	4604      	mov	r4, r0
 800785a:	2301      	movs	r3, #1
 800785c:	e7f0      	b.n	8007840 <_svfiprintf_r+0x194>
 800785e:	ab03      	add	r3, sp, #12
 8007860:	9300      	str	r3, [sp, #0]
 8007862:	462a      	mov	r2, r5
 8007864:	4b0f      	ldr	r3, [pc, #60]	; (80078a4 <_svfiprintf_r+0x1f8>)
 8007866:	a904      	add	r1, sp, #16
 8007868:	4638      	mov	r0, r7
 800786a:	f7fd fff9 	bl	8005860 <_printf_float>
 800786e:	1c42      	adds	r2, r0, #1
 8007870:	4606      	mov	r6, r0
 8007872:	d1d6      	bne.n	8007822 <_svfiprintf_r+0x176>
 8007874:	89ab      	ldrh	r3, [r5, #12]
 8007876:	065b      	lsls	r3, r3, #25
 8007878:	f53f af2c 	bmi.w	80076d4 <_svfiprintf_r+0x28>
 800787c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800787e:	b01d      	add	sp, #116	; 0x74
 8007880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007884:	ab03      	add	r3, sp, #12
 8007886:	9300      	str	r3, [sp, #0]
 8007888:	462a      	mov	r2, r5
 800788a:	4b06      	ldr	r3, [pc, #24]	; (80078a4 <_svfiprintf_r+0x1f8>)
 800788c:	a904      	add	r1, sp, #16
 800788e:	4638      	mov	r0, r7
 8007890:	f7fe fa8a 	bl	8005da8 <_printf_i>
 8007894:	e7eb      	b.n	800786e <_svfiprintf_r+0x1c2>
 8007896:	bf00      	nop
 8007898:	0800870c 	.word	0x0800870c
 800789c:	08008716 	.word	0x08008716
 80078a0:	08005861 	.word	0x08005861
 80078a4:	080075f5 	.word	0x080075f5
 80078a8:	08008712 	.word	0x08008712

080078ac <_sbrk_r>:
 80078ac:	b538      	push	{r3, r4, r5, lr}
 80078ae:	4d06      	ldr	r5, [pc, #24]	; (80078c8 <_sbrk_r+0x1c>)
 80078b0:	2300      	movs	r3, #0
 80078b2:	4604      	mov	r4, r0
 80078b4:	4608      	mov	r0, r1
 80078b6:	602b      	str	r3, [r5, #0]
 80078b8:	f7fa fc78 	bl	80021ac <_sbrk>
 80078bc:	1c43      	adds	r3, r0, #1
 80078be:	d102      	bne.n	80078c6 <_sbrk_r+0x1a>
 80078c0:	682b      	ldr	r3, [r5, #0]
 80078c2:	b103      	cbz	r3, 80078c6 <_sbrk_r+0x1a>
 80078c4:	6023      	str	r3, [r4, #0]
 80078c6:	bd38      	pop	{r3, r4, r5, pc}
 80078c8:	20000794 	.word	0x20000794

080078cc <__assert_func>:
 80078cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078ce:	4614      	mov	r4, r2
 80078d0:	461a      	mov	r2, r3
 80078d2:	4b09      	ldr	r3, [pc, #36]	; (80078f8 <__assert_func+0x2c>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4605      	mov	r5, r0
 80078d8:	68d8      	ldr	r0, [r3, #12]
 80078da:	b14c      	cbz	r4, 80078f0 <__assert_func+0x24>
 80078dc:	4b07      	ldr	r3, [pc, #28]	; (80078fc <__assert_func+0x30>)
 80078de:	9100      	str	r1, [sp, #0]
 80078e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80078e4:	4906      	ldr	r1, [pc, #24]	; (8007900 <__assert_func+0x34>)
 80078e6:	462b      	mov	r3, r5
 80078e8:	f000 f80e 	bl	8007908 <fiprintf>
 80078ec:	f000 faa4 	bl	8007e38 <abort>
 80078f0:	4b04      	ldr	r3, [pc, #16]	; (8007904 <__assert_func+0x38>)
 80078f2:	461c      	mov	r4, r3
 80078f4:	e7f3      	b.n	80078de <__assert_func+0x12>
 80078f6:	bf00      	nop
 80078f8:	20000010 	.word	0x20000010
 80078fc:	0800871d 	.word	0x0800871d
 8007900:	0800872a 	.word	0x0800872a
 8007904:	08008758 	.word	0x08008758

08007908 <fiprintf>:
 8007908:	b40e      	push	{r1, r2, r3}
 800790a:	b503      	push	{r0, r1, lr}
 800790c:	4601      	mov	r1, r0
 800790e:	ab03      	add	r3, sp, #12
 8007910:	4805      	ldr	r0, [pc, #20]	; (8007928 <fiprintf+0x20>)
 8007912:	f853 2b04 	ldr.w	r2, [r3], #4
 8007916:	6800      	ldr	r0, [r0, #0]
 8007918:	9301      	str	r3, [sp, #4]
 800791a:	f000 f88f 	bl	8007a3c <_vfiprintf_r>
 800791e:	b002      	add	sp, #8
 8007920:	f85d eb04 	ldr.w	lr, [sp], #4
 8007924:	b003      	add	sp, #12
 8007926:	4770      	bx	lr
 8007928:	20000010 	.word	0x20000010

0800792c <__ascii_mbtowc>:
 800792c:	b082      	sub	sp, #8
 800792e:	b901      	cbnz	r1, 8007932 <__ascii_mbtowc+0x6>
 8007930:	a901      	add	r1, sp, #4
 8007932:	b142      	cbz	r2, 8007946 <__ascii_mbtowc+0x1a>
 8007934:	b14b      	cbz	r3, 800794a <__ascii_mbtowc+0x1e>
 8007936:	7813      	ldrb	r3, [r2, #0]
 8007938:	600b      	str	r3, [r1, #0]
 800793a:	7812      	ldrb	r2, [r2, #0]
 800793c:	1e10      	subs	r0, r2, #0
 800793e:	bf18      	it	ne
 8007940:	2001      	movne	r0, #1
 8007942:	b002      	add	sp, #8
 8007944:	4770      	bx	lr
 8007946:	4610      	mov	r0, r2
 8007948:	e7fb      	b.n	8007942 <__ascii_mbtowc+0x16>
 800794a:	f06f 0001 	mvn.w	r0, #1
 800794e:	e7f8      	b.n	8007942 <__ascii_mbtowc+0x16>

08007950 <memmove>:
 8007950:	4288      	cmp	r0, r1
 8007952:	b510      	push	{r4, lr}
 8007954:	eb01 0402 	add.w	r4, r1, r2
 8007958:	d902      	bls.n	8007960 <memmove+0x10>
 800795a:	4284      	cmp	r4, r0
 800795c:	4623      	mov	r3, r4
 800795e:	d807      	bhi.n	8007970 <memmove+0x20>
 8007960:	1e43      	subs	r3, r0, #1
 8007962:	42a1      	cmp	r1, r4
 8007964:	d008      	beq.n	8007978 <memmove+0x28>
 8007966:	f811 2b01 	ldrb.w	r2, [r1], #1
 800796a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800796e:	e7f8      	b.n	8007962 <memmove+0x12>
 8007970:	4402      	add	r2, r0
 8007972:	4601      	mov	r1, r0
 8007974:	428a      	cmp	r2, r1
 8007976:	d100      	bne.n	800797a <memmove+0x2a>
 8007978:	bd10      	pop	{r4, pc}
 800797a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800797e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007982:	e7f7      	b.n	8007974 <memmove+0x24>

08007984 <__malloc_lock>:
 8007984:	4801      	ldr	r0, [pc, #4]	; (800798c <__malloc_lock+0x8>)
 8007986:	f000 bc17 	b.w	80081b8 <__retarget_lock_acquire_recursive>
 800798a:	bf00      	nop
 800798c:	2000079c 	.word	0x2000079c

08007990 <__malloc_unlock>:
 8007990:	4801      	ldr	r0, [pc, #4]	; (8007998 <__malloc_unlock+0x8>)
 8007992:	f000 bc12 	b.w	80081ba <__retarget_lock_release_recursive>
 8007996:	bf00      	nop
 8007998:	2000079c 	.word	0x2000079c

0800799c <_realloc_r>:
 800799c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800799e:	4607      	mov	r7, r0
 80079a0:	4614      	mov	r4, r2
 80079a2:	460e      	mov	r6, r1
 80079a4:	b921      	cbnz	r1, 80079b0 <_realloc_r+0x14>
 80079a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80079aa:	4611      	mov	r1, r2
 80079ac:	f7ff bdc8 	b.w	8007540 <_malloc_r>
 80079b0:	b922      	cbnz	r2, 80079bc <_realloc_r+0x20>
 80079b2:	f7ff fd75 	bl	80074a0 <_free_r>
 80079b6:	4625      	mov	r5, r4
 80079b8:	4628      	mov	r0, r5
 80079ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079bc:	f000 fc62 	bl	8008284 <_malloc_usable_size_r>
 80079c0:	42a0      	cmp	r0, r4
 80079c2:	d20f      	bcs.n	80079e4 <_realloc_r+0x48>
 80079c4:	4621      	mov	r1, r4
 80079c6:	4638      	mov	r0, r7
 80079c8:	f7ff fdba 	bl	8007540 <_malloc_r>
 80079cc:	4605      	mov	r5, r0
 80079ce:	2800      	cmp	r0, #0
 80079d0:	d0f2      	beq.n	80079b8 <_realloc_r+0x1c>
 80079d2:	4631      	mov	r1, r6
 80079d4:	4622      	mov	r2, r4
 80079d6:	f7ff f9c7 	bl	8006d68 <memcpy>
 80079da:	4631      	mov	r1, r6
 80079dc:	4638      	mov	r0, r7
 80079de:	f7ff fd5f 	bl	80074a0 <_free_r>
 80079e2:	e7e9      	b.n	80079b8 <_realloc_r+0x1c>
 80079e4:	4635      	mov	r5, r6
 80079e6:	e7e7      	b.n	80079b8 <_realloc_r+0x1c>

080079e8 <__sfputc_r>:
 80079e8:	6893      	ldr	r3, [r2, #8]
 80079ea:	3b01      	subs	r3, #1
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	b410      	push	{r4}
 80079f0:	6093      	str	r3, [r2, #8]
 80079f2:	da08      	bge.n	8007a06 <__sfputc_r+0x1e>
 80079f4:	6994      	ldr	r4, [r2, #24]
 80079f6:	42a3      	cmp	r3, r4
 80079f8:	db01      	blt.n	80079fe <__sfputc_r+0x16>
 80079fa:	290a      	cmp	r1, #10
 80079fc:	d103      	bne.n	8007a06 <__sfputc_r+0x1e>
 80079fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a02:	f000 b94b 	b.w	8007c9c <__swbuf_r>
 8007a06:	6813      	ldr	r3, [r2, #0]
 8007a08:	1c58      	adds	r0, r3, #1
 8007a0a:	6010      	str	r0, [r2, #0]
 8007a0c:	7019      	strb	r1, [r3, #0]
 8007a0e:	4608      	mov	r0, r1
 8007a10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a14:	4770      	bx	lr

08007a16 <__sfputs_r>:
 8007a16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a18:	4606      	mov	r6, r0
 8007a1a:	460f      	mov	r7, r1
 8007a1c:	4614      	mov	r4, r2
 8007a1e:	18d5      	adds	r5, r2, r3
 8007a20:	42ac      	cmp	r4, r5
 8007a22:	d101      	bne.n	8007a28 <__sfputs_r+0x12>
 8007a24:	2000      	movs	r0, #0
 8007a26:	e007      	b.n	8007a38 <__sfputs_r+0x22>
 8007a28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a2c:	463a      	mov	r2, r7
 8007a2e:	4630      	mov	r0, r6
 8007a30:	f7ff ffda 	bl	80079e8 <__sfputc_r>
 8007a34:	1c43      	adds	r3, r0, #1
 8007a36:	d1f3      	bne.n	8007a20 <__sfputs_r+0xa>
 8007a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a3c <_vfiprintf_r>:
 8007a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a40:	460d      	mov	r5, r1
 8007a42:	b09d      	sub	sp, #116	; 0x74
 8007a44:	4614      	mov	r4, r2
 8007a46:	4698      	mov	r8, r3
 8007a48:	4606      	mov	r6, r0
 8007a4a:	b118      	cbz	r0, 8007a54 <_vfiprintf_r+0x18>
 8007a4c:	6983      	ldr	r3, [r0, #24]
 8007a4e:	b90b      	cbnz	r3, 8007a54 <_vfiprintf_r+0x18>
 8007a50:	f000 fb14 	bl	800807c <__sinit>
 8007a54:	4b89      	ldr	r3, [pc, #548]	; (8007c7c <_vfiprintf_r+0x240>)
 8007a56:	429d      	cmp	r5, r3
 8007a58:	d11b      	bne.n	8007a92 <_vfiprintf_r+0x56>
 8007a5a:	6875      	ldr	r5, [r6, #4]
 8007a5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a5e:	07d9      	lsls	r1, r3, #31
 8007a60:	d405      	bmi.n	8007a6e <_vfiprintf_r+0x32>
 8007a62:	89ab      	ldrh	r3, [r5, #12]
 8007a64:	059a      	lsls	r2, r3, #22
 8007a66:	d402      	bmi.n	8007a6e <_vfiprintf_r+0x32>
 8007a68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a6a:	f000 fba5 	bl	80081b8 <__retarget_lock_acquire_recursive>
 8007a6e:	89ab      	ldrh	r3, [r5, #12]
 8007a70:	071b      	lsls	r3, r3, #28
 8007a72:	d501      	bpl.n	8007a78 <_vfiprintf_r+0x3c>
 8007a74:	692b      	ldr	r3, [r5, #16]
 8007a76:	b9eb      	cbnz	r3, 8007ab4 <_vfiprintf_r+0x78>
 8007a78:	4629      	mov	r1, r5
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	f000 f96e 	bl	8007d5c <__swsetup_r>
 8007a80:	b1c0      	cbz	r0, 8007ab4 <_vfiprintf_r+0x78>
 8007a82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a84:	07dc      	lsls	r4, r3, #31
 8007a86:	d50e      	bpl.n	8007aa6 <_vfiprintf_r+0x6a>
 8007a88:	f04f 30ff 	mov.w	r0, #4294967295
 8007a8c:	b01d      	add	sp, #116	; 0x74
 8007a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a92:	4b7b      	ldr	r3, [pc, #492]	; (8007c80 <_vfiprintf_r+0x244>)
 8007a94:	429d      	cmp	r5, r3
 8007a96:	d101      	bne.n	8007a9c <_vfiprintf_r+0x60>
 8007a98:	68b5      	ldr	r5, [r6, #8]
 8007a9a:	e7df      	b.n	8007a5c <_vfiprintf_r+0x20>
 8007a9c:	4b79      	ldr	r3, [pc, #484]	; (8007c84 <_vfiprintf_r+0x248>)
 8007a9e:	429d      	cmp	r5, r3
 8007aa0:	bf08      	it	eq
 8007aa2:	68f5      	ldreq	r5, [r6, #12]
 8007aa4:	e7da      	b.n	8007a5c <_vfiprintf_r+0x20>
 8007aa6:	89ab      	ldrh	r3, [r5, #12]
 8007aa8:	0598      	lsls	r0, r3, #22
 8007aaa:	d4ed      	bmi.n	8007a88 <_vfiprintf_r+0x4c>
 8007aac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007aae:	f000 fb84 	bl	80081ba <__retarget_lock_release_recursive>
 8007ab2:	e7e9      	b.n	8007a88 <_vfiprintf_r+0x4c>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ab8:	2320      	movs	r3, #32
 8007aba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007abe:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ac2:	2330      	movs	r3, #48	; 0x30
 8007ac4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007c88 <_vfiprintf_r+0x24c>
 8007ac8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007acc:	f04f 0901 	mov.w	r9, #1
 8007ad0:	4623      	mov	r3, r4
 8007ad2:	469a      	mov	sl, r3
 8007ad4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ad8:	b10a      	cbz	r2, 8007ade <_vfiprintf_r+0xa2>
 8007ada:	2a25      	cmp	r2, #37	; 0x25
 8007adc:	d1f9      	bne.n	8007ad2 <_vfiprintf_r+0x96>
 8007ade:	ebba 0b04 	subs.w	fp, sl, r4
 8007ae2:	d00b      	beq.n	8007afc <_vfiprintf_r+0xc0>
 8007ae4:	465b      	mov	r3, fp
 8007ae6:	4622      	mov	r2, r4
 8007ae8:	4629      	mov	r1, r5
 8007aea:	4630      	mov	r0, r6
 8007aec:	f7ff ff93 	bl	8007a16 <__sfputs_r>
 8007af0:	3001      	adds	r0, #1
 8007af2:	f000 80aa 	beq.w	8007c4a <_vfiprintf_r+0x20e>
 8007af6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007af8:	445a      	add	r2, fp
 8007afa:	9209      	str	r2, [sp, #36]	; 0x24
 8007afc:	f89a 3000 	ldrb.w	r3, [sl]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f000 80a2 	beq.w	8007c4a <_vfiprintf_r+0x20e>
 8007b06:	2300      	movs	r3, #0
 8007b08:	f04f 32ff 	mov.w	r2, #4294967295
 8007b0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b10:	f10a 0a01 	add.w	sl, sl, #1
 8007b14:	9304      	str	r3, [sp, #16]
 8007b16:	9307      	str	r3, [sp, #28]
 8007b18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b1c:	931a      	str	r3, [sp, #104]	; 0x68
 8007b1e:	4654      	mov	r4, sl
 8007b20:	2205      	movs	r2, #5
 8007b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b26:	4858      	ldr	r0, [pc, #352]	; (8007c88 <_vfiprintf_r+0x24c>)
 8007b28:	f7f8 fb7a 	bl	8000220 <memchr>
 8007b2c:	9a04      	ldr	r2, [sp, #16]
 8007b2e:	b9d8      	cbnz	r0, 8007b68 <_vfiprintf_r+0x12c>
 8007b30:	06d1      	lsls	r1, r2, #27
 8007b32:	bf44      	itt	mi
 8007b34:	2320      	movmi	r3, #32
 8007b36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b3a:	0713      	lsls	r3, r2, #28
 8007b3c:	bf44      	itt	mi
 8007b3e:	232b      	movmi	r3, #43	; 0x2b
 8007b40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b44:	f89a 3000 	ldrb.w	r3, [sl]
 8007b48:	2b2a      	cmp	r3, #42	; 0x2a
 8007b4a:	d015      	beq.n	8007b78 <_vfiprintf_r+0x13c>
 8007b4c:	9a07      	ldr	r2, [sp, #28]
 8007b4e:	4654      	mov	r4, sl
 8007b50:	2000      	movs	r0, #0
 8007b52:	f04f 0c0a 	mov.w	ip, #10
 8007b56:	4621      	mov	r1, r4
 8007b58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b5c:	3b30      	subs	r3, #48	; 0x30
 8007b5e:	2b09      	cmp	r3, #9
 8007b60:	d94e      	bls.n	8007c00 <_vfiprintf_r+0x1c4>
 8007b62:	b1b0      	cbz	r0, 8007b92 <_vfiprintf_r+0x156>
 8007b64:	9207      	str	r2, [sp, #28]
 8007b66:	e014      	b.n	8007b92 <_vfiprintf_r+0x156>
 8007b68:	eba0 0308 	sub.w	r3, r0, r8
 8007b6c:	fa09 f303 	lsl.w	r3, r9, r3
 8007b70:	4313      	orrs	r3, r2
 8007b72:	9304      	str	r3, [sp, #16]
 8007b74:	46a2      	mov	sl, r4
 8007b76:	e7d2      	b.n	8007b1e <_vfiprintf_r+0xe2>
 8007b78:	9b03      	ldr	r3, [sp, #12]
 8007b7a:	1d19      	adds	r1, r3, #4
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	9103      	str	r1, [sp, #12]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	bfbb      	ittet	lt
 8007b84:	425b      	neglt	r3, r3
 8007b86:	f042 0202 	orrlt.w	r2, r2, #2
 8007b8a:	9307      	strge	r3, [sp, #28]
 8007b8c:	9307      	strlt	r3, [sp, #28]
 8007b8e:	bfb8      	it	lt
 8007b90:	9204      	strlt	r2, [sp, #16]
 8007b92:	7823      	ldrb	r3, [r4, #0]
 8007b94:	2b2e      	cmp	r3, #46	; 0x2e
 8007b96:	d10c      	bne.n	8007bb2 <_vfiprintf_r+0x176>
 8007b98:	7863      	ldrb	r3, [r4, #1]
 8007b9a:	2b2a      	cmp	r3, #42	; 0x2a
 8007b9c:	d135      	bne.n	8007c0a <_vfiprintf_r+0x1ce>
 8007b9e:	9b03      	ldr	r3, [sp, #12]
 8007ba0:	1d1a      	adds	r2, r3, #4
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	9203      	str	r2, [sp, #12]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	bfb8      	it	lt
 8007baa:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bae:	3402      	adds	r4, #2
 8007bb0:	9305      	str	r3, [sp, #20]
 8007bb2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007c98 <_vfiprintf_r+0x25c>
 8007bb6:	7821      	ldrb	r1, [r4, #0]
 8007bb8:	2203      	movs	r2, #3
 8007bba:	4650      	mov	r0, sl
 8007bbc:	f7f8 fb30 	bl	8000220 <memchr>
 8007bc0:	b140      	cbz	r0, 8007bd4 <_vfiprintf_r+0x198>
 8007bc2:	2340      	movs	r3, #64	; 0x40
 8007bc4:	eba0 000a 	sub.w	r0, r0, sl
 8007bc8:	fa03 f000 	lsl.w	r0, r3, r0
 8007bcc:	9b04      	ldr	r3, [sp, #16]
 8007bce:	4303      	orrs	r3, r0
 8007bd0:	3401      	adds	r4, #1
 8007bd2:	9304      	str	r3, [sp, #16]
 8007bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bd8:	482c      	ldr	r0, [pc, #176]	; (8007c8c <_vfiprintf_r+0x250>)
 8007bda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bde:	2206      	movs	r2, #6
 8007be0:	f7f8 fb1e 	bl	8000220 <memchr>
 8007be4:	2800      	cmp	r0, #0
 8007be6:	d03f      	beq.n	8007c68 <_vfiprintf_r+0x22c>
 8007be8:	4b29      	ldr	r3, [pc, #164]	; (8007c90 <_vfiprintf_r+0x254>)
 8007bea:	bb1b      	cbnz	r3, 8007c34 <_vfiprintf_r+0x1f8>
 8007bec:	9b03      	ldr	r3, [sp, #12]
 8007bee:	3307      	adds	r3, #7
 8007bf0:	f023 0307 	bic.w	r3, r3, #7
 8007bf4:	3308      	adds	r3, #8
 8007bf6:	9303      	str	r3, [sp, #12]
 8007bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bfa:	443b      	add	r3, r7
 8007bfc:	9309      	str	r3, [sp, #36]	; 0x24
 8007bfe:	e767      	b.n	8007ad0 <_vfiprintf_r+0x94>
 8007c00:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c04:	460c      	mov	r4, r1
 8007c06:	2001      	movs	r0, #1
 8007c08:	e7a5      	b.n	8007b56 <_vfiprintf_r+0x11a>
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	3401      	adds	r4, #1
 8007c0e:	9305      	str	r3, [sp, #20]
 8007c10:	4619      	mov	r1, r3
 8007c12:	f04f 0c0a 	mov.w	ip, #10
 8007c16:	4620      	mov	r0, r4
 8007c18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c1c:	3a30      	subs	r2, #48	; 0x30
 8007c1e:	2a09      	cmp	r2, #9
 8007c20:	d903      	bls.n	8007c2a <_vfiprintf_r+0x1ee>
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d0c5      	beq.n	8007bb2 <_vfiprintf_r+0x176>
 8007c26:	9105      	str	r1, [sp, #20]
 8007c28:	e7c3      	b.n	8007bb2 <_vfiprintf_r+0x176>
 8007c2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c2e:	4604      	mov	r4, r0
 8007c30:	2301      	movs	r3, #1
 8007c32:	e7f0      	b.n	8007c16 <_vfiprintf_r+0x1da>
 8007c34:	ab03      	add	r3, sp, #12
 8007c36:	9300      	str	r3, [sp, #0]
 8007c38:	462a      	mov	r2, r5
 8007c3a:	4b16      	ldr	r3, [pc, #88]	; (8007c94 <_vfiprintf_r+0x258>)
 8007c3c:	a904      	add	r1, sp, #16
 8007c3e:	4630      	mov	r0, r6
 8007c40:	f7fd fe0e 	bl	8005860 <_printf_float>
 8007c44:	4607      	mov	r7, r0
 8007c46:	1c78      	adds	r0, r7, #1
 8007c48:	d1d6      	bne.n	8007bf8 <_vfiprintf_r+0x1bc>
 8007c4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c4c:	07d9      	lsls	r1, r3, #31
 8007c4e:	d405      	bmi.n	8007c5c <_vfiprintf_r+0x220>
 8007c50:	89ab      	ldrh	r3, [r5, #12]
 8007c52:	059a      	lsls	r2, r3, #22
 8007c54:	d402      	bmi.n	8007c5c <_vfiprintf_r+0x220>
 8007c56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c58:	f000 faaf 	bl	80081ba <__retarget_lock_release_recursive>
 8007c5c:	89ab      	ldrh	r3, [r5, #12]
 8007c5e:	065b      	lsls	r3, r3, #25
 8007c60:	f53f af12 	bmi.w	8007a88 <_vfiprintf_r+0x4c>
 8007c64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c66:	e711      	b.n	8007a8c <_vfiprintf_r+0x50>
 8007c68:	ab03      	add	r3, sp, #12
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	462a      	mov	r2, r5
 8007c6e:	4b09      	ldr	r3, [pc, #36]	; (8007c94 <_vfiprintf_r+0x258>)
 8007c70:	a904      	add	r1, sp, #16
 8007c72:	4630      	mov	r0, r6
 8007c74:	f7fe f898 	bl	8005da8 <_printf_i>
 8007c78:	e7e4      	b.n	8007c44 <_vfiprintf_r+0x208>
 8007c7a:	bf00      	nop
 8007c7c:	08008884 	.word	0x08008884
 8007c80:	080088a4 	.word	0x080088a4
 8007c84:	08008864 	.word	0x08008864
 8007c88:	0800870c 	.word	0x0800870c
 8007c8c:	08008716 	.word	0x08008716
 8007c90:	08005861 	.word	0x08005861
 8007c94:	08007a17 	.word	0x08007a17
 8007c98:	08008712 	.word	0x08008712

08007c9c <__swbuf_r>:
 8007c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9e:	460e      	mov	r6, r1
 8007ca0:	4614      	mov	r4, r2
 8007ca2:	4605      	mov	r5, r0
 8007ca4:	b118      	cbz	r0, 8007cae <__swbuf_r+0x12>
 8007ca6:	6983      	ldr	r3, [r0, #24]
 8007ca8:	b90b      	cbnz	r3, 8007cae <__swbuf_r+0x12>
 8007caa:	f000 f9e7 	bl	800807c <__sinit>
 8007cae:	4b21      	ldr	r3, [pc, #132]	; (8007d34 <__swbuf_r+0x98>)
 8007cb0:	429c      	cmp	r4, r3
 8007cb2:	d12b      	bne.n	8007d0c <__swbuf_r+0x70>
 8007cb4:	686c      	ldr	r4, [r5, #4]
 8007cb6:	69a3      	ldr	r3, [r4, #24]
 8007cb8:	60a3      	str	r3, [r4, #8]
 8007cba:	89a3      	ldrh	r3, [r4, #12]
 8007cbc:	071a      	lsls	r2, r3, #28
 8007cbe:	d52f      	bpl.n	8007d20 <__swbuf_r+0x84>
 8007cc0:	6923      	ldr	r3, [r4, #16]
 8007cc2:	b36b      	cbz	r3, 8007d20 <__swbuf_r+0x84>
 8007cc4:	6923      	ldr	r3, [r4, #16]
 8007cc6:	6820      	ldr	r0, [r4, #0]
 8007cc8:	1ac0      	subs	r0, r0, r3
 8007cca:	6963      	ldr	r3, [r4, #20]
 8007ccc:	b2f6      	uxtb	r6, r6
 8007cce:	4283      	cmp	r3, r0
 8007cd0:	4637      	mov	r7, r6
 8007cd2:	dc04      	bgt.n	8007cde <__swbuf_r+0x42>
 8007cd4:	4621      	mov	r1, r4
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	f000 f93c 	bl	8007f54 <_fflush_r>
 8007cdc:	bb30      	cbnz	r0, 8007d2c <__swbuf_r+0x90>
 8007cde:	68a3      	ldr	r3, [r4, #8]
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	60a3      	str	r3, [r4, #8]
 8007ce4:	6823      	ldr	r3, [r4, #0]
 8007ce6:	1c5a      	adds	r2, r3, #1
 8007ce8:	6022      	str	r2, [r4, #0]
 8007cea:	701e      	strb	r6, [r3, #0]
 8007cec:	6963      	ldr	r3, [r4, #20]
 8007cee:	3001      	adds	r0, #1
 8007cf0:	4283      	cmp	r3, r0
 8007cf2:	d004      	beq.n	8007cfe <__swbuf_r+0x62>
 8007cf4:	89a3      	ldrh	r3, [r4, #12]
 8007cf6:	07db      	lsls	r3, r3, #31
 8007cf8:	d506      	bpl.n	8007d08 <__swbuf_r+0x6c>
 8007cfa:	2e0a      	cmp	r6, #10
 8007cfc:	d104      	bne.n	8007d08 <__swbuf_r+0x6c>
 8007cfe:	4621      	mov	r1, r4
 8007d00:	4628      	mov	r0, r5
 8007d02:	f000 f927 	bl	8007f54 <_fflush_r>
 8007d06:	b988      	cbnz	r0, 8007d2c <__swbuf_r+0x90>
 8007d08:	4638      	mov	r0, r7
 8007d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d0c:	4b0a      	ldr	r3, [pc, #40]	; (8007d38 <__swbuf_r+0x9c>)
 8007d0e:	429c      	cmp	r4, r3
 8007d10:	d101      	bne.n	8007d16 <__swbuf_r+0x7a>
 8007d12:	68ac      	ldr	r4, [r5, #8]
 8007d14:	e7cf      	b.n	8007cb6 <__swbuf_r+0x1a>
 8007d16:	4b09      	ldr	r3, [pc, #36]	; (8007d3c <__swbuf_r+0xa0>)
 8007d18:	429c      	cmp	r4, r3
 8007d1a:	bf08      	it	eq
 8007d1c:	68ec      	ldreq	r4, [r5, #12]
 8007d1e:	e7ca      	b.n	8007cb6 <__swbuf_r+0x1a>
 8007d20:	4621      	mov	r1, r4
 8007d22:	4628      	mov	r0, r5
 8007d24:	f000 f81a 	bl	8007d5c <__swsetup_r>
 8007d28:	2800      	cmp	r0, #0
 8007d2a:	d0cb      	beq.n	8007cc4 <__swbuf_r+0x28>
 8007d2c:	f04f 37ff 	mov.w	r7, #4294967295
 8007d30:	e7ea      	b.n	8007d08 <__swbuf_r+0x6c>
 8007d32:	bf00      	nop
 8007d34:	08008884 	.word	0x08008884
 8007d38:	080088a4 	.word	0x080088a4
 8007d3c:	08008864 	.word	0x08008864

08007d40 <__ascii_wctomb>:
 8007d40:	b149      	cbz	r1, 8007d56 <__ascii_wctomb+0x16>
 8007d42:	2aff      	cmp	r2, #255	; 0xff
 8007d44:	bf85      	ittet	hi
 8007d46:	238a      	movhi	r3, #138	; 0x8a
 8007d48:	6003      	strhi	r3, [r0, #0]
 8007d4a:	700a      	strbls	r2, [r1, #0]
 8007d4c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007d50:	bf98      	it	ls
 8007d52:	2001      	movls	r0, #1
 8007d54:	4770      	bx	lr
 8007d56:	4608      	mov	r0, r1
 8007d58:	4770      	bx	lr
	...

08007d5c <__swsetup_r>:
 8007d5c:	4b32      	ldr	r3, [pc, #200]	; (8007e28 <__swsetup_r+0xcc>)
 8007d5e:	b570      	push	{r4, r5, r6, lr}
 8007d60:	681d      	ldr	r5, [r3, #0]
 8007d62:	4606      	mov	r6, r0
 8007d64:	460c      	mov	r4, r1
 8007d66:	b125      	cbz	r5, 8007d72 <__swsetup_r+0x16>
 8007d68:	69ab      	ldr	r3, [r5, #24]
 8007d6a:	b913      	cbnz	r3, 8007d72 <__swsetup_r+0x16>
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	f000 f985 	bl	800807c <__sinit>
 8007d72:	4b2e      	ldr	r3, [pc, #184]	; (8007e2c <__swsetup_r+0xd0>)
 8007d74:	429c      	cmp	r4, r3
 8007d76:	d10f      	bne.n	8007d98 <__swsetup_r+0x3c>
 8007d78:	686c      	ldr	r4, [r5, #4]
 8007d7a:	89a3      	ldrh	r3, [r4, #12]
 8007d7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d80:	0719      	lsls	r1, r3, #28
 8007d82:	d42c      	bmi.n	8007dde <__swsetup_r+0x82>
 8007d84:	06dd      	lsls	r5, r3, #27
 8007d86:	d411      	bmi.n	8007dac <__swsetup_r+0x50>
 8007d88:	2309      	movs	r3, #9
 8007d8a:	6033      	str	r3, [r6, #0]
 8007d8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d90:	81a3      	strh	r3, [r4, #12]
 8007d92:	f04f 30ff 	mov.w	r0, #4294967295
 8007d96:	e03e      	b.n	8007e16 <__swsetup_r+0xba>
 8007d98:	4b25      	ldr	r3, [pc, #148]	; (8007e30 <__swsetup_r+0xd4>)
 8007d9a:	429c      	cmp	r4, r3
 8007d9c:	d101      	bne.n	8007da2 <__swsetup_r+0x46>
 8007d9e:	68ac      	ldr	r4, [r5, #8]
 8007da0:	e7eb      	b.n	8007d7a <__swsetup_r+0x1e>
 8007da2:	4b24      	ldr	r3, [pc, #144]	; (8007e34 <__swsetup_r+0xd8>)
 8007da4:	429c      	cmp	r4, r3
 8007da6:	bf08      	it	eq
 8007da8:	68ec      	ldreq	r4, [r5, #12]
 8007daa:	e7e6      	b.n	8007d7a <__swsetup_r+0x1e>
 8007dac:	0758      	lsls	r0, r3, #29
 8007dae:	d512      	bpl.n	8007dd6 <__swsetup_r+0x7a>
 8007db0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007db2:	b141      	cbz	r1, 8007dc6 <__swsetup_r+0x6a>
 8007db4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007db8:	4299      	cmp	r1, r3
 8007dba:	d002      	beq.n	8007dc2 <__swsetup_r+0x66>
 8007dbc:	4630      	mov	r0, r6
 8007dbe:	f7ff fb6f 	bl	80074a0 <_free_r>
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	6363      	str	r3, [r4, #52]	; 0x34
 8007dc6:	89a3      	ldrh	r3, [r4, #12]
 8007dc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007dcc:	81a3      	strh	r3, [r4, #12]
 8007dce:	2300      	movs	r3, #0
 8007dd0:	6063      	str	r3, [r4, #4]
 8007dd2:	6923      	ldr	r3, [r4, #16]
 8007dd4:	6023      	str	r3, [r4, #0]
 8007dd6:	89a3      	ldrh	r3, [r4, #12]
 8007dd8:	f043 0308 	orr.w	r3, r3, #8
 8007ddc:	81a3      	strh	r3, [r4, #12]
 8007dde:	6923      	ldr	r3, [r4, #16]
 8007de0:	b94b      	cbnz	r3, 8007df6 <__swsetup_r+0x9a>
 8007de2:	89a3      	ldrh	r3, [r4, #12]
 8007de4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dec:	d003      	beq.n	8007df6 <__swsetup_r+0x9a>
 8007dee:	4621      	mov	r1, r4
 8007df0:	4630      	mov	r0, r6
 8007df2:	f000 fa07 	bl	8008204 <__smakebuf_r>
 8007df6:	89a0      	ldrh	r0, [r4, #12]
 8007df8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007dfc:	f010 0301 	ands.w	r3, r0, #1
 8007e00:	d00a      	beq.n	8007e18 <__swsetup_r+0xbc>
 8007e02:	2300      	movs	r3, #0
 8007e04:	60a3      	str	r3, [r4, #8]
 8007e06:	6963      	ldr	r3, [r4, #20]
 8007e08:	425b      	negs	r3, r3
 8007e0a:	61a3      	str	r3, [r4, #24]
 8007e0c:	6923      	ldr	r3, [r4, #16]
 8007e0e:	b943      	cbnz	r3, 8007e22 <__swsetup_r+0xc6>
 8007e10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e14:	d1ba      	bne.n	8007d8c <__swsetup_r+0x30>
 8007e16:	bd70      	pop	{r4, r5, r6, pc}
 8007e18:	0781      	lsls	r1, r0, #30
 8007e1a:	bf58      	it	pl
 8007e1c:	6963      	ldrpl	r3, [r4, #20]
 8007e1e:	60a3      	str	r3, [r4, #8]
 8007e20:	e7f4      	b.n	8007e0c <__swsetup_r+0xb0>
 8007e22:	2000      	movs	r0, #0
 8007e24:	e7f7      	b.n	8007e16 <__swsetup_r+0xba>
 8007e26:	bf00      	nop
 8007e28:	20000010 	.word	0x20000010
 8007e2c:	08008884 	.word	0x08008884
 8007e30:	080088a4 	.word	0x080088a4
 8007e34:	08008864 	.word	0x08008864

08007e38 <abort>:
 8007e38:	b508      	push	{r3, lr}
 8007e3a:	2006      	movs	r0, #6
 8007e3c:	f000 fa52 	bl	80082e4 <raise>
 8007e40:	2001      	movs	r0, #1
 8007e42:	f7fa f93b 	bl	80020bc <_exit>
	...

08007e48 <__sflush_r>:
 8007e48:	898a      	ldrh	r2, [r1, #12]
 8007e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e4e:	4605      	mov	r5, r0
 8007e50:	0710      	lsls	r0, r2, #28
 8007e52:	460c      	mov	r4, r1
 8007e54:	d458      	bmi.n	8007f08 <__sflush_r+0xc0>
 8007e56:	684b      	ldr	r3, [r1, #4]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	dc05      	bgt.n	8007e68 <__sflush_r+0x20>
 8007e5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	dc02      	bgt.n	8007e68 <__sflush_r+0x20>
 8007e62:	2000      	movs	r0, #0
 8007e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e6a:	2e00      	cmp	r6, #0
 8007e6c:	d0f9      	beq.n	8007e62 <__sflush_r+0x1a>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e74:	682f      	ldr	r7, [r5, #0]
 8007e76:	602b      	str	r3, [r5, #0]
 8007e78:	d032      	beq.n	8007ee0 <__sflush_r+0x98>
 8007e7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e7c:	89a3      	ldrh	r3, [r4, #12]
 8007e7e:	075a      	lsls	r2, r3, #29
 8007e80:	d505      	bpl.n	8007e8e <__sflush_r+0x46>
 8007e82:	6863      	ldr	r3, [r4, #4]
 8007e84:	1ac0      	subs	r0, r0, r3
 8007e86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e88:	b10b      	cbz	r3, 8007e8e <__sflush_r+0x46>
 8007e8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e8c:	1ac0      	subs	r0, r0, r3
 8007e8e:	2300      	movs	r3, #0
 8007e90:	4602      	mov	r2, r0
 8007e92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e94:	6a21      	ldr	r1, [r4, #32]
 8007e96:	4628      	mov	r0, r5
 8007e98:	47b0      	blx	r6
 8007e9a:	1c43      	adds	r3, r0, #1
 8007e9c:	89a3      	ldrh	r3, [r4, #12]
 8007e9e:	d106      	bne.n	8007eae <__sflush_r+0x66>
 8007ea0:	6829      	ldr	r1, [r5, #0]
 8007ea2:	291d      	cmp	r1, #29
 8007ea4:	d82c      	bhi.n	8007f00 <__sflush_r+0xb8>
 8007ea6:	4a2a      	ldr	r2, [pc, #168]	; (8007f50 <__sflush_r+0x108>)
 8007ea8:	40ca      	lsrs	r2, r1
 8007eaa:	07d6      	lsls	r6, r2, #31
 8007eac:	d528      	bpl.n	8007f00 <__sflush_r+0xb8>
 8007eae:	2200      	movs	r2, #0
 8007eb0:	6062      	str	r2, [r4, #4]
 8007eb2:	04d9      	lsls	r1, r3, #19
 8007eb4:	6922      	ldr	r2, [r4, #16]
 8007eb6:	6022      	str	r2, [r4, #0]
 8007eb8:	d504      	bpl.n	8007ec4 <__sflush_r+0x7c>
 8007eba:	1c42      	adds	r2, r0, #1
 8007ebc:	d101      	bne.n	8007ec2 <__sflush_r+0x7a>
 8007ebe:	682b      	ldr	r3, [r5, #0]
 8007ec0:	b903      	cbnz	r3, 8007ec4 <__sflush_r+0x7c>
 8007ec2:	6560      	str	r0, [r4, #84]	; 0x54
 8007ec4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ec6:	602f      	str	r7, [r5, #0]
 8007ec8:	2900      	cmp	r1, #0
 8007eca:	d0ca      	beq.n	8007e62 <__sflush_r+0x1a>
 8007ecc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ed0:	4299      	cmp	r1, r3
 8007ed2:	d002      	beq.n	8007eda <__sflush_r+0x92>
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	f7ff fae3 	bl	80074a0 <_free_r>
 8007eda:	2000      	movs	r0, #0
 8007edc:	6360      	str	r0, [r4, #52]	; 0x34
 8007ede:	e7c1      	b.n	8007e64 <__sflush_r+0x1c>
 8007ee0:	6a21      	ldr	r1, [r4, #32]
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	47b0      	blx	r6
 8007ee8:	1c41      	adds	r1, r0, #1
 8007eea:	d1c7      	bne.n	8007e7c <__sflush_r+0x34>
 8007eec:	682b      	ldr	r3, [r5, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d0c4      	beq.n	8007e7c <__sflush_r+0x34>
 8007ef2:	2b1d      	cmp	r3, #29
 8007ef4:	d001      	beq.n	8007efa <__sflush_r+0xb2>
 8007ef6:	2b16      	cmp	r3, #22
 8007ef8:	d101      	bne.n	8007efe <__sflush_r+0xb6>
 8007efa:	602f      	str	r7, [r5, #0]
 8007efc:	e7b1      	b.n	8007e62 <__sflush_r+0x1a>
 8007efe:	89a3      	ldrh	r3, [r4, #12]
 8007f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f04:	81a3      	strh	r3, [r4, #12]
 8007f06:	e7ad      	b.n	8007e64 <__sflush_r+0x1c>
 8007f08:	690f      	ldr	r7, [r1, #16]
 8007f0a:	2f00      	cmp	r7, #0
 8007f0c:	d0a9      	beq.n	8007e62 <__sflush_r+0x1a>
 8007f0e:	0793      	lsls	r3, r2, #30
 8007f10:	680e      	ldr	r6, [r1, #0]
 8007f12:	bf08      	it	eq
 8007f14:	694b      	ldreq	r3, [r1, #20]
 8007f16:	600f      	str	r7, [r1, #0]
 8007f18:	bf18      	it	ne
 8007f1a:	2300      	movne	r3, #0
 8007f1c:	eba6 0807 	sub.w	r8, r6, r7
 8007f20:	608b      	str	r3, [r1, #8]
 8007f22:	f1b8 0f00 	cmp.w	r8, #0
 8007f26:	dd9c      	ble.n	8007e62 <__sflush_r+0x1a>
 8007f28:	6a21      	ldr	r1, [r4, #32]
 8007f2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f2c:	4643      	mov	r3, r8
 8007f2e:	463a      	mov	r2, r7
 8007f30:	4628      	mov	r0, r5
 8007f32:	47b0      	blx	r6
 8007f34:	2800      	cmp	r0, #0
 8007f36:	dc06      	bgt.n	8007f46 <__sflush_r+0xfe>
 8007f38:	89a3      	ldrh	r3, [r4, #12]
 8007f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f3e:	81a3      	strh	r3, [r4, #12]
 8007f40:	f04f 30ff 	mov.w	r0, #4294967295
 8007f44:	e78e      	b.n	8007e64 <__sflush_r+0x1c>
 8007f46:	4407      	add	r7, r0
 8007f48:	eba8 0800 	sub.w	r8, r8, r0
 8007f4c:	e7e9      	b.n	8007f22 <__sflush_r+0xda>
 8007f4e:	bf00      	nop
 8007f50:	20400001 	.word	0x20400001

08007f54 <_fflush_r>:
 8007f54:	b538      	push	{r3, r4, r5, lr}
 8007f56:	690b      	ldr	r3, [r1, #16]
 8007f58:	4605      	mov	r5, r0
 8007f5a:	460c      	mov	r4, r1
 8007f5c:	b913      	cbnz	r3, 8007f64 <_fflush_r+0x10>
 8007f5e:	2500      	movs	r5, #0
 8007f60:	4628      	mov	r0, r5
 8007f62:	bd38      	pop	{r3, r4, r5, pc}
 8007f64:	b118      	cbz	r0, 8007f6e <_fflush_r+0x1a>
 8007f66:	6983      	ldr	r3, [r0, #24]
 8007f68:	b90b      	cbnz	r3, 8007f6e <_fflush_r+0x1a>
 8007f6a:	f000 f887 	bl	800807c <__sinit>
 8007f6e:	4b14      	ldr	r3, [pc, #80]	; (8007fc0 <_fflush_r+0x6c>)
 8007f70:	429c      	cmp	r4, r3
 8007f72:	d11b      	bne.n	8007fac <_fflush_r+0x58>
 8007f74:	686c      	ldr	r4, [r5, #4]
 8007f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d0ef      	beq.n	8007f5e <_fflush_r+0xa>
 8007f7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f80:	07d0      	lsls	r0, r2, #31
 8007f82:	d404      	bmi.n	8007f8e <_fflush_r+0x3a>
 8007f84:	0599      	lsls	r1, r3, #22
 8007f86:	d402      	bmi.n	8007f8e <_fflush_r+0x3a>
 8007f88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f8a:	f000 f915 	bl	80081b8 <__retarget_lock_acquire_recursive>
 8007f8e:	4628      	mov	r0, r5
 8007f90:	4621      	mov	r1, r4
 8007f92:	f7ff ff59 	bl	8007e48 <__sflush_r>
 8007f96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f98:	07da      	lsls	r2, r3, #31
 8007f9a:	4605      	mov	r5, r0
 8007f9c:	d4e0      	bmi.n	8007f60 <_fflush_r+0xc>
 8007f9e:	89a3      	ldrh	r3, [r4, #12]
 8007fa0:	059b      	lsls	r3, r3, #22
 8007fa2:	d4dd      	bmi.n	8007f60 <_fflush_r+0xc>
 8007fa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fa6:	f000 f908 	bl	80081ba <__retarget_lock_release_recursive>
 8007faa:	e7d9      	b.n	8007f60 <_fflush_r+0xc>
 8007fac:	4b05      	ldr	r3, [pc, #20]	; (8007fc4 <_fflush_r+0x70>)
 8007fae:	429c      	cmp	r4, r3
 8007fb0:	d101      	bne.n	8007fb6 <_fflush_r+0x62>
 8007fb2:	68ac      	ldr	r4, [r5, #8]
 8007fb4:	e7df      	b.n	8007f76 <_fflush_r+0x22>
 8007fb6:	4b04      	ldr	r3, [pc, #16]	; (8007fc8 <_fflush_r+0x74>)
 8007fb8:	429c      	cmp	r4, r3
 8007fba:	bf08      	it	eq
 8007fbc:	68ec      	ldreq	r4, [r5, #12]
 8007fbe:	e7da      	b.n	8007f76 <_fflush_r+0x22>
 8007fc0:	08008884 	.word	0x08008884
 8007fc4:	080088a4 	.word	0x080088a4
 8007fc8:	08008864 	.word	0x08008864

08007fcc <std>:
 8007fcc:	2300      	movs	r3, #0
 8007fce:	b510      	push	{r4, lr}
 8007fd0:	4604      	mov	r4, r0
 8007fd2:	e9c0 3300 	strd	r3, r3, [r0]
 8007fd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fda:	6083      	str	r3, [r0, #8]
 8007fdc:	8181      	strh	r1, [r0, #12]
 8007fde:	6643      	str	r3, [r0, #100]	; 0x64
 8007fe0:	81c2      	strh	r2, [r0, #14]
 8007fe2:	6183      	str	r3, [r0, #24]
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	2208      	movs	r2, #8
 8007fe8:	305c      	adds	r0, #92	; 0x5c
 8007fea:	f7fd fb91 	bl	8005710 <memset>
 8007fee:	4b05      	ldr	r3, [pc, #20]	; (8008004 <std+0x38>)
 8007ff0:	6263      	str	r3, [r4, #36]	; 0x24
 8007ff2:	4b05      	ldr	r3, [pc, #20]	; (8008008 <std+0x3c>)
 8007ff4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ff6:	4b05      	ldr	r3, [pc, #20]	; (800800c <std+0x40>)
 8007ff8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ffa:	4b05      	ldr	r3, [pc, #20]	; (8008010 <std+0x44>)
 8007ffc:	6224      	str	r4, [r4, #32]
 8007ffe:	6323      	str	r3, [r4, #48]	; 0x30
 8008000:	bd10      	pop	{r4, pc}
 8008002:	bf00      	nop
 8008004:	0800831d 	.word	0x0800831d
 8008008:	0800833f 	.word	0x0800833f
 800800c:	08008377 	.word	0x08008377
 8008010:	0800839b 	.word	0x0800839b

08008014 <_cleanup_r>:
 8008014:	4901      	ldr	r1, [pc, #4]	; (800801c <_cleanup_r+0x8>)
 8008016:	f000 b8af 	b.w	8008178 <_fwalk_reent>
 800801a:	bf00      	nop
 800801c:	08007f55 	.word	0x08007f55

08008020 <__sfmoreglue>:
 8008020:	b570      	push	{r4, r5, r6, lr}
 8008022:	1e4a      	subs	r2, r1, #1
 8008024:	2568      	movs	r5, #104	; 0x68
 8008026:	4355      	muls	r5, r2
 8008028:	460e      	mov	r6, r1
 800802a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800802e:	f7ff fa87 	bl	8007540 <_malloc_r>
 8008032:	4604      	mov	r4, r0
 8008034:	b140      	cbz	r0, 8008048 <__sfmoreglue+0x28>
 8008036:	2100      	movs	r1, #0
 8008038:	e9c0 1600 	strd	r1, r6, [r0]
 800803c:	300c      	adds	r0, #12
 800803e:	60a0      	str	r0, [r4, #8]
 8008040:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008044:	f7fd fb64 	bl	8005710 <memset>
 8008048:	4620      	mov	r0, r4
 800804a:	bd70      	pop	{r4, r5, r6, pc}

0800804c <__sfp_lock_acquire>:
 800804c:	4801      	ldr	r0, [pc, #4]	; (8008054 <__sfp_lock_acquire+0x8>)
 800804e:	f000 b8b3 	b.w	80081b8 <__retarget_lock_acquire_recursive>
 8008052:	bf00      	nop
 8008054:	200007a0 	.word	0x200007a0

08008058 <__sfp_lock_release>:
 8008058:	4801      	ldr	r0, [pc, #4]	; (8008060 <__sfp_lock_release+0x8>)
 800805a:	f000 b8ae 	b.w	80081ba <__retarget_lock_release_recursive>
 800805e:	bf00      	nop
 8008060:	200007a0 	.word	0x200007a0

08008064 <__sinit_lock_acquire>:
 8008064:	4801      	ldr	r0, [pc, #4]	; (800806c <__sinit_lock_acquire+0x8>)
 8008066:	f000 b8a7 	b.w	80081b8 <__retarget_lock_acquire_recursive>
 800806a:	bf00      	nop
 800806c:	2000079b 	.word	0x2000079b

08008070 <__sinit_lock_release>:
 8008070:	4801      	ldr	r0, [pc, #4]	; (8008078 <__sinit_lock_release+0x8>)
 8008072:	f000 b8a2 	b.w	80081ba <__retarget_lock_release_recursive>
 8008076:	bf00      	nop
 8008078:	2000079b 	.word	0x2000079b

0800807c <__sinit>:
 800807c:	b510      	push	{r4, lr}
 800807e:	4604      	mov	r4, r0
 8008080:	f7ff fff0 	bl	8008064 <__sinit_lock_acquire>
 8008084:	69a3      	ldr	r3, [r4, #24]
 8008086:	b11b      	cbz	r3, 8008090 <__sinit+0x14>
 8008088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800808c:	f7ff bff0 	b.w	8008070 <__sinit_lock_release>
 8008090:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008094:	6523      	str	r3, [r4, #80]	; 0x50
 8008096:	4b13      	ldr	r3, [pc, #76]	; (80080e4 <__sinit+0x68>)
 8008098:	4a13      	ldr	r2, [pc, #76]	; (80080e8 <__sinit+0x6c>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	62a2      	str	r2, [r4, #40]	; 0x28
 800809e:	42a3      	cmp	r3, r4
 80080a0:	bf04      	itt	eq
 80080a2:	2301      	moveq	r3, #1
 80080a4:	61a3      	streq	r3, [r4, #24]
 80080a6:	4620      	mov	r0, r4
 80080a8:	f000 f820 	bl	80080ec <__sfp>
 80080ac:	6060      	str	r0, [r4, #4]
 80080ae:	4620      	mov	r0, r4
 80080b0:	f000 f81c 	bl	80080ec <__sfp>
 80080b4:	60a0      	str	r0, [r4, #8]
 80080b6:	4620      	mov	r0, r4
 80080b8:	f000 f818 	bl	80080ec <__sfp>
 80080bc:	2200      	movs	r2, #0
 80080be:	60e0      	str	r0, [r4, #12]
 80080c0:	2104      	movs	r1, #4
 80080c2:	6860      	ldr	r0, [r4, #4]
 80080c4:	f7ff ff82 	bl	8007fcc <std>
 80080c8:	68a0      	ldr	r0, [r4, #8]
 80080ca:	2201      	movs	r2, #1
 80080cc:	2109      	movs	r1, #9
 80080ce:	f7ff ff7d 	bl	8007fcc <std>
 80080d2:	68e0      	ldr	r0, [r4, #12]
 80080d4:	2202      	movs	r2, #2
 80080d6:	2112      	movs	r1, #18
 80080d8:	f7ff ff78 	bl	8007fcc <std>
 80080dc:	2301      	movs	r3, #1
 80080de:	61a3      	str	r3, [r4, #24]
 80080e0:	e7d2      	b.n	8008088 <__sinit+0xc>
 80080e2:	bf00      	nop
 80080e4:	080084e0 	.word	0x080084e0
 80080e8:	08008015 	.word	0x08008015

080080ec <__sfp>:
 80080ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ee:	4607      	mov	r7, r0
 80080f0:	f7ff ffac 	bl	800804c <__sfp_lock_acquire>
 80080f4:	4b1e      	ldr	r3, [pc, #120]	; (8008170 <__sfp+0x84>)
 80080f6:	681e      	ldr	r6, [r3, #0]
 80080f8:	69b3      	ldr	r3, [r6, #24]
 80080fa:	b913      	cbnz	r3, 8008102 <__sfp+0x16>
 80080fc:	4630      	mov	r0, r6
 80080fe:	f7ff ffbd 	bl	800807c <__sinit>
 8008102:	3648      	adds	r6, #72	; 0x48
 8008104:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008108:	3b01      	subs	r3, #1
 800810a:	d503      	bpl.n	8008114 <__sfp+0x28>
 800810c:	6833      	ldr	r3, [r6, #0]
 800810e:	b30b      	cbz	r3, 8008154 <__sfp+0x68>
 8008110:	6836      	ldr	r6, [r6, #0]
 8008112:	e7f7      	b.n	8008104 <__sfp+0x18>
 8008114:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008118:	b9d5      	cbnz	r5, 8008150 <__sfp+0x64>
 800811a:	4b16      	ldr	r3, [pc, #88]	; (8008174 <__sfp+0x88>)
 800811c:	60e3      	str	r3, [r4, #12]
 800811e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008122:	6665      	str	r5, [r4, #100]	; 0x64
 8008124:	f000 f847 	bl	80081b6 <__retarget_lock_init_recursive>
 8008128:	f7ff ff96 	bl	8008058 <__sfp_lock_release>
 800812c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008130:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008134:	6025      	str	r5, [r4, #0]
 8008136:	61a5      	str	r5, [r4, #24]
 8008138:	2208      	movs	r2, #8
 800813a:	4629      	mov	r1, r5
 800813c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008140:	f7fd fae6 	bl	8005710 <memset>
 8008144:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008148:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800814c:	4620      	mov	r0, r4
 800814e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008150:	3468      	adds	r4, #104	; 0x68
 8008152:	e7d9      	b.n	8008108 <__sfp+0x1c>
 8008154:	2104      	movs	r1, #4
 8008156:	4638      	mov	r0, r7
 8008158:	f7ff ff62 	bl	8008020 <__sfmoreglue>
 800815c:	4604      	mov	r4, r0
 800815e:	6030      	str	r0, [r6, #0]
 8008160:	2800      	cmp	r0, #0
 8008162:	d1d5      	bne.n	8008110 <__sfp+0x24>
 8008164:	f7ff ff78 	bl	8008058 <__sfp_lock_release>
 8008168:	230c      	movs	r3, #12
 800816a:	603b      	str	r3, [r7, #0]
 800816c:	e7ee      	b.n	800814c <__sfp+0x60>
 800816e:	bf00      	nop
 8008170:	080084e0 	.word	0x080084e0
 8008174:	ffff0001 	.word	0xffff0001

08008178 <_fwalk_reent>:
 8008178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800817c:	4606      	mov	r6, r0
 800817e:	4688      	mov	r8, r1
 8008180:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008184:	2700      	movs	r7, #0
 8008186:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800818a:	f1b9 0901 	subs.w	r9, r9, #1
 800818e:	d505      	bpl.n	800819c <_fwalk_reent+0x24>
 8008190:	6824      	ldr	r4, [r4, #0]
 8008192:	2c00      	cmp	r4, #0
 8008194:	d1f7      	bne.n	8008186 <_fwalk_reent+0xe>
 8008196:	4638      	mov	r0, r7
 8008198:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800819c:	89ab      	ldrh	r3, [r5, #12]
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d907      	bls.n	80081b2 <_fwalk_reent+0x3a>
 80081a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081a6:	3301      	adds	r3, #1
 80081a8:	d003      	beq.n	80081b2 <_fwalk_reent+0x3a>
 80081aa:	4629      	mov	r1, r5
 80081ac:	4630      	mov	r0, r6
 80081ae:	47c0      	blx	r8
 80081b0:	4307      	orrs	r7, r0
 80081b2:	3568      	adds	r5, #104	; 0x68
 80081b4:	e7e9      	b.n	800818a <_fwalk_reent+0x12>

080081b6 <__retarget_lock_init_recursive>:
 80081b6:	4770      	bx	lr

080081b8 <__retarget_lock_acquire_recursive>:
 80081b8:	4770      	bx	lr

080081ba <__retarget_lock_release_recursive>:
 80081ba:	4770      	bx	lr

080081bc <__swhatbuf_r>:
 80081bc:	b570      	push	{r4, r5, r6, lr}
 80081be:	460e      	mov	r6, r1
 80081c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081c4:	2900      	cmp	r1, #0
 80081c6:	b096      	sub	sp, #88	; 0x58
 80081c8:	4614      	mov	r4, r2
 80081ca:	461d      	mov	r5, r3
 80081cc:	da07      	bge.n	80081de <__swhatbuf_r+0x22>
 80081ce:	2300      	movs	r3, #0
 80081d0:	602b      	str	r3, [r5, #0]
 80081d2:	89b3      	ldrh	r3, [r6, #12]
 80081d4:	061a      	lsls	r2, r3, #24
 80081d6:	d410      	bmi.n	80081fa <__swhatbuf_r+0x3e>
 80081d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081dc:	e00e      	b.n	80081fc <__swhatbuf_r+0x40>
 80081de:	466a      	mov	r2, sp
 80081e0:	f000 f902 	bl	80083e8 <_fstat_r>
 80081e4:	2800      	cmp	r0, #0
 80081e6:	dbf2      	blt.n	80081ce <__swhatbuf_r+0x12>
 80081e8:	9a01      	ldr	r2, [sp, #4]
 80081ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80081ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80081f2:	425a      	negs	r2, r3
 80081f4:	415a      	adcs	r2, r3
 80081f6:	602a      	str	r2, [r5, #0]
 80081f8:	e7ee      	b.n	80081d8 <__swhatbuf_r+0x1c>
 80081fa:	2340      	movs	r3, #64	; 0x40
 80081fc:	2000      	movs	r0, #0
 80081fe:	6023      	str	r3, [r4, #0]
 8008200:	b016      	add	sp, #88	; 0x58
 8008202:	bd70      	pop	{r4, r5, r6, pc}

08008204 <__smakebuf_r>:
 8008204:	898b      	ldrh	r3, [r1, #12]
 8008206:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008208:	079d      	lsls	r5, r3, #30
 800820a:	4606      	mov	r6, r0
 800820c:	460c      	mov	r4, r1
 800820e:	d507      	bpl.n	8008220 <__smakebuf_r+0x1c>
 8008210:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008214:	6023      	str	r3, [r4, #0]
 8008216:	6123      	str	r3, [r4, #16]
 8008218:	2301      	movs	r3, #1
 800821a:	6163      	str	r3, [r4, #20]
 800821c:	b002      	add	sp, #8
 800821e:	bd70      	pop	{r4, r5, r6, pc}
 8008220:	ab01      	add	r3, sp, #4
 8008222:	466a      	mov	r2, sp
 8008224:	f7ff ffca 	bl	80081bc <__swhatbuf_r>
 8008228:	9900      	ldr	r1, [sp, #0]
 800822a:	4605      	mov	r5, r0
 800822c:	4630      	mov	r0, r6
 800822e:	f7ff f987 	bl	8007540 <_malloc_r>
 8008232:	b948      	cbnz	r0, 8008248 <__smakebuf_r+0x44>
 8008234:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008238:	059a      	lsls	r2, r3, #22
 800823a:	d4ef      	bmi.n	800821c <__smakebuf_r+0x18>
 800823c:	f023 0303 	bic.w	r3, r3, #3
 8008240:	f043 0302 	orr.w	r3, r3, #2
 8008244:	81a3      	strh	r3, [r4, #12]
 8008246:	e7e3      	b.n	8008210 <__smakebuf_r+0xc>
 8008248:	4b0d      	ldr	r3, [pc, #52]	; (8008280 <__smakebuf_r+0x7c>)
 800824a:	62b3      	str	r3, [r6, #40]	; 0x28
 800824c:	89a3      	ldrh	r3, [r4, #12]
 800824e:	6020      	str	r0, [r4, #0]
 8008250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008254:	81a3      	strh	r3, [r4, #12]
 8008256:	9b00      	ldr	r3, [sp, #0]
 8008258:	6163      	str	r3, [r4, #20]
 800825a:	9b01      	ldr	r3, [sp, #4]
 800825c:	6120      	str	r0, [r4, #16]
 800825e:	b15b      	cbz	r3, 8008278 <__smakebuf_r+0x74>
 8008260:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008264:	4630      	mov	r0, r6
 8008266:	f000 f8d1 	bl	800840c <_isatty_r>
 800826a:	b128      	cbz	r0, 8008278 <__smakebuf_r+0x74>
 800826c:	89a3      	ldrh	r3, [r4, #12]
 800826e:	f023 0303 	bic.w	r3, r3, #3
 8008272:	f043 0301 	orr.w	r3, r3, #1
 8008276:	81a3      	strh	r3, [r4, #12]
 8008278:	89a0      	ldrh	r0, [r4, #12]
 800827a:	4305      	orrs	r5, r0
 800827c:	81a5      	strh	r5, [r4, #12]
 800827e:	e7cd      	b.n	800821c <__smakebuf_r+0x18>
 8008280:	08008015 	.word	0x08008015

08008284 <_malloc_usable_size_r>:
 8008284:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008288:	1f18      	subs	r0, r3, #4
 800828a:	2b00      	cmp	r3, #0
 800828c:	bfbc      	itt	lt
 800828e:	580b      	ldrlt	r3, [r1, r0]
 8008290:	18c0      	addlt	r0, r0, r3
 8008292:	4770      	bx	lr

08008294 <_raise_r>:
 8008294:	291f      	cmp	r1, #31
 8008296:	b538      	push	{r3, r4, r5, lr}
 8008298:	4604      	mov	r4, r0
 800829a:	460d      	mov	r5, r1
 800829c:	d904      	bls.n	80082a8 <_raise_r+0x14>
 800829e:	2316      	movs	r3, #22
 80082a0:	6003      	str	r3, [r0, #0]
 80082a2:	f04f 30ff 	mov.w	r0, #4294967295
 80082a6:	bd38      	pop	{r3, r4, r5, pc}
 80082a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80082aa:	b112      	cbz	r2, 80082b2 <_raise_r+0x1e>
 80082ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80082b0:	b94b      	cbnz	r3, 80082c6 <_raise_r+0x32>
 80082b2:	4620      	mov	r0, r4
 80082b4:	f000 f830 	bl	8008318 <_getpid_r>
 80082b8:	462a      	mov	r2, r5
 80082ba:	4601      	mov	r1, r0
 80082bc:	4620      	mov	r0, r4
 80082be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082c2:	f000 b817 	b.w	80082f4 <_kill_r>
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d00a      	beq.n	80082e0 <_raise_r+0x4c>
 80082ca:	1c59      	adds	r1, r3, #1
 80082cc:	d103      	bne.n	80082d6 <_raise_r+0x42>
 80082ce:	2316      	movs	r3, #22
 80082d0:	6003      	str	r3, [r0, #0]
 80082d2:	2001      	movs	r0, #1
 80082d4:	e7e7      	b.n	80082a6 <_raise_r+0x12>
 80082d6:	2400      	movs	r4, #0
 80082d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80082dc:	4628      	mov	r0, r5
 80082de:	4798      	blx	r3
 80082e0:	2000      	movs	r0, #0
 80082e2:	e7e0      	b.n	80082a6 <_raise_r+0x12>

080082e4 <raise>:
 80082e4:	4b02      	ldr	r3, [pc, #8]	; (80082f0 <raise+0xc>)
 80082e6:	4601      	mov	r1, r0
 80082e8:	6818      	ldr	r0, [r3, #0]
 80082ea:	f7ff bfd3 	b.w	8008294 <_raise_r>
 80082ee:	bf00      	nop
 80082f0:	20000010 	.word	0x20000010

080082f4 <_kill_r>:
 80082f4:	b538      	push	{r3, r4, r5, lr}
 80082f6:	4d07      	ldr	r5, [pc, #28]	; (8008314 <_kill_r+0x20>)
 80082f8:	2300      	movs	r3, #0
 80082fa:	4604      	mov	r4, r0
 80082fc:	4608      	mov	r0, r1
 80082fe:	4611      	mov	r1, r2
 8008300:	602b      	str	r3, [r5, #0]
 8008302:	f7f9 fecb 	bl	800209c <_kill>
 8008306:	1c43      	adds	r3, r0, #1
 8008308:	d102      	bne.n	8008310 <_kill_r+0x1c>
 800830a:	682b      	ldr	r3, [r5, #0]
 800830c:	b103      	cbz	r3, 8008310 <_kill_r+0x1c>
 800830e:	6023      	str	r3, [r4, #0]
 8008310:	bd38      	pop	{r3, r4, r5, pc}
 8008312:	bf00      	nop
 8008314:	20000794 	.word	0x20000794

08008318 <_getpid_r>:
 8008318:	f7f9 beb8 	b.w	800208c <_getpid>

0800831c <__sread>:
 800831c:	b510      	push	{r4, lr}
 800831e:	460c      	mov	r4, r1
 8008320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008324:	f000 f894 	bl	8008450 <_read_r>
 8008328:	2800      	cmp	r0, #0
 800832a:	bfab      	itete	ge
 800832c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800832e:	89a3      	ldrhlt	r3, [r4, #12]
 8008330:	181b      	addge	r3, r3, r0
 8008332:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008336:	bfac      	ite	ge
 8008338:	6563      	strge	r3, [r4, #84]	; 0x54
 800833a:	81a3      	strhlt	r3, [r4, #12]
 800833c:	bd10      	pop	{r4, pc}

0800833e <__swrite>:
 800833e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008342:	461f      	mov	r7, r3
 8008344:	898b      	ldrh	r3, [r1, #12]
 8008346:	05db      	lsls	r3, r3, #23
 8008348:	4605      	mov	r5, r0
 800834a:	460c      	mov	r4, r1
 800834c:	4616      	mov	r6, r2
 800834e:	d505      	bpl.n	800835c <__swrite+0x1e>
 8008350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008354:	2302      	movs	r3, #2
 8008356:	2200      	movs	r2, #0
 8008358:	f000 f868 	bl	800842c <_lseek_r>
 800835c:	89a3      	ldrh	r3, [r4, #12]
 800835e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008362:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008366:	81a3      	strh	r3, [r4, #12]
 8008368:	4632      	mov	r2, r6
 800836a:	463b      	mov	r3, r7
 800836c:	4628      	mov	r0, r5
 800836e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008372:	f000 b817 	b.w	80083a4 <_write_r>

08008376 <__sseek>:
 8008376:	b510      	push	{r4, lr}
 8008378:	460c      	mov	r4, r1
 800837a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800837e:	f000 f855 	bl	800842c <_lseek_r>
 8008382:	1c43      	adds	r3, r0, #1
 8008384:	89a3      	ldrh	r3, [r4, #12]
 8008386:	bf15      	itete	ne
 8008388:	6560      	strne	r0, [r4, #84]	; 0x54
 800838a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800838e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008392:	81a3      	strheq	r3, [r4, #12]
 8008394:	bf18      	it	ne
 8008396:	81a3      	strhne	r3, [r4, #12]
 8008398:	bd10      	pop	{r4, pc}

0800839a <__sclose>:
 800839a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800839e:	f000 b813 	b.w	80083c8 <_close_r>
	...

080083a4 <_write_r>:
 80083a4:	b538      	push	{r3, r4, r5, lr}
 80083a6:	4d07      	ldr	r5, [pc, #28]	; (80083c4 <_write_r+0x20>)
 80083a8:	4604      	mov	r4, r0
 80083aa:	4608      	mov	r0, r1
 80083ac:	4611      	mov	r1, r2
 80083ae:	2200      	movs	r2, #0
 80083b0:	602a      	str	r2, [r5, #0]
 80083b2:	461a      	mov	r2, r3
 80083b4:	f7f9 fea9 	bl	800210a <_write>
 80083b8:	1c43      	adds	r3, r0, #1
 80083ba:	d102      	bne.n	80083c2 <_write_r+0x1e>
 80083bc:	682b      	ldr	r3, [r5, #0]
 80083be:	b103      	cbz	r3, 80083c2 <_write_r+0x1e>
 80083c0:	6023      	str	r3, [r4, #0]
 80083c2:	bd38      	pop	{r3, r4, r5, pc}
 80083c4:	20000794 	.word	0x20000794

080083c8 <_close_r>:
 80083c8:	b538      	push	{r3, r4, r5, lr}
 80083ca:	4d06      	ldr	r5, [pc, #24]	; (80083e4 <_close_r+0x1c>)
 80083cc:	2300      	movs	r3, #0
 80083ce:	4604      	mov	r4, r0
 80083d0:	4608      	mov	r0, r1
 80083d2:	602b      	str	r3, [r5, #0]
 80083d4:	f7f9 feb5 	bl	8002142 <_close>
 80083d8:	1c43      	adds	r3, r0, #1
 80083da:	d102      	bne.n	80083e2 <_close_r+0x1a>
 80083dc:	682b      	ldr	r3, [r5, #0]
 80083de:	b103      	cbz	r3, 80083e2 <_close_r+0x1a>
 80083e0:	6023      	str	r3, [r4, #0]
 80083e2:	bd38      	pop	{r3, r4, r5, pc}
 80083e4:	20000794 	.word	0x20000794

080083e8 <_fstat_r>:
 80083e8:	b538      	push	{r3, r4, r5, lr}
 80083ea:	4d07      	ldr	r5, [pc, #28]	; (8008408 <_fstat_r+0x20>)
 80083ec:	2300      	movs	r3, #0
 80083ee:	4604      	mov	r4, r0
 80083f0:	4608      	mov	r0, r1
 80083f2:	4611      	mov	r1, r2
 80083f4:	602b      	str	r3, [r5, #0]
 80083f6:	f7f9 feb0 	bl	800215a <_fstat>
 80083fa:	1c43      	adds	r3, r0, #1
 80083fc:	d102      	bne.n	8008404 <_fstat_r+0x1c>
 80083fe:	682b      	ldr	r3, [r5, #0]
 8008400:	b103      	cbz	r3, 8008404 <_fstat_r+0x1c>
 8008402:	6023      	str	r3, [r4, #0]
 8008404:	bd38      	pop	{r3, r4, r5, pc}
 8008406:	bf00      	nop
 8008408:	20000794 	.word	0x20000794

0800840c <_isatty_r>:
 800840c:	b538      	push	{r3, r4, r5, lr}
 800840e:	4d06      	ldr	r5, [pc, #24]	; (8008428 <_isatty_r+0x1c>)
 8008410:	2300      	movs	r3, #0
 8008412:	4604      	mov	r4, r0
 8008414:	4608      	mov	r0, r1
 8008416:	602b      	str	r3, [r5, #0]
 8008418:	f7f9 feaf 	bl	800217a <_isatty>
 800841c:	1c43      	adds	r3, r0, #1
 800841e:	d102      	bne.n	8008426 <_isatty_r+0x1a>
 8008420:	682b      	ldr	r3, [r5, #0]
 8008422:	b103      	cbz	r3, 8008426 <_isatty_r+0x1a>
 8008424:	6023      	str	r3, [r4, #0]
 8008426:	bd38      	pop	{r3, r4, r5, pc}
 8008428:	20000794 	.word	0x20000794

0800842c <_lseek_r>:
 800842c:	b538      	push	{r3, r4, r5, lr}
 800842e:	4d07      	ldr	r5, [pc, #28]	; (800844c <_lseek_r+0x20>)
 8008430:	4604      	mov	r4, r0
 8008432:	4608      	mov	r0, r1
 8008434:	4611      	mov	r1, r2
 8008436:	2200      	movs	r2, #0
 8008438:	602a      	str	r2, [r5, #0]
 800843a:	461a      	mov	r2, r3
 800843c:	f7f9 fea8 	bl	8002190 <_lseek>
 8008440:	1c43      	adds	r3, r0, #1
 8008442:	d102      	bne.n	800844a <_lseek_r+0x1e>
 8008444:	682b      	ldr	r3, [r5, #0]
 8008446:	b103      	cbz	r3, 800844a <_lseek_r+0x1e>
 8008448:	6023      	str	r3, [r4, #0]
 800844a:	bd38      	pop	{r3, r4, r5, pc}
 800844c:	20000794 	.word	0x20000794

08008450 <_read_r>:
 8008450:	b538      	push	{r3, r4, r5, lr}
 8008452:	4d07      	ldr	r5, [pc, #28]	; (8008470 <_read_r+0x20>)
 8008454:	4604      	mov	r4, r0
 8008456:	4608      	mov	r0, r1
 8008458:	4611      	mov	r1, r2
 800845a:	2200      	movs	r2, #0
 800845c:	602a      	str	r2, [r5, #0]
 800845e:	461a      	mov	r2, r3
 8008460:	f7f9 fe36 	bl	80020d0 <_read>
 8008464:	1c43      	adds	r3, r0, #1
 8008466:	d102      	bne.n	800846e <_read_r+0x1e>
 8008468:	682b      	ldr	r3, [r5, #0]
 800846a:	b103      	cbz	r3, 800846e <_read_r+0x1e>
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	bd38      	pop	{r3, r4, r5, pc}
 8008470:	20000794 	.word	0x20000794

08008474 <_init>:
 8008474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008476:	bf00      	nop
 8008478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800847a:	bc08      	pop	{r3}
 800847c:	469e      	mov	lr, r3
 800847e:	4770      	bx	lr

08008480 <_fini>:
 8008480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008482:	bf00      	nop
 8008484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008486:	bc08      	pop	{r3}
 8008488:	469e      	mov	lr, r3
 800848a:	4770      	bx	lr
