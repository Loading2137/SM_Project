
RobertWojtek_Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b3c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08009d10  08009d10  00019d10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a154  0800a154  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a154  0800a154  0001a154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a15c  0800a15c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a15c  0800a15c  0001a15c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a160  0800a160  0001a160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000668  200001e0  0800a344  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000848  0800a344  00020848  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001920c  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002db3  00000000  00000000  0003941c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  0003c1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001218  00000000  00000000  0003d500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002862a  00000000  00000000  0003e718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a99  00000000  00000000  00066d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6f1e  00000000  00000000  0007d7db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001746f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006400  00000000  00000000  0017474c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009cf4 	.word	0x08009cf4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08009cf4 	.word	0x08009cf4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_ldivmod>:
 8000be8:	b97b      	cbnz	r3, 8000c0a <__aeabi_ldivmod+0x22>
 8000bea:	b972      	cbnz	r2, 8000c0a <__aeabi_ldivmod+0x22>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bfbe      	ittt	lt
 8000bf0:	2000      	movlt	r0, #0
 8000bf2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bf6:	e006      	blt.n	8000c06 <__aeabi_ldivmod+0x1e>
 8000bf8:	bf08      	it	eq
 8000bfa:	2800      	cmpeq	r0, #0
 8000bfc:	bf1c      	itt	ne
 8000bfe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c02:	f04f 30ff 	movne.w	r0, #4294967295
 8000c06:	f000 b9b9 	b.w	8000f7c <__aeabi_idiv0>
 8000c0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c12:	2900      	cmp	r1, #0
 8000c14:	db09      	blt.n	8000c2a <__aeabi_ldivmod+0x42>
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db1a      	blt.n	8000c50 <__aeabi_ldivmod+0x68>
 8000c1a:	f000 f84d 	bl	8000cb8 <__udivmoddi4>
 8000c1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c26:	b004      	add	sp, #16
 8000c28:	4770      	bx	lr
 8000c2a:	4240      	negs	r0, r0
 8000c2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db1b      	blt.n	8000c6c <__aeabi_ldivmod+0x84>
 8000c34:	f000 f840 	bl	8000cb8 <__udivmoddi4>
 8000c38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c40:	b004      	add	sp, #16
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	4252      	negs	r2, r2
 8000c4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c4e:	4770      	bx	lr
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	f000 f82f 	bl	8000cb8 <__udivmoddi4>
 8000c5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c62:	b004      	add	sp, #16
 8000c64:	4240      	negs	r0, r0
 8000c66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6a:	4770      	bx	lr
 8000c6c:	4252      	negs	r2, r2
 8000c6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c72:	f000 f821 	bl	8000cb8 <__udivmoddi4>
 8000c76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7e:	b004      	add	sp, #16
 8000c80:	4252      	negs	r2, r2
 8000c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af02      	add	r7, sp, #8
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
  return tmp;
#endif
#if(BMP_SPI == 1)
    uint8_t tmp[2];
	tmp[0] = addr;
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 8000f8e:	7b3b      	ldrb	r3, [r7, #12]
 8000f90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2110      	movs	r1, #16
 8000f9c:	480b      	ldr	r0, [pc, #44]	; (8000fcc <BMP280_Read8+0x4c>)
 8000f9e:	f001 ff0d 	bl	8002dbc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <BMP280_Read8+0x50>)
 8000fa4:	6818      	ldr	r0, [r3, #0]
 8000fa6:	f107 020c 	add.w	r2, r7, #12
 8000faa:	f107 010c 	add.w	r1, r7, #12
 8000fae:	230a      	movs	r3, #10
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	f003 f9cf 	bl	8004356 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2110      	movs	r1, #16
 8000fbc:	4803      	ldr	r0, [pc, #12]	; (8000fcc <BMP280_Read8+0x4c>)
 8000fbe:	f001 fefd 	bl	8002dbc <HAL_GPIO_WritePin>
	return tmp[1];
 8000fc2:	7b7b      	ldrb	r3, [r7, #13]
#endif
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40020000 	.word	0x40020000
 8000fd0:	20000288 	.word	0x20000288

08000fd4 <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af02      	add	r7, sp, #8
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
	return ((tmp[0] << 8) | tmp[1]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[3];
	tmp[0] = addr;
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 8000fe2:	7b3b      	ldrb	r3, [r7, #12]
 8000fe4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2110      	movs	r1, #16
 8000ff0:	480f      	ldr	r0, [pc, #60]	; (8001030 <BMP280_Read16+0x5c>)
 8000ff2:	f001 fee3 	bl	8002dbc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <BMP280_Read16+0x60>)
 8000ff8:	6818      	ldr	r0, [r3, #0]
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	f107 010c 	add.w	r1, r7, #12
 8001002:	230a      	movs	r3, #10
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2303      	movs	r3, #3
 8001008:	f003 f9a5 	bl	8004356 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	2110      	movs	r1, #16
 8001010:	4807      	ldr	r0, [pc, #28]	; (8001030 <BMP280_Read16+0x5c>)
 8001012:	f001 fed3 	bl	8002dbc <HAL_GPIO_WritePin>
	return ((tmp[1] << 8) | tmp[2]);
 8001016:	7b7b      	ldrb	r3, [r7, #13]
 8001018:	021b      	lsls	r3, r3, #8
 800101a:	b21a      	sxth	r2, r3
 800101c:	7bbb      	ldrb	r3, [r7, #14]
 800101e:	b21b      	sxth	r3, r3
 8001020:	4313      	orrs	r3, r2
 8001022:	b21b      	sxth	r3, r3
 8001024:	b29b      	uxth	r3, r3
#endif
}
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40020000 	.word	0x40020000
 8001034:	20000288 	.word	0x20000288

08001038 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ffc5 	bl	8000fd4 <BMP280_Read16>
 800104a:	4603      	mov	r3, r0
 800104c:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 800104e:	89fb      	ldrh	r3, [r7, #14]
 8001050:	0a1b      	lsrs	r3, r3, #8
 8001052:	b29b      	uxth	r3, r3
 8001054:	b21a      	sxth	r2, r3
 8001056:	89fb      	ldrh	r3, [r7, #14]
 8001058:	021b      	lsls	r3, r3, #8
 800105a:	b21b      	sxth	r3, r3
 800105c:	4313      	orrs	r3, r2
 800105e:	b21b      	sxth	r3, r3
 8001060:	b29b      	uxth	r3, r3
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af02      	add	r7, sp, #8
 8001072:	4603      	mov	r3, r0
 8001074:	460a      	mov	r2, r1
 8001076:	71fb      	strb	r3, [r7, #7]
 8001078:	4613      	mov	r3, r2
 800107a:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[2];
	tmp[0] = address;
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	733b      	strb	r3, [r7, #12]
	tmp[0] &= ~(1<<7);
 8001080:	7b3b      	ldrb	r3, [r7, #12]
 8001082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001086:	b2db      	uxtb	r3, r3
 8001088:	733b      	strb	r3, [r7, #12]
	tmp[1] = data;
 800108a:	79bb      	ldrb	r3, [r7, #6]
 800108c:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	2110      	movs	r1, #16
 8001092:	480b      	ldr	r0, [pc, #44]	; (80010c0 <BMP280_Write8+0x54>)
 8001094:	f001 fe92 	bl	8002dbc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 8001098:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <BMP280_Write8+0x58>)
 800109a:	6818      	ldr	r0, [r3, #0]
 800109c:	f107 020c 	add.w	r2, r7, #12
 80010a0:	f107 010c 	add.w	r1, r7, #12
 80010a4:	230a      	movs	r3, #10
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2302      	movs	r3, #2
 80010aa:	f003 f954 	bl	8004356 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 80010ae:	2201      	movs	r2, #1
 80010b0:	2110      	movs	r1, #16
 80010b2:	4803      	ldr	r0, [pc, #12]	; (80010c0 <BMP280_Write8+0x54>)
 80010b4:	f001 fe82 	bl	8002dbc <HAL_GPIO_WritePin>
#endif
}
 80010b8:	bf00      	nop
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40020000 	.word	0x40020000
 80010c4:	20000288 	.word	0x20000288

080010c8 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[4];
	tmp[0] = addr;
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 80010d6:	7b3b      	ldrb	r3, [r7, #12]
 80010d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2110      	movs	r1, #16
 80010e4:	480e      	ldr	r0, [pc, #56]	; (8001120 <BMP280_Read24+0x58>)
 80010e6:	f001 fe69 	bl	8002dbc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <BMP280_Read24+0x5c>)
 80010ec:	6818      	ldr	r0, [r3, #0]
 80010ee:	f107 020c 	add.w	r2, r7, #12
 80010f2:	f107 010c 	add.w	r1, r7, #12
 80010f6:	230a      	movs	r3, #10
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	2303      	movs	r3, #3
 80010fc:	f003 f92b 	bl	8004356 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8001100:	2201      	movs	r2, #1
 8001102:	2110      	movs	r1, #16
 8001104:	4806      	ldr	r0, [pc, #24]	; (8001120 <BMP280_Read24+0x58>)
 8001106:	f001 fe59 	bl	8002dbc <HAL_GPIO_WritePin>
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
 800110a:	7b7b      	ldrb	r3, [r7, #13]
 800110c:	041a      	lsls	r2, r3, #16
 800110e:	7bbb      	ldrb	r3, [r7, #14]
 8001110:	021b      	lsls	r3, r3, #8
 8001112:	4313      	orrs	r3, r2
 8001114:	7bfa      	ldrb	r2, [r7, #15]
 8001116:	4313      	orrs	r3, r2
#endif
}
 8001118:	4618      	mov	r0, r3
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40020000 	.word	0x40020000
 8001124:	20000288 	.word	0x20000288

08001128 <BMP280_Init>:
{
	i2c_h = i2c_handler;
#endif
#if(BMP_SPI == 1)
void BMP280_Init(SPI_HandleTypeDef *spi_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	4608      	mov	r0, r1
 8001132:	4611      	mov	r1, r2
 8001134:	461a      	mov	r2, r3
 8001136:	4603      	mov	r3, r0
 8001138:	70fb      	strb	r3, [r7, #3]
 800113a:	460b      	mov	r3, r1
 800113c:	70bb      	strb	r3, [r7, #2]
 800113e:	4613      	mov	r3, r2
 8001140:	707b      	strb	r3, [r7, #1]
	spi_h = spi_handler;
 8001142:	4a4e      	ldr	r2, [pc, #312]	; (800127c <BMP280_Init+0x154>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	2110      	movs	r1, #16
 800114c:	484c      	ldr	r0, [pc, #304]	; (8001280 <BMP280_Init+0x158>)
 800114e:	f001 fe35 	bl	8002dbc <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001152:	2005      	movs	r0, #5
 8001154:	f001 fb38 	bl	80027c8 <HAL_Delay>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8001158:	2201      	movs	r2, #1
 800115a:	2110      	movs	r1, #16
 800115c:	4848      	ldr	r0, [pc, #288]	; (8001280 <BMP280_Init+0x158>)
 800115e:	f001 fe2d 	bl	8002dbc <HAL_GPIO_WritePin>
#endif
	if (mode > BMP280_NORMALMODE)
 8001162:	787b      	ldrb	r3, [r7, #1]
 8001164:	2b03      	cmp	r3, #3
 8001166:	d901      	bls.n	800116c <BMP280_Init+0x44>
	    mode = BMP280_NORMALMODE;
 8001168:	2303      	movs	r3, #3
 800116a:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 800116c:	4a45      	ldr	r2, [pc, #276]	; (8001284 <BMP280_Init+0x15c>)
 800116e:	787b      	ldrb	r3, [r7, #1]
 8001170:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 8001172:	787b      	ldrb	r3, [r7, #1]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d101      	bne.n	800117c <BMP280_Init+0x54>
		mode = BMP280_SLEEPMODE;
 8001178:	2300      	movs	r3, #0
 800117a:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 800117c:	78fb      	ldrb	r3, [r7, #3]
 800117e:	2b05      	cmp	r3, #5
 8001180:	d901      	bls.n	8001186 <BMP280_Init+0x5e>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 8001182:	2305      	movs	r3, #5
 8001184:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 8001186:	4a40      	ldr	r2, [pc, #256]	; (8001288 <BMP280_Init+0x160>)
 8001188:	78fb      	ldrb	r3, [r7, #3]
 800118a:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 800118c:	78bb      	ldrb	r3, [r7, #2]
 800118e:	2b05      	cmp	r3, #5
 8001190:	d901      	bls.n	8001196 <BMP280_Init+0x6e>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 8001192:	2305      	movs	r3, #5
 8001194:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 8001196:	4a3d      	ldr	r2, [pc, #244]	; (800128c <BMP280_Init+0x164>)
 8001198:	78bb      	ldrb	r3, [r7, #2]
 800119a:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 800119c:	bf00      	nop
 800119e:	20d0      	movs	r0, #208	; 0xd0
 80011a0:	f7ff feee 	bl	8000f80 <BMP280_Read8>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b58      	cmp	r3, #88	; 0x58
 80011a8:	d1f9      	bne.n	800119e <BMP280_Init+0x76>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 80011aa:	2088      	movs	r0, #136	; 0x88
 80011ac:	f7ff ff44 	bl	8001038 <BMP280_Read16LE>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461a      	mov	r2, r3
 80011b4:	4b36      	ldr	r3, [pc, #216]	; (8001290 <BMP280_Init+0x168>)
 80011b6:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 80011b8:	208a      	movs	r0, #138	; 0x8a
 80011ba:	f7ff ff3d 	bl	8001038 <BMP280_Read16LE>
 80011be:	4603      	mov	r3, r0
 80011c0:	b21a      	sxth	r2, r3
 80011c2:	4b34      	ldr	r3, [pc, #208]	; (8001294 <BMP280_Init+0x16c>)
 80011c4:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 80011c6:	208c      	movs	r0, #140	; 0x8c
 80011c8:	f7ff ff36 	bl	8001038 <BMP280_Read16LE>
 80011cc:	4603      	mov	r3, r0
 80011ce:	b21a      	sxth	r2, r3
 80011d0:	4b31      	ldr	r3, [pc, #196]	; (8001298 <BMP280_Init+0x170>)
 80011d2:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 80011d4:	208e      	movs	r0, #142	; 0x8e
 80011d6:	f7ff ff2f 	bl	8001038 <BMP280_Read16LE>
 80011da:	4603      	mov	r3, r0
 80011dc:	461a      	mov	r2, r3
 80011de:	4b2f      	ldr	r3, [pc, #188]	; (800129c <BMP280_Init+0x174>)
 80011e0:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 80011e2:	2090      	movs	r0, #144	; 0x90
 80011e4:	f7ff ff28 	bl	8001038 <BMP280_Read16LE>
 80011e8:	4603      	mov	r3, r0
 80011ea:	b21a      	sxth	r2, r3
 80011ec:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <BMP280_Init+0x178>)
 80011ee:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 80011f0:	2092      	movs	r0, #146	; 0x92
 80011f2:	f7ff ff21 	bl	8001038 <BMP280_Read16LE>
 80011f6:	4603      	mov	r3, r0
 80011f8:	b21a      	sxth	r2, r3
 80011fa:	4b2a      	ldr	r3, [pc, #168]	; (80012a4 <BMP280_Init+0x17c>)
 80011fc:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 80011fe:	2094      	movs	r0, #148	; 0x94
 8001200:	f7ff ff1a 	bl	8001038 <BMP280_Read16LE>
 8001204:	4603      	mov	r3, r0
 8001206:	b21a      	sxth	r2, r3
 8001208:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <BMP280_Init+0x180>)
 800120a:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 800120c:	2096      	movs	r0, #150	; 0x96
 800120e:	f7ff ff13 	bl	8001038 <BMP280_Read16LE>
 8001212:	4603      	mov	r3, r0
 8001214:	b21a      	sxth	r2, r3
 8001216:	4b25      	ldr	r3, [pc, #148]	; (80012ac <BMP280_Init+0x184>)
 8001218:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 800121a:	2098      	movs	r0, #152	; 0x98
 800121c:	f7ff ff0c 	bl	8001038 <BMP280_Read16LE>
 8001220:	4603      	mov	r3, r0
 8001222:	b21a      	sxth	r2, r3
 8001224:	4b22      	ldr	r3, [pc, #136]	; (80012b0 <BMP280_Init+0x188>)
 8001226:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8001228:	209a      	movs	r0, #154	; 0x9a
 800122a:	f7ff ff05 	bl	8001038 <BMP280_Read16LE>
 800122e:	4603      	mov	r3, r0
 8001230:	b21a      	sxth	r2, r3
 8001232:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <BMP280_Init+0x18c>)
 8001234:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 8001236:	209c      	movs	r0, #156	; 0x9c
 8001238:	f7ff fefe 	bl	8001038 <BMP280_Read16LE>
 800123c:	4603      	mov	r3, r0
 800123e:	b21a      	sxth	r2, r3
 8001240:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <BMP280_Init+0x190>)
 8001242:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 8001244:	209e      	movs	r0, #158	; 0x9e
 8001246:	f7ff fef7 	bl	8001038 <BMP280_Read16LE>
 800124a:	4603      	mov	r3, r0
 800124c:	b21a      	sxth	r2, r3
 800124e:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <BMP280_Init+0x194>)
 8001250:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 8001252:	78fb      	ldrb	r3, [r7, #3]
 8001254:	015b      	lsls	r3, r3, #5
 8001256:	b25a      	sxtb	r2, r3
 8001258:	78bb      	ldrb	r3, [r7, #2]
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	b25b      	sxtb	r3, r3
 800125e:	4313      	orrs	r3, r2
 8001260:	b25a      	sxtb	r2, r3
 8001262:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001266:	4313      	orrs	r3, r2
 8001268:	b25b      	sxtb	r3, r3
 800126a:	b2db      	uxtb	r3, r3
 800126c:	4619      	mov	r1, r3
 800126e:	20f4      	movs	r0, #244	; 0xf4
 8001270:	f7ff fefc 	bl	800106c <BMP280_Write8>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000288 	.word	0x20000288
 8001280:	40020000 	.word	0x40020000
 8001284:	2000028f 	.word	0x2000028f
 8001288:	2000028e 	.word	0x2000028e
 800128c:	2000027a 	.word	0x2000027a
 8001290:	2000028c 	.word	0x2000028c
 8001294:	2000027c 	.word	0x2000027c
 8001298:	20000274 	.word	0x20000274
 800129c:	20000280 	.word	0x20000280
 80012a0:	20000276 	.word	0x20000276
 80012a4:	20000290 	.word	0x20000290
 80012a8:	20000294 	.word	0x20000294
 80012ac:	2000027e 	.word	0x2000027e
 80012b0:	20000284 	.word	0x20000284
 80012b4:	20000278 	.word	0x20000278
 80012b8:	20000282 	.word	0x20000282
 80012bc:	20000292 	.word	0x20000292

080012c0 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 80012c6:	4b3d      	ldr	r3, [pc, #244]	; (80013bc <BMP280_ReadTemperature+0xfc>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d16d      	bne.n	80013aa <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 80012ce:	20f4      	movs	r0, #244	; 0xf4
 80012d0:	f7ff fe56 	bl	8000f80 <BMP280_Read8>
 80012d4:	4603      	mov	r3, r0
 80012d6:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 80012d8:	7dfb      	ldrb	r3, [r7, #23]
 80012da:	f023 0303 	bic.w	r3, r3, #3
 80012de:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 80012e0:	7dfb      	ldrb	r3, [r7, #23]
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 80012e8:	7dfb      	ldrb	r3, [r7, #23]
 80012ea:	4619      	mov	r1, r3
 80012ec:	20f4      	movs	r0, #244	; 0xf4
 80012ee:	f7ff febd 	bl	800106c <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 80012f2:	20f4      	movs	r0, #244	; 0xf4
 80012f4:	f7ff fe44 	bl	8000f80 <BMP280_Read8>
 80012f8:	4603      	mov	r3, r0
 80012fa:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 80012fc:	7dbb      	ldrb	r3, [r7, #22]
 80012fe:	f003 0303 	and.w	r3, r3, #3
 8001302:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 8001304:	7dbb      	ldrb	r3, [r7, #22]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d14f      	bne.n	80013aa <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 800130a:	20f4      	movs	r0, #244	; 0xf4
 800130c:	f7ff fe38 	bl	8000f80 <BMP280_Read8>
 8001310:	4603      	mov	r3, r0
 8001312:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 8001314:	7dbb      	ldrb	r3, [r7, #22]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 800131c:	7dbb      	ldrb	r3, [r7, #22]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d000      	beq.n	8001324 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001322:	e7f2      	b.n	800130a <BMP280_ReadTemperature+0x4a>
				  break;
 8001324:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 8001326:	20fa      	movs	r0, #250	; 0xfa
 8001328:	f7ff fece 	bl	80010c8 <BMP280_Read24>
 800132c:	4603      	mov	r3, r0
 800132e:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	111b      	asrs	r3, r3, #4
 8001334:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	10da      	asrs	r2, r3, #3
 800133a:	4b21      	ldr	r3, [pc, #132]	; (80013c0 <BMP280_ReadTemperature+0x100>)
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 8001342:	4a20      	ldr	r2, [pc, #128]	; (80013c4 <BMP280_ReadTemperature+0x104>)
 8001344:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001348:	fb02 f303 	mul.w	r3, r2, r3
 800134c:	12db      	asrs	r3, r3, #11
 800134e:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	111b      	asrs	r3, r3, #4
 8001354:	4a1a      	ldr	r2, [pc, #104]	; (80013c0 <BMP280_ReadTemperature+0x100>)
 8001356:	8812      	ldrh	r2, [r2, #0]
 8001358:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	1112      	asrs	r2, r2, #4
 800135e:	4918      	ldr	r1, [pc, #96]	; (80013c0 <BMP280_ReadTemperature+0x100>)
 8001360:	8809      	ldrh	r1, [r1, #0]
 8001362:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001364:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001368:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 800136a:	4a17      	ldr	r2, [pc, #92]	; (80013c8 <BMP280_ReadTemperature+0x108>)
 800136c:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001370:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001374:	139b      	asrs	r3, r3, #14
 8001376:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	4413      	add	r3, r2
 800137e:	4a13      	ldr	r2, [pc, #76]	; (80013cc <BMP280_ReadTemperature+0x10c>)
 8001380:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 8001382:	4b12      	ldr	r3, [pc, #72]	; (80013cc <BMP280_ReadTemperature+0x10c>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	4613      	mov	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	3380      	adds	r3, #128	; 0x80
 800138e:	121b      	asrs	r3, r3, #8
 8001390:	ee07 3a90 	vmov	s15, r3
 8001394:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001398:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 800139c:	edd7 7a01 	vldr	s15, [r7, #4]
 80013a0:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80013d0 <BMP280_ReadTemperature+0x110>
 80013a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013a8:	e001      	b.n	80013ae <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 80013aa:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80013d4 <BMP280_ReadTemperature+0x114>
 80013ae:	eef0 7a47 	vmov.f32	s15, s14
}
 80013b2:	eeb0 0a67 	vmov.f32	s0, s15
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	2000028f 	.word	0x2000028f
 80013c0:	2000028c 	.word	0x2000028c
 80013c4:	2000027c 	.word	0x2000027c
 80013c8:	20000274 	.word	0x20000274
 80013cc:	20000298 	.word	0x20000298
 80013d0:	42c80000 	.word	0x42c80000
 80013d4:	c2c60000 	.word	0xc2c60000

080013d8 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 80013d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013dc:	b09c      	sub	sp, #112	; 0x70
 80013de:	af00      	add	r7, sp, #0
 80013e0:	64f8      	str	r0, [r7, #76]	; 0x4c
 80013e2:	64b9      	str	r1, [r7, #72]	; 0x48
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 80013e4:	f7ff ff6c 	bl	80012c0 <BMP280_ReadTemperature>
 80013e8:	eef0 7a40 	vmov.f32	s15, s0
 80013ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013ee:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 80013f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013f4:	edd3 7a00 	vldr	s15, [r3]
 80013f8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80015c8 <BMP280_ReadTemperatureAndPressure+0x1f0>
 80013fc:	eef4 7a47 	vcmp.f32	s15, s14
 8001400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001404:	d101      	bne.n	800140a <BMP280_ReadTemperatureAndPressure+0x32>
		  return -1;
 8001406:	23ff      	movs	r3, #255	; 0xff
 8001408:	e1d8      	b.n	80017bc <BMP280_ReadTemperatureAndPressure+0x3e4>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 800140a:	20f7      	movs	r0, #247	; 0xf7
 800140c:	f7ff fe5c 	bl	80010c8 <BMP280_Read24>
 8001410:	4603      	mov	r3, r0
 8001412:	66fb      	str	r3, [r7, #108]	; 0x6c
	  adc_P >>= 4;
 8001414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001416:	111b      	asrs	r3, r3, #4
 8001418:	66fb      	str	r3, [r7, #108]	; 0x6c

	  var1 = ((int64_t)t_fine) - 128000;
 800141a:	4b6c      	ldr	r3, [pc, #432]	; (80015cc <BMP280_ReadTemperatureAndPressure+0x1f4>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	461a      	mov	r2, r3
 8001420:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001424:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 8001428:	f143 35ff 	adc.w	r5, r3, #4294967295
 800142c:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
	  var2 = var1 * var1 * (int64_t)p6;
 8001430:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001432:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001434:	fb03 f102 	mul.w	r1, r3, r2
 8001438:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800143a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800143c:	fb03 f302 	mul.w	r3, r3, r2
 8001440:	18ca      	adds	r2, r1, r3
 8001442:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001444:	fba3 4503 	umull	r4, r5, r3, r3
 8001448:	1953      	adds	r3, r2, r5
 800144a:	461d      	mov	r5, r3
 800144c:	4b60      	ldr	r3, [pc, #384]	; (80015d0 <BMP280_ReadTemperatureAndPressure+0x1f8>)
 800144e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001452:	b21a      	sxth	r2, r3
 8001454:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001458:	fb02 f005 	mul.w	r0, r2, r5
 800145c:	fb04 f103 	mul.w	r1, r4, r3
 8001460:	4401      	add	r1, r0
 8001462:	fba4 2302 	umull	r2, r3, r4, r2
 8001466:	4419      	add	r1, r3
 8001468:	460b      	mov	r3, r1
 800146a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 800146e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 8001472:	4b58      	ldr	r3, [pc, #352]	; (80015d4 <BMP280_ReadTemperatureAndPressure+0x1fc>)
 8001474:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001478:	b21a      	sxth	r2, r3
 800147a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800147e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001480:	fb03 f001 	mul.w	r0, r3, r1
 8001484:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001486:	fb02 f101 	mul.w	r1, r2, r1
 800148a:	4408      	add	r0, r1
 800148c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800148e:	fba1 2302 	umull	r2, r3, r1, r2
 8001492:	18c1      	adds	r1, r0, r3
 8001494:	460b      	mov	r3, r1
 8001496:	f04f 0000 	mov.w	r0, #0
 800149a:	f04f 0100 	mov.w	r1, #0
 800149e:	0459      	lsls	r1, r3, #17
 80014a0:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80014a4:	0450      	lsls	r0, r2, #17
 80014a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80014aa:	eb12 0800 	adds.w	r8, r2, r0
 80014ae:	eb43 0901 	adc.w	r9, r3, r1
 80014b2:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
	  var2 = var2 + (((int64_t)p4)<<35);
 80014b6:	4b48      	ldr	r3, [pc, #288]	; (80015d8 <BMP280_ReadTemperatureAndPressure+0x200>)
 80014b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014bc:	b21a      	sxth	r2, r3
 80014be:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80014c2:	f04f 0000 	mov.w	r0, #0
 80014c6:	f04f 0100 	mov.w	r1, #0
 80014ca:	00d1      	lsls	r1, r2, #3
 80014cc:	2000      	movs	r0, #0
 80014ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80014d2:	1814      	adds	r4, r2, r0
 80014d4:	61bc      	str	r4, [r7, #24]
 80014d6:	414b      	adcs	r3, r1
 80014d8:	61fb      	str	r3, [r7, #28]
 80014da:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80014de:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80014e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80014e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014e6:	fb03 f102 	mul.w	r1, r3, r2
 80014ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80014ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014ee:	fb03 f302 	mul.w	r3, r3, r2
 80014f2:	18ca      	adds	r2, r1, r3
 80014f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014f6:	fba3 4503 	umull	r4, r5, r3, r3
 80014fa:	1953      	adds	r3, r2, r5
 80014fc:	461d      	mov	r5, r3
 80014fe:	4b37      	ldr	r3, [pc, #220]	; (80015dc <BMP280_ReadTemperatureAndPressure+0x204>)
 8001500:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001504:	b21a      	sxth	r2, r3
 8001506:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800150a:	fb02 f005 	mul.w	r0, r2, r5
 800150e:	fb04 f103 	mul.w	r1, r4, r3
 8001512:	4401      	add	r1, r0
 8001514:	fba4 2302 	umull	r2, r3, r4, r2
 8001518:	4419      	add	r1, r3
 800151a:	460b      	mov	r3, r1
 800151c:	f04f 0800 	mov.w	r8, #0
 8001520:	f04f 0900 	mov.w	r9, #0
 8001524:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8001528:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 800152c:	ea4f 2923 	mov.w	r9, r3, asr #8
	    ((var1 * (int64_t)p2)<<12);
 8001530:	4b2b      	ldr	r3, [pc, #172]	; (80015e0 <BMP280_ReadTemperatureAndPressure+0x208>)
 8001532:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001536:	b21a      	sxth	r2, r3
 8001538:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800153c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800153e:	fb03 f001 	mul.w	r0, r3, r1
 8001542:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001544:	fb02 f101 	mul.w	r1, r2, r1
 8001548:	1844      	adds	r4, r0, r1
 800154a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800154c:	fba1 0102 	umull	r0, r1, r1, r2
 8001550:	1863      	adds	r3, r4, r1
 8001552:	4619      	mov	r1, r3
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	f04f 0300 	mov.w	r3, #0
 800155c:	030b      	lsls	r3, r1, #12
 800155e:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 8001562:	0302      	lsls	r2, r0, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001564:	eb18 0102 	adds.w	r1, r8, r2
 8001568:	6139      	str	r1, [r7, #16]
 800156a:	eb49 0303 	adc.w	r3, r9, r3
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001574:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 8001578:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800157c:	1c11      	adds	r1, r2, #0
 800157e:	6439      	str	r1, [r7, #64]	; 0x40
 8001580:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 8001584:	647b      	str	r3, [r7, #68]	; 0x44
 8001586:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <BMP280_ReadTemperatureAndPressure+0x20c>)
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	b29a      	uxth	r2, r3
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001594:	4629      	mov	r1, r5
 8001596:	fb02 f001 	mul.w	r0, r2, r1
 800159a:	4621      	mov	r1, r4
 800159c:	fb01 f103 	mul.w	r1, r1, r3
 80015a0:	4401      	add	r1, r0
 80015a2:	4620      	mov	r0, r4
 80015a4:	fba0 2302 	umull	r2, r3, r0, r2
 80015a8:	4419      	add	r1, r3
 80015aa:	460b      	mov	r3, r1
 80015ac:	f04f 0000 	mov.w	r0, #0
 80015b0:	f04f 0100 	mov.w	r1, #0
 80015b4:	1058      	asrs	r0, r3, #1
 80015b6:	17d9      	asrs	r1, r3, #31
 80015b8:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60

	  if (var1 == 0) {
 80015bc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80015c0:	4313      	orrs	r3, r2
 80015c2:	d111      	bne.n	80015e8 <BMP280_ReadTemperatureAndPressure+0x210>
	    return 0;  // avoid exception caused by division by zero
 80015c4:	2300      	movs	r3, #0
 80015c6:	e0f9      	b.n	80017bc <BMP280_ReadTemperatureAndPressure+0x3e4>
 80015c8:	c2c60000 	.word	0xc2c60000
 80015cc:	20000298 	.word	0x20000298
 80015d0:	20000284 	.word	0x20000284
 80015d4:	2000027e 	.word	0x2000027e
 80015d8:	20000294 	.word	0x20000294
 80015dc:	20000290 	.word	0x20000290
 80015e0:	20000276 	.word	0x20000276
 80015e4:	20000280 	.word	0x20000280
	  }
	  p = 1048576 - adc_P;
 80015e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015ea:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80015ee:	461a      	mov	r2, r3
 80015f0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80015f4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	  p = (((p<<31) - var2)*3125) / var1;
 80015f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015fa:	105b      	asrs	r3, r3, #1
 80015fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001600:	07db      	lsls	r3, r3, #31
 8001602:	63bb      	str	r3, [r7, #56]	; 0x38
 8001604:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001608:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800160c:	4621      	mov	r1, r4
 800160e:	ebb1 0a02 	subs.w	sl, r1, r2
 8001612:	4629      	mov	r1, r5
 8001614:	eb61 0b03 	sbc.w	fp, r1, r3
 8001618:	4652      	mov	r2, sl
 800161a:	465b      	mov	r3, fp
 800161c:	1891      	adds	r1, r2, r2
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	415b      	adcs	r3, r3
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001628:	eb12 020a 	adds.w	r2, r2, sl
 800162c:	eb43 030b 	adc.w	r3, r3, fp
 8001630:	f04f 0000 	mov.w	r0, #0
 8001634:	f04f 0100 	mov.w	r1, #0
 8001638:	0199      	lsls	r1, r3, #6
 800163a:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800163e:	0190      	lsls	r0, r2, #6
 8001640:	1812      	adds	r2, r2, r0
 8001642:	eb41 0303 	adc.w	r3, r1, r3
 8001646:	f04f 0000 	mov.w	r0, #0
 800164a:	f04f 0100 	mov.w	r1, #0
 800164e:	0099      	lsls	r1, r3, #2
 8001650:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001654:	0090      	lsls	r0, r2, #2
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	eb12 020a 	adds.w	r2, r2, sl
 800165e:	eb43 030b 	adc.w	r3, r3, fp
 8001662:	f04f 0000 	mov.w	r0, #0
 8001666:	f04f 0100 	mov.w	r1, #0
 800166a:	0099      	lsls	r1, r3, #2
 800166c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001670:	0090      	lsls	r0, r2, #2
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	eb12 010a 	adds.w	r1, r2, sl
 800167a:	6339      	str	r1, [r7, #48]	; 0x30
 800167c:	eb43 030b 	adc.w	r3, r3, fp
 8001680:	637b      	str	r3, [r7, #52]	; 0x34
 8001682:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001686:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800168a:	f7ff faad 	bl	8000be8 <__aeabi_ldivmod>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8001696:	4b4c      	ldr	r3, [pc, #304]	; (80017c8 <BMP280_ReadTemperatureAndPressure+0x3f0>)
 8001698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800169c:	b218      	sxth	r0, r3
 800169e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80016a2:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	f04f 0300 	mov.w	r3, #0
 80016ae:	0b62      	lsrs	r2, r4, #13
 80016b0:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 80016b4:	136b      	asrs	r3, r5, #13
 80016b6:	fb02 f501 	mul.w	r5, r2, r1
 80016ba:	fb00 f403 	mul.w	r4, r0, r3
 80016be:	442c      	add	r4, r5
 80016c0:	fba0 0102 	umull	r0, r1, r0, r2
 80016c4:	1863      	adds	r3, r4, r1
 80016c6:	4619      	mov	r1, r3
 80016c8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	0b62      	lsrs	r2, r4, #13
 80016d6:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 80016da:	136b      	asrs	r3, r5, #13
 80016dc:	fb02 f501 	mul.w	r5, r2, r1
 80016e0:	fb00 f403 	mul.w	r4, r0, r3
 80016e4:	442c      	add	r4, r5
 80016e6:	fba0 0102 	umull	r0, r1, r0, r2
 80016ea:	1863      	adds	r3, r4, r1
 80016ec:	4619      	mov	r1, r3
 80016ee:	f04f 0200 	mov.w	r2, #0
 80016f2:	f04f 0300 	mov.w	r3, #0
 80016f6:	0e42      	lsrs	r2, r0, #25
 80016f8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80016fc:	164b      	asrs	r3, r1, #25
 80016fe:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	  var2 = (((int64_t)p8) * p) >> 19;
 8001702:	4b32      	ldr	r3, [pc, #200]	; (80017cc <BMP280_ReadTemperatureAndPressure+0x3f4>)
 8001704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001708:	b21a      	sxth	r2, r3
 800170a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800170e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001710:	fb03 f001 	mul.w	r0, r3, r1
 8001714:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001716:	fb02 f101 	mul.w	r1, r2, r1
 800171a:	1844      	adds	r4, r0, r1
 800171c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800171e:	fba1 0102 	umull	r0, r1, r1, r2
 8001722:	1863      	adds	r3, r4, r1
 8001724:	4619      	mov	r1, r3
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	0cc2      	lsrs	r2, r0, #19
 8001730:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001734:	14cb      	asrs	r3, r1, #19
 8001736:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 800173a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800173e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001742:	1884      	adds	r4, r0, r2
 8001744:	62bc      	str	r4, [r7, #40]	; 0x28
 8001746:	eb41 0303 	adc.w	r3, r1, r3
 800174a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800174c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001750:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001754:	4621      	mov	r1, r4
 8001756:	1889      	adds	r1, r1, r2
 8001758:	6239      	str	r1, [r7, #32]
 800175a:	4629      	mov	r1, r5
 800175c:	eb43 0101 	adc.w	r1, r3, r1
 8001760:	6279      	str	r1, [r7, #36]	; 0x24
 8001762:	f04f 0000 	mov.w	r0, #0
 8001766:	f04f 0100 	mov.w	r1, #0
 800176a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800176e:	4623      	mov	r3, r4
 8001770:	0a18      	lsrs	r0, r3, #8
 8001772:	462b      	mov	r3, r5
 8001774:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001778:	462b      	mov	r3, r5
 800177a:	1219      	asrs	r1, r3, #8
 800177c:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <BMP280_ReadTemperatureAndPressure+0x3f8>)
 800177e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001782:	b21c      	sxth	r4, r3
 8001784:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	f04f 0300 	mov.w	r3, #0
 8001790:	012b      	lsls	r3, r5, #4
 8001792:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001796:	0122      	lsls	r2, r4, #4
 8001798:	1884      	adds	r4, r0, r2
 800179a:	603c      	str	r4, [r7, #0]
 800179c:	eb41 0303 	adc.w	r3, r1, r3
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80017a6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	  *pressure = (int32_t)p/256;
 80017aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	da00      	bge.n	80017b2 <BMP280_ReadTemperatureAndPressure+0x3da>
 80017b0:	33ff      	adds	r3, #255	; 0xff
 80017b2:	121b      	asrs	r3, r3, #8
 80017b4:	461a      	mov	r2, r3
 80017b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017b8:	601a      	str	r2, [r3, #0]

	  return 0;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3770      	adds	r7, #112	; 0x70
 80017c0:	46bd      	mov	sp, r7
 80017c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017c6:	bf00      	nop
 80017c8:	20000292 	.word	0x20000292
 80017cc:	20000282 	.word	0x20000282
 80017d0:	20000278 	.word	0x20000278

080017d4 <transmit>:
/* USER CODE BEGIN 0 */
#define COUNTOF(_BUFF_) (sizeof(_BUFF_) / sizeof(*(_BUFF_)))
#define RESPOND(str) transmit(str, COUNTOF(str))

void transmit(char* stream, size_t length)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)stream, length-1, 500);
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	3b01      	subs	r3, #1
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	480a      	ldr	r0, [pc, #40]	; (8001818 <transmit+0x44>)
 80017ee:	f004 fb57 	bl	8005ea0 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80017f2:	2201      	movs	r2, #1
 80017f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017f8:	4808      	ldr	r0, [pc, #32]	; (800181c <transmit+0x48>)
 80017fa:	f001 fadf 	bl	8002dbc <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80017fe:	2032      	movs	r0, #50	; 0x32
 8001800:	f000 ffe2 	bl	80027c8 <HAL_Delay>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001804:	2200      	movs	r2, #0
 8001806:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800180a:	4804      	ldr	r0, [pc, #16]	; (800181c <transmit+0x48>)
 800180c:	f001 fad6 	bl	8002dbc <HAL_GPIO_WritePin>
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	200002e8 	.word	0x200002e8
 800181c:	40020400 	.word	0x40020400

08001820 <pid>:


float pid(float y, float set, float* e_sum, float* last_e)
{
 8001820:	b480      	push	{r7}
 8001822:	b08f      	sub	sp, #60	; 0x3c
 8001824:	af00      	add	r7, sp, #0
 8001826:	ed87 0a03 	vstr	s0, [r7, #12]
 800182a:	edc7 0a02 	vstr	s1, [r7, #8]
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
	float kp = 4;
 8001832:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8001836:	637b      	str	r3, [r7, #52]	; 0x34
	float ki = 0.006;
 8001838:	4b2a      	ldr	r3, [pc, #168]	; (80018e4 <pid+0xc4>)
 800183a:	633b      	str	r3, [r7, #48]	; 0x30
	float kd = 5;
 800183c:	4b2a      	ldr	r3, [pc, #168]	; (80018e8 <pid+0xc8>)
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
	float Tp = 0.005;
 8001840:	4b2a      	ldr	r3, [pc, #168]	; (80018ec <pid+0xcc>)
 8001842:	62bb      	str	r3, [r7, #40]	; 0x28

	float e = set - y;
 8001844:	ed97 7a02 	vldr	s14, [r7, #8]
 8001848:	edd7 7a03 	vldr	s15, [r7, #12]
 800184c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001850:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	(*e_sum) = (*e_sum) + e * Tp;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	ed93 7a00 	vldr	s14, [r3]
 800185a:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800185e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001862:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001866:	ee77 7a27 	vadd.f32	s15, s14, s15
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	edc3 7a00 	vstr	s15, [r3]
	float e_diff = e - (*last_e);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	edd3 7a00 	vldr	s15, [r3]
 8001876:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800187a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800187e:	edc7 7a08 	vstr	s15, [r7, #32]
	(*last_e) = e;
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001886:	601a      	str	r2, [r3, #0]

	float p = kp * e;
 8001888:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800188c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001894:	edc7 7a07 	vstr	s15, [r7, #28]
	float i = ki * (*e_sum);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	edd3 7a00 	vldr	s15, [r3]
 800189e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80018a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a6:	edc7 7a06 	vstr	s15, [r7, #24]
	float d = kd * e_diff;
 80018aa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80018ae:	edd7 7a08 	vldr	s15, [r7, #32]
 80018b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018b6:	edc7 7a05 	vstr	s15, [r7, #20]

	e_diff_DEBUG = e_diff;
 80018ba:	4a0d      	ldr	r2, [pc, #52]	; (80018f0 <pid+0xd0>)
 80018bc:	6a3b      	ldr	r3, [r7, #32]
 80018be:	6013      	str	r3, [r2, #0]

	return p + i + d;
 80018c0:	ed97 7a07 	vldr	s14, [r7, #28]
 80018c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80018c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80018d0:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80018d4:	eeb0 0a67 	vmov.f32	s0, s15
 80018d8:	373c      	adds	r7, #60	; 0x3c
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	3bc49ba6 	.word	0x3bc49ba6
 80018e8:	40a00000 	.word	0x40a00000
 80018ec:	3ba3d70a 	.word	0x3ba3d70a
 80018f0:	20000830 	.word	0x20000830

080018f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018f8:	b08d      	sub	sp, #52	; 0x34
 80018fa:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018fc:	f000 ff07 	bl	800270e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001900:	f000 f8c8 	bl	8001a94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001904:	f000 fa90 	bl	8001e28 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001908:	f000 fa30 	bl	8001d6c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800190c:	f000 fa5e 	bl	8001dcc <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8001910:	f000 f928 	bl	8001b64 <MX_SPI1_Init>
  MX_TIM4_Init();
 8001914:	f000 f9dc 	bl	8001cd0 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001918:	f000 f962 	bl	8001be0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800191c:	2101      	movs	r1, #1
 800191e:	484b      	ldr	r0, [pc, #300]	; (8001a4c <main+0x158>)
 8001920:	f001 fa65 	bl	8002dee <HAL_GPIO_TogglePin>

  BMP280_Init(&hspi1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 8001924:	2301      	movs	r3, #1
 8001926:	2203      	movs	r2, #3
 8001928:	2101      	movs	r1, #1
 800192a:	4849      	ldr	r0, [pc, #292]	; (8001a50 <main+0x15c>)
 800192c:	f7ff fbfc 	bl	8001128 <BMP280_Init>
  HAL_TIM_Base_Start_IT(&htim4);
 8001930:	4848      	ldr	r0, [pc, #288]	; (8001a54 <main+0x160>)
 8001932:	f003 f903 	bl	8004b3c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001936:	2108      	movs	r1, #8
 8001938:	4847      	ldr	r0, [pc, #284]	; (8001a58 <main+0x164>)
 800193a:	f003 f9d9 	bl	8004cf0 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800193e:	2101      	movs	r1, #1
 8001940:	4842      	ldr	r0, [pc, #264]	; (8001a4c <main+0x158>)
 8001942:	f001 fa54 	bl	8002dee <HAL_GPIO_TogglePin>

	  GPIO_PinState buttonState = HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin);
 8001946:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800194a:	4844      	ldr	r0, [pc, #272]	; (8001a5c <main+0x168>)
 800194c:	f001 fa1e 	bl	8002d8c <HAL_GPIO_ReadPin>
 8001950:	4603      	mov	r3, r0
 8001952:	71fb      	strb	r3, [r7, #7]
	  if (buttonState == GPIO_PIN_SET)
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d10c      	bne.n	8001974 <main+0x80>
	  {
		  enabled = !enabled;
 800195a:	4b41      	ldr	r3, [pc, #260]	; (8001a60 <main+0x16c>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	bf0c      	ite	eq
 8001962:	2301      	moveq	r3, #1
 8001964:	2300      	movne	r3, #0
 8001966:	b2db      	uxtb	r3, r3
 8001968:	461a      	mov	r2, r3
 800196a:	4b3d      	ldr	r3, [pc, #244]	; (8001a60 <main+0x16c>)
 800196c:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(100);
 800196e:	2064      	movs	r0, #100	; 0x64
 8001970:	f000 ff2a 	bl	80027c8 <HAL_Delay>
	  }

	  // COMMANDS
	  uint8_t key[4];
	  HAL_StatusTypeDef status = HAL_UART_Receive(&huart3, key, 4, 100);
 8001974:	4639      	mov	r1, r7
 8001976:	2364      	movs	r3, #100	; 0x64
 8001978:	2204      	movs	r2, #4
 800197a:	483a      	ldr	r0, [pc, #232]	; (8001a64 <main+0x170>)
 800197c:	f004 fb23 	bl	8005fc6 <HAL_UART_Receive>
 8001980:	4603      	mov	r3, r0
 8001982:	71bb      	strb	r3, [r7, #6]

	  if (status == HAL_OK)
 8001984:	79bb      	ldrb	r3, [r7, #6]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d125      	bne.n	80019d6 <main+0xe2>
	  {
		  RESPOND("Received ");
 800198a:	210a      	movs	r1, #10
 800198c:	4836      	ldr	r0, [pc, #216]	; (8001a68 <main+0x174>)
 800198e:	f7ff ff21 	bl	80017d4 <transmit>
		  transmit((char*)key, 5);
 8001992:	463b      	mov	r3, r7
 8001994:	2105      	movs	r1, #5
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff ff1c 	bl	80017d4 <transmit>
		  RESPOND("\n\r");
 800199c:	2103      	movs	r1, #3
 800199e:	4833      	ldr	r0, [pc, #204]	; (8001a6c <main+0x178>)
 80019a0:	f7ff ff18 	bl	80017d4 <transmit>

		  if (key[0] == 'S')
 80019a4:	783b      	ldrb	r3, [r7, #0]
 80019a6:	2b53      	cmp	r3, #83	; 0x53
 80019a8:	d115      	bne.n	80019d6 <main+0xe2>
		  {
			  RESPOND("Trying to set the temperature\n\r");
 80019aa:	2120      	movs	r1, #32
 80019ac:	4830      	ldr	r0, [pc, #192]	; (8001a70 <main+0x17c>)
 80019ae:	f7ff ff11 	bl	80017d4 <transmit>
			  set_value = (key[1] - '0') * 100 + (key[2] - '0') * 10 + key[3] - '0';
 80019b2:	787b      	ldrb	r3, [r7, #1]
 80019b4:	3b30      	subs	r3, #48	; 0x30
 80019b6:	2264      	movs	r2, #100	; 0x64
 80019b8:	fb02 f103 	mul.w	r1, r2, r3
 80019bc:	78bb      	ldrb	r3, [r7, #2]
 80019be:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80019c2:	4613      	mov	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	440b      	add	r3, r1
 80019cc:	78fa      	ldrb	r2, [r7, #3]
 80019ce:	4413      	add	r3, r2
 80019d0:	3b30      	subs	r3, #48	; 0x30
 80019d2:	4a28      	ldr	r2, [pc, #160]	; (8001a74 <main+0x180>)
 80019d4:	6013      	str	r3, [r2, #0]
		  }
	  }

	  // DATA READ
	  BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 80019d6:	4928      	ldr	r1, [pc, #160]	; (8001a78 <main+0x184>)
 80019d8:	4828      	ldr	r0, [pc, #160]	; (8001a7c <main+0x188>)
 80019da:	f7ff fcfd 	bl	80013d8 <BMP280_ReadTemperatureAndPressure>

	  // SENDING DATA OUT
	  snprintf(text, sizeof(text), "%.3f,%d,%.3f,%.3f,%.3f\n\r", (double)temperature, set_value, (double)u_DEBUG, (float)e_sum_pid, (float)e_diff_DEBUG);
 80019de:	4b27      	ldr	r3, [pc, #156]	; (8001a7c <main+0x188>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe fdd0 	bl	8000588 <__aeabi_f2d>
 80019e8:	4604      	mov	r4, r0
 80019ea:	460d      	mov	r5, r1
 80019ec:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <main+0x180>)
 80019ee:	681e      	ldr	r6, [r3, #0]
 80019f0:	4b23      	ldr	r3, [pc, #140]	; (8001a80 <main+0x18c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fdc7 	bl	8000588 <__aeabi_f2d>
 80019fa:	4680      	mov	r8, r0
 80019fc:	4689      	mov	r9, r1
 80019fe:	4b21      	ldr	r3, [pc, #132]	; (8001a84 <main+0x190>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe fdc0 	bl	8000588 <__aeabi_f2d>
 8001a08:	4682      	mov	sl, r0
 8001a0a:	468b      	mov	fp, r1
 8001a0c:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <main+0x194>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fdb9 	bl	8000588 <__aeabi_f2d>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001a1e:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8001a22:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001a26:	9602      	str	r6, [sp, #8]
 8001a28:	e9cd 4500 	strd	r4, r5, [sp]
 8001a2c:	4a17      	ldr	r2, [pc, #92]	; (8001a8c <main+0x198>)
 8001a2e:	2164      	movs	r1, #100	; 0x64
 8001a30:	4817      	ldr	r0, [pc, #92]	; (8001a90 <main+0x19c>)
 8001a32:	f005 ff1f 	bl	8007874 <sniprintf>
	  transmit(text, strlen(text) + 1);
 8001a36:	4816      	ldr	r0, [pc, #88]	; (8001a90 <main+0x19c>)
 8001a38:	f7fe fbea 	bl	8000210 <strlen>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	3301      	adds	r3, #1
 8001a40:	4619      	mov	r1, r3
 8001a42:	4813      	ldr	r0, [pc, #76]	; (8001a90 <main+0x19c>)
 8001a44:	f7ff fec6 	bl	80017d4 <transmit>
  {
 8001a48:	e779      	b.n	800193e <main+0x4a>
 8001a4a:	bf00      	nop
 8001a4c:	40020400 	.word	0x40020400
 8001a50:	200007cc 	.word	0x200007cc
 8001a54:	2000029c 	.word	0x2000029c
 8001a58:	20000778 	.word	0x20000778
 8001a5c:	40020800 	.word	0x40020800
 8001a60:	20000200 	.word	0x20000200
 8001a64:	200002e8 	.word	0x200002e8
 8001a68:	08009d10 	.word	0x08009d10
 8001a6c:	08009d1c 	.word	0x08009d1c
 8001a70:	08009d20 	.word	0x08009d20
 8001a74:	20000000 	.word	0x20000000
 8001a78:	200007c4 	.word	0x200007c4
 8001a7c:	20000774 	.word	0x20000774
 8001a80:	200007c8 	.word	0x200007c8
 8001a84:	20000770 	.word	0x20000770
 8001a88:	20000830 	.word	0x20000830
 8001a8c:	08009d40 	.word	0x08009d40
 8001a90:	20000204 	.word	0x20000204

08001a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b094      	sub	sp, #80	; 0x50
 8001a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a9a:	f107 0320 	add.w	r3, r7, #32
 8001a9e:	2230      	movs	r2, #48	; 0x30
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f005 fa74 	bl	8006f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ab8:	f001 fafc 	bl	80030b4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001abc:	4b27      	ldr	r3, [pc, #156]	; (8001b5c <SystemClock_Config+0xc8>)
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	4a26      	ldr	r2, [pc, #152]	; (8001b5c <SystemClock_Config+0xc8>)
 8001ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac8:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <SystemClock_Config+0xc8>)
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ad4:	4b22      	ldr	r3, [pc, #136]	; (8001b60 <SystemClock_Config+0xcc>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001adc:	4a20      	ldr	r2, [pc, #128]	; (8001b60 <SystemClock_Config+0xcc>)
 8001ade:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	4b1e      	ldr	r3, [pc, #120]	; (8001b60 <SystemClock_Config+0xcc>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001af0:	2301      	movs	r3, #1
 8001af2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001af4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001afa:	2302      	movs	r3, #2
 8001afc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001afe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b04:	2304      	movs	r3, #4
 8001b06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001b08:	2348      	movs	r3, #72	; 0x48
 8001b0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001b10:	2303      	movs	r3, #3
 8001b12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b14:	f107 0320 	add.w	r3, r7, #32
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f001 fadb 	bl	80030d4 <HAL_RCC_OscConfig>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b24:	f000 fae6 	bl	80020f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b28:	230f      	movs	r3, #15
 8001b2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b3e:	f107 030c 	add.w	r3, r7, #12
 8001b42:	2102      	movs	r1, #2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f001 fd69 	bl	800361c <HAL_RCC_ClockConfig>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001b50:	f000 fad0 	bl	80020f4 <Error_Handler>
  }
}
 8001b54:	bf00      	nop
 8001b56:	3750      	adds	r7, #80	; 0x50
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40007000 	.word	0x40007000

08001b64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b68:	4b1b      	ldr	r3, [pc, #108]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001b6a:	4a1c      	ldr	r2, [pc, #112]	; (8001bdc <MX_SPI1_Init+0x78>)
 8001b6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001b70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b76:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b7c:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001b7e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b82:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b84:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b8a:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001b92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b96:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b98:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001b9a:	2218      	movs	r2, #24
 8001b9c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001baa:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001bb2:	2207      	movs	r2, #7
 8001bb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001bbe:	2208      	movs	r2, #8
 8001bc0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bc2:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001bc4:	f002 fb1c 	bl	8004200 <HAL_SPI_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001bce:	f000 fa91 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	200007cc 	.word	0x200007cc
 8001bdc:	40013000 	.word	0x40013000

08001be0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08e      	sub	sp, #56	; 0x38
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001be6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]
 8001bf0:	609a      	str	r2, [r3, #8]
 8001bf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf4:	f107 031c 	add.w	r3, r7, #28
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c00:	463b      	mov	r3, r7
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	609a      	str	r2, [r3, #8]
 8001c0a:	60da      	str	r2, [r3, #12]
 8001c0c:	611a      	str	r2, [r3, #16]
 8001c0e:	615a      	str	r2, [r3, #20]
 8001c10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c12:	4b2d      	ldr	r3, [pc, #180]	; (8001cc8 <MX_TIM3_Init+0xe8>)
 8001c14:	4a2d      	ldr	r2, [pc, #180]	; (8001ccc <MX_TIM3_Init+0xec>)
 8001c16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001c18:	4b2b      	ldr	r3, [pc, #172]	; (8001cc8 <MX_TIM3_Init+0xe8>)
 8001c1a:	2247      	movs	r2, #71	; 0x47
 8001c1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1e:	4b2a      	ldr	r3, [pc, #168]	; (8001cc8 <MX_TIM3_Init+0xe8>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8001c24:	4b28      	ldr	r3, [pc, #160]	; (8001cc8 <MX_TIM3_Init+0xe8>)
 8001c26:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001c2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2c:	4b26      	ldr	r3, [pc, #152]	; (8001cc8 <MX_TIM3_Init+0xe8>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c32:	4b25      	ldr	r3, [pc, #148]	; (8001cc8 <MX_TIM3_Init+0xe8>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c38:	4823      	ldr	r0, [pc, #140]	; (8001cc8 <MX_TIM3_Init+0xe8>)
 8001c3a:	f002 ff27 	bl	8004a8c <HAL_TIM_Base_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001c44:	f000 fa56 	bl	80020f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c52:	4619      	mov	r1, r3
 8001c54:	481c      	ldr	r0, [pc, #112]	; (8001cc8 <MX_TIM3_Init+0xe8>)
 8001c56:	f003 fb79 	bl	800534c <HAL_TIM_ConfigClockSource>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001c60:	f000 fa48 	bl	80020f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c64:	4818      	ldr	r0, [pc, #96]	; (8001cc8 <MX_TIM3_Init+0xe8>)
 8001c66:	f002 ffe1 	bl	8004c2c <HAL_TIM_PWM_Init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001c70:	f000 fa40 	bl	80020f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c7c:	f107 031c 	add.w	r3, r7, #28
 8001c80:	4619      	mov	r1, r3
 8001c82:	4811      	ldr	r0, [pc, #68]	; (8001cc8 <MX_TIM3_Init+0xe8>)
 8001c84:	f004 f812 	bl	8005cac <HAL_TIMEx_MasterConfigSynchronization>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001c8e:	f000 fa31 	bl	80020f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c92:	2360      	movs	r3, #96	; 0x60
 8001c94:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	2208      	movs	r2, #8
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4807      	ldr	r0, [pc, #28]	; (8001cc8 <MX_TIM3_Init+0xe8>)
 8001caa:	f003 fa3b 	bl	8005124 <HAL_TIM_PWM_ConfigChannel>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001cb4:	f000 fa1e 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cb8:	4803      	ldr	r0, [pc, #12]	; (8001cc8 <MX_TIM3_Init+0xe8>)
 8001cba:	f000 fae1 	bl	8002280 <HAL_TIM_MspPostInit>

}
 8001cbe:	bf00      	nop
 8001cc0:	3738      	adds	r7, #56	; 0x38
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000778 	.word	0x20000778
 8001ccc:	40000400 	.word	0x40000400

08001cd0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cd6:	f107 0310 	add.w	r3, r7, #16
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001cee:	4b1d      	ldr	r3, [pc, #116]	; (8001d64 <MX_TIM4_Init+0x94>)
 8001cf0:	4a1d      	ldr	r2, [pc, #116]	; (8001d68 <MX_TIM4_Init+0x98>)
 8001cf2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8001cf4:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <MX_TIM4_Init+0x94>)
 8001cf6:	2247      	movs	r2, #71	; 0x47
 8001cf8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfa:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <MX_TIM4_Init+0x94>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4999;
 8001d00:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <MX_TIM4_Init+0x94>)
 8001d02:	f241 3287 	movw	r2, #4999	; 0x1387
 8001d06:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d08:	4b16      	ldr	r3, [pc, #88]	; (8001d64 <MX_TIM4_Init+0x94>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <MX_TIM4_Init+0x94>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d14:	4813      	ldr	r0, [pc, #76]	; (8001d64 <MX_TIM4_Init+0x94>)
 8001d16:	f002 feb9 	bl	8004a8c <HAL_TIM_Base_Init>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001d20:	f000 f9e8 	bl	80020f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d28:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d2a:	f107 0310 	add.w	r3, r7, #16
 8001d2e:	4619      	mov	r1, r3
 8001d30:	480c      	ldr	r0, [pc, #48]	; (8001d64 <MX_TIM4_Init+0x94>)
 8001d32:	f003 fb0b 	bl	800534c <HAL_TIM_ConfigClockSource>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001d3c:	f000 f9da 	bl	80020f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d40:	2300      	movs	r3, #0
 8001d42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d48:	1d3b      	adds	r3, r7, #4
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4805      	ldr	r0, [pc, #20]	; (8001d64 <MX_TIM4_Init+0x94>)
 8001d4e:	f003 ffad 	bl	8005cac <HAL_TIMEx_MasterConfigSynchronization>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001d58:	f000 f9cc 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d5c:	bf00      	nop
 8001d5e:	3720      	adds	r7, #32
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	2000029c 	.word	0x2000029c
 8001d68:	40000800 	.word	0x40000800

08001d6c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d70:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <MX_USART3_UART_Init+0x58>)
 8001d72:	4a15      	ldr	r2, [pc, #84]	; (8001dc8 <MX_USART3_UART_Init+0x5c>)
 8001d74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d76:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <MX_USART3_UART_Init+0x58>)
 8001d78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <MX_USART3_UART_Init+0x58>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d84:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <MX_USART3_UART_Init+0x58>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <MX_USART3_UART_Init+0x58>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d90:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <MX_USART3_UART_Init+0x58>)
 8001d92:	220c      	movs	r2, #12
 8001d94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d96:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <MX_USART3_UART_Init+0x58>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d9c:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <MX_USART3_UART_Init+0x58>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001da2:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <MX_USART3_UART_Init+0x58>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001da8:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <MX_USART3_UART_Init+0x58>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001dae:	4805      	ldr	r0, [pc, #20]	; (8001dc4 <MX_USART3_UART_Init+0x58>)
 8001db0:	f004 f828 	bl	8005e04 <HAL_UART_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001dba:	f000 f99b 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	200002e8 	.word	0x200002e8
 8001dc8:	40004800 	.word	0x40004800

08001dcc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001dd0:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dd2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001dd6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dda:	2206      	movs	r2, #6
 8001ddc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001de0:	2202      	movs	r2, #2
 8001de2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001de4:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dec:	2202      	movs	r2, #2
 8001dee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001df6:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001dfc:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001e02:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001e0e:	4805      	ldr	r0, [pc, #20]	; (8001e24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e10:	f001 f807 	bl	8002e22 <HAL_PCD_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001e1a:	f000 f96b 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	2000036c 	.word	0x2000036c

08001e28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08c      	sub	sp, #48	; 0x30
 8001e2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2e:	f107 031c 	add.w	r3, r7, #28
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	605a      	str	r2, [r3, #4]
 8001e38:	609a      	str	r2, [r3, #8]
 8001e3a:	60da      	str	r2, [r3, #12]
 8001e3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e3e:	4b71      	ldr	r3, [pc, #452]	; (8002004 <MX_GPIO_Init+0x1dc>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	4a70      	ldr	r2, [pc, #448]	; (8002004 <MX_GPIO_Init+0x1dc>)
 8001e44:	f043 0304 	orr.w	r3, r3, #4
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4b6e      	ldr	r3, [pc, #440]	; (8002004 <MX_GPIO_Init+0x1dc>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	61bb      	str	r3, [r7, #24]
 8001e54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e56:	4b6b      	ldr	r3, [pc, #428]	; (8002004 <MX_GPIO_Init+0x1dc>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4a6a      	ldr	r2, [pc, #424]	; (8002004 <MX_GPIO_Init+0x1dc>)
 8001e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4b68      	ldr	r3, [pc, #416]	; (8002004 <MX_GPIO_Init+0x1dc>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6e:	4b65      	ldr	r3, [pc, #404]	; (8002004 <MX_GPIO_Init+0x1dc>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	4a64      	ldr	r2, [pc, #400]	; (8002004 <MX_GPIO_Init+0x1dc>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7a:	4b62      	ldr	r3, [pc, #392]	; (8002004 <MX_GPIO_Init+0x1dc>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e86:	4b5f      	ldr	r3, [pc, #380]	; (8002004 <MX_GPIO_Init+0x1dc>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a5e      	ldr	r2, [pc, #376]	; (8002004 <MX_GPIO_Init+0x1dc>)
 8001e8c:	f043 0302 	orr.w	r3, r3, #2
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b5c      	ldr	r3, [pc, #368]	; (8002004 <MX_GPIO_Init+0x1dc>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e9e:	4b59      	ldr	r3, [pc, #356]	; (8002004 <MX_GPIO_Init+0x1dc>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a58      	ldr	r2, [pc, #352]	; (8002004 <MX_GPIO_Init+0x1dc>)
 8001ea4:	f043 0308 	orr.w	r3, r3, #8
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b56      	ldr	r3, [pc, #344]	; (8002004 <MX_GPIO_Init+0x1dc>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001eb6:	4b53      	ldr	r3, [pc, #332]	; (8002004 <MX_GPIO_Init+0x1dc>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a52      	ldr	r2, [pc, #328]	; (8002004 <MX_GPIO_Init+0x1dc>)
 8001ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec2:	4b50      	ldr	r3, [pc, #320]	; (8002004 <MX_GPIO_Init+0x1dc>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eca:	607b      	str	r3, [r7, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CSB_GPIO_Port, SPI1_CSB_Pin, GPIO_PIN_RESET);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2110      	movs	r1, #16
 8001ed2:	484d      	ldr	r0, [pc, #308]	; (8002008 <MX_GPIO_Init+0x1e0>)
 8001ed4:	f000 ff72 	bl	8002dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f244 0181 	movw	r1, #16513	; 0x4081
 8001ede:	484b      	ldr	r0, [pc, #300]	; (800200c <MX_GPIO_Init+0x1e4>)
 8001ee0:	f000 ff6c 	bl	8002dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	2140      	movs	r1, #64	; 0x40
 8001ee8:	4849      	ldr	r0, [pc, #292]	; (8002010 <MX_GPIO_Init+0x1e8>)
 8001eea:	f000 ff67 	bl	8002dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001eee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ef2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ef4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ef8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001efe:	f107 031c 	add.w	r3, r7, #28
 8001f02:	4619      	mov	r1, r3
 8001f04:	4843      	ldr	r0, [pc, #268]	; (8002014 <MX_GPIO_Init+0x1ec>)
 8001f06:	f000 fd95 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001f0a:	2332      	movs	r3, #50	; 0x32
 8001f0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f16:	2303      	movs	r3, #3
 8001f18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f1a:	230b      	movs	r3, #11
 8001f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f1e:	f107 031c 	add.w	r3, r7, #28
 8001f22:	4619      	mov	r1, r3
 8001f24:	483b      	ldr	r0, [pc, #236]	; (8002014 <MX_GPIO_Init+0x1ec>)
 8001f26:	f000 fd85 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001f2a:	2386      	movs	r3, #134	; 0x86
 8001f2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f36:	2303      	movs	r3, #3
 8001f38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f3a:	230b      	movs	r3, #11
 8001f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3e:	f107 031c 	add.w	r3, r7, #28
 8001f42:	4619      	mov	r1, r3
 8001f44:	4830      	ldr	r0, [pc, #192]	; (8002008 <MX_GPIO_Init+0x1e0>)
 8001f46:	f000 fd75 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CSB_Pin */
  GPIO_InitStruct.Pin = SPI1_CSB_Pin;
 8001f4a:	2310      	movs	r3, #16
 8001f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f56:	2300      	movs	r3, #0
 8001f58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CSB_GPIO_Port, &GPIO_InitStruct);
 8001f5a:	f107 031c 	add.w	r3, r7, #28
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4829      	ldr	r0, [pc, #164]	; (8002008 <MX_GPIO_Init+0x1e0>)
 8001f62:	f000 fd67 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001f66:	f244 0381 	movw	r3, #16513	; 0x4081
 8001f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f74:	2300      	movs	r3, #0
 8001f76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f78:	f107 031c 	add.w	r3, r7, #28
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4823      	ldr	r0, [pc, #140]	; (800200c <MX_GPIO_Init+0x1e4>)
 8001f80:	f000 fd58 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001f84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f92:	2303      	movs	r3, #3
 8001f94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f96:	230b      	movs	r3, #11
 8001f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001f9a:	f107 031c 	add.w	r3, r7, #28
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	481a      	ldr	r0, [pc, #104]	; (800200c <MX_GPIO_Init+0x1e4>)
 8001fa2:	f000 fd47 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001fa6:	2340      	movs	r3, #64	; 0x40
 8001fa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001faa:	2301      	movs	r3, #1
 8001fac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001fb6:	f107 031c 	add.w	r3, r7, #28
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4814      	ldr	r0, [pc, #80]	; (8002010 <MX_GPIO_Init+0x1e8>)
 8001fbe:	f000 fd39 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001fce:	f107 031c 	add.w	r3, r7, #28
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	480e      	ldr	r0, [pc, #56]	; (8002010 <MX_GPIO_Init+0x1e8>)
 8001fd6:	f000 fd2d 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001fda:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fec:	230b      	movs	r3, #11
 8001fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ff0:	f107 031c 	add.w	r3, r7, #28
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4806      	ldr	r0, [pc, #24]	; (8002010 <MX_GPIO_Init+0x1e8>)
 8001ff8:	f000 fd1c 	bl	8002a34 <HAL_GPIO_Init>

}
 8001ffc:	bf00      	nop
 8001ffe:	3730      	adds	r7, #48	; 0x30
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40023800 	.word	0x40023800
 8002008:	40020000 	.word	0x40020000
 800200c:	40020400 	.word	0x40020400
 8002010:	40021800 	.word	0x40021800
 8002014:	40020800 	.word	0x40020800

08002018 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, enabled);
 8002020:	4b2a      	ldr	r3, [pc, #168]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	461a      	mov	r2, r3
 8002026:	2180      	movs	r1, #128	; 0x80
 8002028:	4829      	ldr	r0, [pc, #164]	; (80020d0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800202a:	f000 fec7 	bl	8002dbc <HAL_GPIO_WritePin>

	// PID
	float u = pid(temperature, (float)set_value, &e_sum_pid, &last_e_pid);
 800202e:	4b29      	ldr	r3, [pc, #164]	; (80020d4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002030:	edd3 7a00 	vldr	s15, [r3]
 8002034:	4b28      	ldr	r3, [pc, #160]	; (80020d8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	ee07 3a10 	vmov	s14, r3
 800203c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002040:	4926      	ldr	r1, [pc, #152]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002042:	4827      	ldr	r0, [pc, #156]	; (80020e0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002044:	eef0 0a47 	vmov.f32	s1, s14
 8002048:	eeb0 0a67 	vmov.f32	s0, s15
 800204c:	f7ff fbe8 	bl	8001820 <pid>
 8002050:	ed87 0a03 	vstr	s0, [r7, #12]
	if (u > 5) u = 5;
 8002054:	edd7 7a03 	vldr	s15, [r7, #12]
 8002058:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800205c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002064:	dd01      	ble.n	800206a <HAL_TIM_PeriodElapsedCallback+0x52>
 8002066:	4b1f      	ldr	r3, [pc, #124]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002068:	60fb      	str	r3, [r7, #12]
	if (u < 0) u = 0;
 800206a:	edd7 7a03 	vldr	s15, [r7, #12]
 800206e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002076:	d502      	bpl.n	800207e <HAL_TIM_PeriodElapsedCallback+0x66>
 8002078:	f04f 0300 	mov.w	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]

	u /= 5;
 800207e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002082:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002086:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800208a:	edc7 7a03 	vstr	s15, [r7, #12]

	if (!enabled)
 800208e:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d106      	bne.n	80020a4 <HAL_TIM_PeriodElapsedCallback+0x8c>
	{
		u = 0;
 8002096:	f04f 0300 	mov.w	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]
		e_sum_pid = 0;
 800209c:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800209e:	f04f 0200 	mov.w	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
	}

	// SET U
	u_DEBUG = u;
 80020a4:	4a10      	ldr	r2, [pc, #64]	; (80020e8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, u * 19999);
 80020aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80020ae:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80020ec <HAL_TIM_PeriodElapsedCallback+0xd4>
 80020b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020be:	ee17 2a90 	vmov	r2, s15
 80020c2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80020c4:	bf00      	nop
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20000200 	.word	0x20000200
 80020d0:	40020400 	.word	0x40020400
 80020d4:	20000774 	.word	0x20000774
 80020d8:	20000000 	.word	0x20000000
 80020dc:	200001fc 	.word	0x200001fc
 80020e0:	20000770 	.word	0x20000770
 80020e4:	40a00000 	.word	0x40a00000
 80020e8:	200007c8 	.word	0x200007c8
 80020ec:	469c3e00 	.word	0x469c3e00
 80020f0:	20000778 	.word	0x20000778

080020f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020f8:	b672      	cpsid	i
}
 80020fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020fc:	e7fe      	b.n	80020fc <Error_Handler+0x8>
	...

08002100 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002106:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <HAL_MspInit+0x44>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	4a0e      	ldr	r2, [pc, #56]	; (8002144 <HAL_MspInit+0x44>)
 800210c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002110:	6413      	str	r3, [r2, #64]	; 0x40
 8002112:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <HAL_MspInit+0x44>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211a:	607b      	str	r3, [r7, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211e:	4b09      	ldr	r3, [pc, #36]	; (8002144 <HAL_MspInit+0x44>)
 8002120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002122:	4a08      	ldr	r2, [pc, #32]	; (8002144 <HAL_MspInit+0x44>)
 8002124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002128:	6453      	str	r3, [r2, #68]	; 0x44
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_MspInit+0x44>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002132:	603b      	str	r3, [r7, #0]
 8002134:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800

08002148 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08a      	sub	sp, #40	; 0x28
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a25      	ldr	r2, [pc, #148]	; (80021fc <HAL_SPI_MspInit+0xb4>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d143      	bne.n	80021f2 <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800216a:	4b25      	ldr	r3, [pc, #148]	; (8002200 <HAL_SPI_MspInit+0xb8>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	4a24      	ldr	r2, [pc, #144]	; (8002200 <HAL_SPI_MspInit+0xb8>)
 8002170:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002174:	6453      	str	r3, [r2, #68]	; 0x44
 8002176:	4b22      	ldr	r3, [pc, #136]	; (8002200 <HAL_SPI_MspInit+0xb8>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002182:	4b1f      	ldr	r3, [pc, #124]	; (8002200 <HAL_SPI_MspInit+0xb8>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a1e      	ldr	r2, [pc, #120]	; (8002200 <HAL_SPI_MspInit+0xb8>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b1c      	ldr	r3, [pc, #112]	; (8002200 <HAL_SPI_MspInit+0xb8>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800219a:	4b19      	ldr	r3, [pc, #100]	; (8002200 <HAL_SPI_MspInit+0xb8>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	4a18      	ldr	r2, [pc, #96]	; (8002200 <HAL_SPI_MspInit+0xb8>)
 80021a0:	f043 0302 	orr.w	r3, r3, #2
 80021a4:	6313      	str	r3, [r2, #48]	; 0x30
 80021a6:	4b16      	ldr	r3, [pc, #88]	; (8002200 <HAL_SPI_MspInit+0xb8>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	60bb      	str	r3, [r7, #8]
 80021b0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80021b2:	2360      	movs	r3, #96	; 0x60
 80021b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b6:	2302      	movs	r3, #2
 80021b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021be:	2303      	movs	r3, #3
 80021c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021c2:	2305      	movs	r3, #5
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c6:	f107 0314 	add.w	r3, r7, #20
 80021ca:	4619      	mov	r1, r3
 80021cc:	480d      	ldr	r0, [pc, #52]	; (8002204 <HAL_SPI_MspInit+0xbc>)
 80021ce:	f000 fc31 	bl	8002a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80021d2:	2320      	movs	r3, #32
 80021d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d6:	2302      	movs	r3, #2
 80021d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021de:	2303      	movs	r3, #3
 80021e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021e2:	2305      	movs	r3, #5
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e6:	f107 0314 	add.w	r3, r7, #20
 80021ea:	4619      	mov	r1, r3
 80021ec:	4806      	ldr	r0, [pc, #24]	; (8002208 <HAL_SPI_MspInit+0xc0>)
 80021ee:	f000 fc21 	bl	8002a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80021f2:	bf00      	nop
 80021f4:	3728      	adds	r7, #40	; 0x28
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40013000 	.word	0x40013000
 8002200:	40023800 	.word	0x40023800
 8002204:	40020000 	.word	0x40020000
 8002208:	40020400 	.word	0x40020400

0800220c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a16      	ldr	r2, [pc, #88]	; (8002274 <HAL_TIM_Base_MspInit+0x68>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d10c      	bne.n	8002238 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800221e:	4b16      	ldr	r3, [pc, #88]	; (8002278 <HAL_TIM_Base_MspInit+0x6c>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	4a15      	ldr	r2, [pc, #84]	; (8002278 <HAL_TIM_Base_MspInit+0x6c>)
 8002224:	f043 0302 	orr.w	r3, r3, #2
 8002228:	6413      	str	r3, [r2, #64]	; 0x40
 800222a:	4b13      	ldr	r3, [pc, #76]	; (8002278 <HAL_TIM_Base_MspInit+0x6c>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002236:	e018      	b.n	800226a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a0f      	ldr	r2, [pc, #60]	; (800227c <HAL_TIM_Base_MspInit+0x70>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d113      	bne.n	800226a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002242:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <HAL_TIM_Base_MspInit+0x6c>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	4a0c      	ldr	r2, [pc, #48]	; (8002278 <HAL_TIM_Base_MspInit+0x6c>)
 8002248:	f043 0304 	orr.w	r3, r3, #4
 800224c:	6413      	str	r3, [r2, #64]	; 0x40
 800224e:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <HAL_TIM_Base_MspInit+0x6c>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f003 0304 	and.w	r3, r3, #4
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800225a:	2200      	movs	r2, #0
 800225c:	2100      	movs	r1, #0
 800225e:	201e      	movs	r0, #30
 8002260:	f000 fbb1 	bl	80029c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002264:	201e      	movs	r0, #30
 8002266:	f000 fbca 	bl	80029fe <HAL_NVIC_EnableIRQ>
}
 800226a:	bf00      	nop
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40000400 	.word	0x40000400
 8002278:	40023800 	.word	0x40023800
 800227c:	40000800 	.word	0x40000800

08002280 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002288:	f107 030c 	add.w	r3, r7, #12
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	60da      	str	r2, [r3, #12]
 8002296:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a11      	ldr	r2, [pc, #68]	; (80022e4 <HAL_TIM_MspPostInit+0x64>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d11c      	bne.n	80022dc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022a2:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <HAL_TIM_MspPostInit+0x68>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	4a10      	ldr	r2, [pc, #64]	; (80022e8 <HAL_TIM_MspPostInit+0x68>)
 80022a8:	f043 0304 	orr.w	r3, r3, #4
 80022ac:	6313      	str	r3, [r2, #48]	; 0x30
 80022ae:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <HAL_TIM_MspPostInit+0x68>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	f003 0304 	and.w	r3, r3, #4
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c0:	2302      	movs	r3, #2
 80022c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022cc:	2302      	movs	r3, #2
 80022ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d0:	f107 030c 	add.w	r3, r7, #12
 80022d4:	4619      	mov	r1, r3
 80022d6:	4805      	ldr	r0, [pc, #20]	; (80022ec <HAL_TIM_MspPostInit+0x6c>)
 80022d8:	f000 fbac 	bl	8002a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80022dc:	bf00      	nop
 80022de:	3720      	adds	r7, #32
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40000400 	.word	0x40000400
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40020800 	.word	0x40020800

080022f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b0aa      	sub	sp, #168	; 0xa8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002308:	f107 0310 	add.w	r3, r7, #16
 800230c:	2284      	movs	r2, #132	; 0x84
 800230e:	2100      	movs	r1, #0
 8002310:	4618      	mov	r0, r3
 8002312:	f004 fe3d 	bl	8006f90 <memset>
  if(huart->Instance==USART3)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a22      	ldr	r2, [pc, #136]	; (80023a4 <HAL_UART_MspInit+0xb4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d13c      	bne.n	800239a <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002320:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002324:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002326:	2300      	movs	r3, #0
 8002328:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800232a:	f107 0310 	add.w	r3, r7, #16
 800232e:	4618      	mov	r0, r3
 8002330:	f001 fb76 	bl	8003a20 <HAL_RCCEx_PeriphCLKConfig>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800233a:	f7ff fedb 	bl	80020f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800233e:	4b1a      	ldr	r3, [pc, #104]	; (80023a8 <HAL_UART_MspInit+0xb8>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	4a19      	ldr	r2, [pc, #100]	; (80023a8 <HAL_UART_MspInit+0xb8>)
 8002344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002348:	6413      	str	r3, [r2, #64]	; 0x40
 800234a:	4b17      	ldr	r3, [pc, #92]	; (80023a8 <HAL_UART_MspInit+0xb8>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002356:	4b14      	ldr	r3, [pc, #80]	; (80023a8 <HAL_UART_MspInit+0xb8>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	4a13      	ldr	r2, [pc, #76]	; (80023a8 <HAL_UART_MspInit+0xb8>)
 800235c:	f043 0308 	orr.w	r3, r3, #8
 8002360:	6313      	str	r3, [r2, #48]	; 0x30
 8002362:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <HAL_UART_MspInit+0xb8>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800236e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002372:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002376:	2302      	movs	r3, #2
 8002378:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002382:	2303      	movs	r3, #3
 8002384:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002388:	2307      	movs	r3, #7
 800238a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800238e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002392:	4619      	mov	r1, r3
 8002394:	4805      	ldr	r0, [pc, #20]	; (80023ac <HAL_UART_MspInit+0xbc>)
 8002396:	f000 fb4d 	bl	8002a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800239a:	bf00      	nop
 800239c:	37a8      	adds	r7, #168	; 0xa8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40004800 	.word	0x40004800
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40020c00 	.word	0x40020c00

080023b0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b0ac      	sub	sp, #176	; 0xb0
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
 80023c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023c8:	f107 0318 	add.w	r3, r7, #24
 80023cc:	2284      	movs	r2, #132	; 0x84
 80023ce:	2100      	movs	r1, #0
 80023d0:	4618      	mov	r0, r3
 80023d2:	f004 fddd 	bl	8006f90 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023de:	d159      	bne.n	8002494 <HAL_PCD_MspInit+0xe4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80023e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023e4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023ec:	f107 0318 	add.w	r3, r7, #24
 80023f0:	4618      	mov	r0, r3
 80023f2:	f001 fb15 	bl	8003a20 <HAL_RCCEx_PeriphCLKConfig>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80023fc:	f7ff fe7a 	bl	80020f4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002400:	4b26      	ldr	r3, [pc, #152]	; (800249c <HAL_PCD_MspInit+0xec>)
 8002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002404:	4a25      	ldr	r2, [pc, #148]	; (800249c <HAL_PCD_MspInit+0xec>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	6313      	str	r3, [r2, #48]	; 0x30
 800240c:	4b23      	ldr	r3, [pc, #140]	; (800249c <HAL_PCD_MspInit+0xec>)
 800240e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002418:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800241c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002420:	2302      	movs	r3, #2
 8002422:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242c:	2303      	movs	r3, #3
 800242e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002432:	230a      	movs	r3, #10
 8002434:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002438:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800243c:	4619      	mov	r1, r3
 800243e:	4818      	ldr	r0, [pc, #96]	; (80024a0 <HAL_PCD_MspInit+0xf0>)
 8002440:	f000 faf8 	bl	8002a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002444:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002448:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800244c:	2300      	movs	r3, #0
 800244e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002458:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800245c:	4619      	mov	r1, r3
 800245e:	4810      	ldr	r0, [pc, #64]	; (80024a0 <HAL_PCD_MspInit+0xf0>)
 8002460:	f000 fae8 	bl	8002a34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002464:	4b0d      	ldr	r3, [pc, #52]	; (800249c <HAL_PCD_MspInit+0xec>)
 8002466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002468:	4a0c      	ldr	r2, [pc, #48]	; (800249c <HAL_PCD_MspInit+0xec>)
 800246a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800246e:	6353      	str	r3, [r2, #52]	; 0x34
 8002470:	4b0a      	ldr	r3, [pc, #40]	; (800249c <HAL_PCD_MspInit+0xec>)
 8002472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4b07      	ldr	r3, [pc, #28]	; (800249c <HAL_PCD_MspInit+0xec>)
 800247e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002480:	4a06      	ldr	r2, [pc, #24]	; (800249c <HAL_PCD_MspInit+0xec>)
 8002482:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002486:	6453      	str	r3, [r2, #68]	; 0x44
 8002488:	4b04      	ldr	r3, [pc, #16]	; (800249c <HAL_PCD_MspInit+0xec>)
 800248a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002494:	bf00      	nop
 8002496:	37b0      	adds	r7, #176	; 0xb0
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40023800 	.word	0x40023800
 80024a0:	40020000 	.word	0x40020000

080024a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024a8:	e7fe      	b.n	80024a8 <NMI_Handler+0x4>

080024aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ae:	e7fe      	b.n	80024ae <HardFault_Handler+0x4>

080024b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024b4:	e7fe      	b.n	80024b4 <MemManage_Handler+0x4>

080024b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024b6:	b480      	push	{r7}
 80024b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ba:	e7fe      	b.n	80024ba <BusFault_Handler+0x4>

080024bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024c0:	e7fe      	b.n	80024c0 <UsageFault_Handler+0x4>

080024c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024c2:	b480      	push	{r7}
 80024c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024d4:	bf00      	nop
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024de:	b480      	push	{r7}
 80024e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024f0:	f000 f94a 	bl	8002788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024f4:	bf00      	nop
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80024fc:	4802      	ldr	r0, [pc, #8]	; (8002508 <TIM4_IRQHandler+0x10>)
 80024fe:	f002 fcf1 	bl	8004ee4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	2000029c 	.word	0x2000029c

0800250c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
	return 1;
 8002510:	2301      	movs	r3, #1
}
 8002512:	4618      	mov	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <_kill>:

int _kill(int pid, int sig)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002526:	f004 fd09 	bl	8006f3c <__errno>
 800252a:	4603      	mov	r3, r0
 800252c:	2216      	movs	r2, #22
 800252e:	601a      	str	r2, [r3, #0]
	return -1;
 8002530:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <_exit>:

void _exit (int status)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002544:	f04f 31ff 	mov.w	r1, #4294967295
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff ffe7 	bl	800251c <_kill>
	while (1) {}		/* Make sure we hang here */
 800254e:	e7fe      	b.n	800254e <_exit+0x12>

08002550 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	e00a      	b.n	8002578 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002562:	f3af 8000 	nop.w
 8002566:	4601      	mov	r1, r0
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	60ba      	str	r2, [r7, #8]
 800256e:	b2ca      	uxtb	r2, r1
 8002570:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	3301      	adds	r3, #1
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	429a      	cmp	r2, r3
 800257e:	dbf0      	blt.n	8002562 <_read+0x12>
	}

return len;
 8002580:	687b      	ldr	r3, [r7, #4]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b086      	sub	sp, #24
 800258e:	af00      	add	r7, sp, #0
 8002590:	60f8      	str	r0, [r7, #12]
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	e009      	b.n	80025b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	60ba      	str	r2, [r7, #8]
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	3301      	adds	r3, #1
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	dbf1      	blt.n	800259c <_write+0x12>
	}
	return len;
 80025b8:	687b      	ldr	r3, [r7, #4]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <_close>:

int _close(int file)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
	return -1;
 80025ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025ea:	605a      	str	r2, [r3, #4]
	return 0;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <_isatty>:

int _isatty(int file)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
	return 1;
 8002602:	2301      	movs	r3, #1
}
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
	return 0;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002634:	4a14      	ldr	r2, [pc, #80]	; (8002688 <_sbrk+0x5c>)
 8002636:	4b15      	ldr	r3, [pc, #84]	; (800268c <_sbrk+0x60>)
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002640:	4b13      	ldr	r3, [pc, #76]	; (8002690 <_sbrk+0x64>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d102      	bne.n	800264e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002648:	4b11      	ldr	r3, [pc, #68]	; (8002690 <_sbrk+0x64>)
 800264a:	4a12      	ldr	r2, [pc, #72]	; (8002694 <_sbrk+0x68>)
 800264c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800264e:	4b10      	ldr	r3, [pc, #64]	; (8002690 <_sbrk+0x64>)
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4413      	add	r3, r2
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	429a      	cmp	r2, r3
 800265a:	d207      	bcs.n	800266c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800265c:	f004 fc6e 	bl	8006f3c <__errno>
 8002660:	4603      	mov	r3, r0
 8002662:	220c      	movs	r2, #12
 8002664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002666:	f04f 33ff 	mov.w	r3, #4294967295
 800266a:	e009      	b.n	8002680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800266c:	4b08      	ldr	r3, [pc, #32]	; (8002690 <_sbrk+0x64>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002672:	4b07      	ldr	r3, [pc, #28]	; (8002690 <_sbrk+0x64>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4413      	add	r3, r2
 800267a:	4a05      	ldr	r2, [pc, #20]	; (8002690 <_sbrk+0x64>)
 800267c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800267e:	68fb      	ldr	r3, [r7, #12]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20050000 	.word	0x20050000
 800268c:	00000400 	.word	0x00000400
 8002690:	20000268 	.word	0x20000268
 8002694:	20000848 	.word	0x20000848

08002698 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800269c:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <SystemInit+0x20>)
 800269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a2:	4a05      	ldr	r2, [pc, #20]	; (80026b8 <SystemInit+0x20>)
 80026a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	e000ed00 	.word	0xe000ed00

080026bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026c0:	480d      	ldr	r0, [pc, #52]	; (80026f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026c2:	490e      	ldr	r1, [pc, #56]	; (80026fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026c4:	4a0e      	ldr	r2, [pc, #56]	; (8002700 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026c8:	e002      	b.n	80026d0 <LoopCopyDataInit>

080026ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ce:	3304      	adds	r3, #4

080026d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026d4:	d3f9      	bcc.n	80026ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026d6:	4a0b      	ldr	r2, [pc, #44]	; (8002704 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026d8:	4c0b      	ldr	r4, [pc, #44]	; (8002708 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026dc:	e001      	b.n	80026e2 <LoopFillZerobss>

080026de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e0:	3204      	adds	r2, #4

080026e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026e4:	d3fb      	bcc.n	80026de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026e6:	f7ff ffd7 	bl	8002698 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026ea:	f004 fc2d 	bl	8006f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026ee:	f7ff f901 	bl	80018f4 <main>
  bx  lr    
 80026f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026f4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80026f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026fc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002700:	0800a164 	.word	0x0800a164
  ldr r2, =_sbss
 8002704:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002708:	20000848 	.word	0x20000848

0800270c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800270c:	e7fe      	b.n	800270c <ADC_IRQHandler>

0800270e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002712:	2003      	movs	r0, #3
 8002714:	f000 f94c 	bl	80029b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002718:	2000      	movs	r0, #0
 800271a:	f000 f805 	bl	8002728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800271e:	f7ff fcef 	bl	8002100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002730:	4b12      	ldr	r3, [pc, #72]	; (800277c <HAL_InitTick+0x54>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4b12      	ldr	r3, [pc, #72]	; (8002780 <HAL_InitTick+0x58>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	4619      	mov	r1, r3
 800273a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800273e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002742:	fbb2 f3f3 	udiv	r3, r2, r3
 8002746:	4618      	mov	r0, r3
 8002748:	f000 f967 	bl	8002a1a <HAL_SYSTICK_Config>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e00e      	b.n	8002774 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b0f      	cmp	r3, #15
 800275a:	d80a      	bhi.n	8002772 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800275c:	2200      	movs	r2, #0
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	f04f 30ff 	mov.w	r0, #4294967295
 8002764:	f000 f92f 	bl	80029c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002768:	4a06      	ldr	r2, [pc, #24]	; (8002784 <HAL_InitTick+0x5c>)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	e000      	b.n	8002774 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
}
 8002774:	4618      	mov	r0, r3
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	20000004 	.word	0x20000004
 8002780:	2000000c 	.word	0x2000000c
 8002784:	20000008 	.word	0x20000008

08002788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800278c:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <HAL_IncTick+0x20>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	461a      	mov	r2, r3
 8002792:	4b06      	ldr	r3, [pc, #24]	; (80027ac <HAL_IncTick+0x24>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4413      	add	r3, r2
 8002798:	4a04      	ldr	r2, [pc, #16]	; (80027ac <HAL_IncTick+0x24>)
 800279a:	6013      	str	r3, [r2, #0]
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	2000000c 	.word	0x2000000c
 80027ac:	20000834 	.word	0x20000834

080027b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  return uwTick;
 80027b4:	4b03      	ldr	r3, [pc, #12]	; (80027c4 <HAL_GetTick+0x14>)
 80027b6:	681b      	ldr	r3, [r3, #0]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	20000834 	.word	0x20000834

080027c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027d0:	f7ff ffee 	bl	80027b0 <HAL_GetTick>
 80027d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e0:	d005      	beq.n	80027ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027e2:	4b0a      	ldr	r3, [pc, #40]	; (800280c <HAL_Delay+0x44>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	461a      	mov	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4413      	add	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027ee:	bf00      	nop
 80027f0:	f7ff ffde 	bl	80027b0 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d8f7      	bhi.n	80027f0 <HAL_Delay+0x28>
  {
  }
}
 8002800:	bf00      	nop
 8002802:	bf00      	nop
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	2000000c 	.word	0x2000000c

08002810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002820:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <__NVIC_SetPriorityGrouping+0x40>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800282c:	4013      	ands	r3, r2
 800282e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002838:	4b06      	ldr	r3, [pc, #24]	; (8002854 <__NVIC_SetPriorityGrouping+0x44>)
 800283a:	4313      	orrs	r3, r2
 800283c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800283e:	4a04      	ldr	r2, [pc, #16]	; (8002850 <__NVIC_SetPriorityGrouping+0x40>)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	60d3      	str	r3, [r2, #12]
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	e000ed00 	.word	0xe000ed00
 8002854:	05fa0000 	.word	0x05fa0000

08002858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800285c:	4b04      	ldr	r3, [pc, #16]	; (8002870 <__NVIC_GetPriorityGrouping+0x18>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	0a1b      	lsrs	r3, r3, #8
 8002862:	f003 0307 	and.w	r3, r3, #7
}
 8002866:	4618      	mov	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800287e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002882:	2b00      	cmp	r3, #0
 8002884:	db0b      	blt.n	800289e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	f003 021f 	and.w	r2, r3, #31
 800288c:	4907      	ldr	r1, [pc, #28]	; (80028ac <__NVIC_EnableIRQ+0x38>)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	095b      	lsrs	r3, r3, #5
 8002894:	2001      	movs	r0, #1
 8002896:	fa00 f202 	lsl.w	r2, r0, r2
 800289a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	e000e100 	.word	0xe000e100

080028b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	6039      	str	r1, [r7, #0]
 80028ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	db0a      	blt.n	80028da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	490c      	ldr	r1, [pc, #48]	; (80028fc <__NVIC_SetPriority+0x4c>)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	0112      	lsls	r2, r2, #4
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	440b      	add	r3, r1
 80028d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d8:	e00a      	b.n	80028f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	4908      	ldr	r1, [pc, #32]	; (8002900 <__NVIC_SetPriority+0x50>)
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	3b04      	subs	r3, #4
 80028e8:	0112      	lsls	r2, r2, #4
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	440b      	add	r3, r1
 80028ee:	761a      	strb	r2, [r3, #24]
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	e000e100 	.word	0xe000e100
 8002900:	e000ed00 	.word	0xe000ed00

08002904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002904:	b480      	push	{r7}
 8002906:	b089      	sub	sp, #36	; 0x24
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f1c3 0307 	rsb	r3, r3, #7
 800291e:	2b04      	cmp	r3, #4
 8002920:	bf28      	it	cs
 8002922:	2304      	movcs	r3, #4
 8002924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3304      	adds	r3, #4
 800292a:	2b06      	cmp	r3, #6
 800292c:	d902      	bls.n	8002934 <NVIC_EncodePriority+0x30>
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3b03      	subs	r3, #3
 8002932:	e000      	b.n	8002936 <NVIC_EncodePriority+0x32>
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002938:	f04f 32ff 	mov.w	r2, #4294967295
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43da      	mvns	r2, r3
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	401a      	ands	r2, r3
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800294c:	f04f 31ff 	mov.w	r1, #4294967295
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	fa01 f303 	lsl.w	r3, r1, r3
 8002956:	43d9      	mvns	r1, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800295c:	4313      	orrs	r3, r2
         );
}
 800295e:	4618      	mov	r0, r3
 8002960:	3724      	adds	r7, #36	; 0x24
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
	...

0800296c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3b01      	subs	r3, #1
 8002978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800297c:	d301      	bcc.n	8002982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800297e:	2301      	movs	r3, #1
 8002980:	e00f      	b.n	80029a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002982:	4a0a      	ldr	r2, [pc, #40]	; (80029ac <SysTick_Config+0x40>)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3b01      	subs	r3, #1
 8002988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800298a:	210f      	movs	r1, #15
 800298c:	f04f 30ff 	mov.w	r0, #4294967295
 8002990:	f7ff ff8e 	bl	80028b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002994:	4b05      	ldr	r3, [pc, #20]	; (80029ac <SysTick_Config+0x40>)
 8002996:	2200      	movs	r2, #0
 8002998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800299a:	4b04      	ldr	r3, [pc, #16]	; (80029ac <SysTick_Config+0x40>)
 800299c:	2207      	movs	r2, #7
 800299e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	e000e010 	.word	0xe000e010

080029b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff ff29 	bl	8002810 <__NVIC_SetPriorityGrouping>
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b086      	sub	sp, #24
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	4603      	mov	r3, r0
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	607a      	str	r2, [r7, #4]
 80029d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029d8:	f7ff ff3e 	bl	8002858 <__NVIC_GetPriorityGrouping>
 80029dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	68b9      	ldr	r1, [r7, #8]
 80029e2:	6978      	ldr	r0, [r7, #20]
 80029e4:	f7ff ff8e 	bl	8002904 <NVIC_EncodePriority>
 80029e8:	4602      	mov	r2, r0
 80029ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ee:	4611      	mov	r1, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff ff5d 	bl	80028b0 <__NVIC_SetPriority>
}
 80029f6:	bf00      	nop
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	4603      	mov	r3, r0
 8002a06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff ff31 	bl	8002874 <__NVIC_EnableIRQ>
}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b082      	sub	sp, #8
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7ff ffa2 	bl	800296c <SysTick_Config>
 8002a28:	4603      	mov	r3, r0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b089      	sub	sp, #36	; 0x24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a46:	2300      	movs	r3, #0
 8002a48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61fb      	str	r3, [r7, #28]
 8002a52:	e175      	b.n	8002d40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a54:	2201      	movs	r2, #1
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	4013      	ands	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	f040 8164 	bne.w	8002d3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d005      	beq.n	8002a8a <HAL_GPIO_Init+0x56>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d130      	bne.n	8002aec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	2203      	movs	r2, #3
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68da      	ldr	r2, [r3, #12]
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	091b      	lsrs	r3, r3, #4
 8002ad6:	f003 0201 	and.w	r2, r3, #1
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d017      	beq.n	8002b28 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	2203      	movs	r2, #3
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d123      	bne.n	8002b7c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	08da      	lsrs	r2, r3, #3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3208      	adds	r2, #8
 8002b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	220f      	movs	r2, #15
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	691a      	ldr	r2, [r3, #16]
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	08da      	lsrs	r2, r3, #3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3208      	adds	r2, #8
 8002b76:	69b9      	ldr	r1, [r7, #24]
 8002b78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	2203      	movs	r2, #3
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4013      	ands	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 0203 	and.w	r2, r3, #3
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 80be 	beq.w	8002d3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bbe:	4b66      	ldr	r3, [pc, #408]	; (8002d58 <HAL_GPIO_Init+0x324>)
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc2:	4a65      	ldr	r2, [pc, #404]	; (8002d58 <HAL_GPIO_Init+0x324>)
 8002bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bca:	4b63      	ldr	r3, [pc, #396]	; (8002d58 <HAL_GPIO_Init+0x324>)
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002bd6:	4a61      	ldr	r2, [pc, #388]	; (8002d5c <HAL_GPIO_Init+0x328>)
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	089b      	lsrs	r3, r3, #2
 8002bdc:	3302      	adds	r3, #2
 8002bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	220f      	movs	r2, #15
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a58      	ldr	r2, [pc, #352]	; (8002d60 <HAL_GPIO_Init+0x32c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d037      	beq.n	8002c72 <HAL_GPIO_Init+0x23e>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a57      	ldr	r2, [pc, #348]	; (8002d64 <HAL_GPIO_Init+0x330>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d031      	beq.n	8002c6e <HAL_GPIO_Init+0x23a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a56      	ldr	r2, [pc, #344]	; (8002d68 <HAL_GPIO_Init+0x334>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d02b      	beq.n	8002c6a <HAL_GPIO_Init+0x236>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a55      	ldr	r2, [pc, #340]	; (8002d6c <HAL_GPIO_Init+0x338>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d025      	beq.n	8002c66 <HAL_GPIO_Init+0x232>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a54      	ldr	r2, [pc, #336]	; (8002d70 <HAL_GPIO_Init+0x33c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d01f      	beq.n	8002c62 <HAL_GPIO_Init+0x22e>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a53      	ldr	r2, [pc, #332]	; (8002d74 <HAL_GPIO_Init+0x340>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d019      	beq.n	8002c5e <HAL_GPIO_Init+0x22a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a52      	ldr	r2, [pc, #328]	; (8002d78 <HAL_GPIO_Init+0x344>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d013      	beq.n	8002c5a <HAL_GPIO_Init+0x226>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a51      	ldr	r2, [pc, #324]	; (8002d7c <HAL_GPIO_Init+0x348>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d00d      	beq.n	8002c56 <HAL_GPIO_Init+0x222>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a50      	ldr	r2, [pc, #320]	; (8002d80 <HAL_GPIO_Init+0x34c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d007      	beq.n	8002c52 <HAL_GPIO_Init+0x21e>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a4f      	ldr	r2, [pc, #316]	; (8002d84 <HAL_GPIO_Init+0x350>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d101      	bne.n	8002c4e <HAL_GPIO_Init+0x21a>
 8002c4a:	2309      	movs	r3, #9
 8002c4c:	e012      	b.n	8002c74 <HAL_GPIO_Init+0x240>
 8002c4e:	230a      	movs	r3, #10
 8002c50:	e010      	b.n	8002c74 <HAL_GPIO_Init+0x240>
 8002c52:	2308      	movs	r3, #8
 8002c54:	e00e      	b.n	8002c74 <HAL_GPIO_Init+0x240>
 8002c56:	2307      	movs	r3, #7
 8002c58:	e00c      	b.n	8002c74 <HAL_GPIO_Init+0x240>
 8002c5a:	2306      	movs	r3, #6
 8002c5c:	e00a      	b.n	8002c74 <HAL_GPIO_Init+0x240>
 8002c5e:	2305      	movs	r3, #5
 8002c60:	e008      	b.n	8002c74 <HAL_GPIO_Init+0x240>
 8002c62:	2304      	movs	r3, #4
 8002c64:	e006      	b.n	8002c74 <HAL_GPIO_Init+0x240>
 8002c66:	2303      	movs	r3, #3
 8002c68:	e004      	b.n	8002c74 <HAL_GPIO_Init+0x240>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e002      	b.n	8002c74 <HAL_GPIO_Init+0x240>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <HAL_GPIO_Init+0x240>
 8002c72:	2300      	movs	r3, #0
 8002c74:	69fa      	ldr	r2, [r7, #28]
 8002c76:	f002 0203 	and.w	r2, r2, #3
 8002c7a:	0092      	lsls	r2, r2, #2
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c84:	4935      	ldr	r1, [pc, #212]	; (8002d5c <HAL_GPIO_Init+0x328>)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	089b      	lsrs	r3, r3, #2
 8002c8a:	3302      	adds	r3, #2
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c92:	4b3d      	ldr	r3, [pc, #244]	; (8002d88 <HAL_GPIO_Init+0x354>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cb6:	4a34      	ldr	r2, [pc, #208]	; (8002d88 <HAL_GPIO_Init+0x354>)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cbc:	4b32      	ldr	r3, [pc, #200]	; (8002d88 <HAL_GPIO_Init+0x354>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ce0:	4a29      	ldr	r2, [pc, #164]	; (8002d88 <HAL_GPIO_Init+0x354>)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ce6:	4b28      	ldr	r3, [pc, #160]	; (8002d88 <HAL_GPIO_Init+0x354>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d0a:	4a1f      	ldr	r2, [pc, #124]	; (8002d88 <HAL_GPIO_Init+0x354>)
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d10:	4b1d      	ldr	r3, [pc, #116]	; (8002d88 <HAL_GPIO_Init+0x354>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d34:	4a14      	ldr	r2, [pc, #80]	; (8002d88 <HAL_GPIO_Init+0x354>)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	61fb      	str	r3, [r7, #28]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	2b0f      	cmp	r3, #15
 8002d44:	f67f ae86 	bls.w	8002a54 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d48:	bf00      	nop
 8002d4a:	bf00      	nop
 8002d4c:	3724      	adds	r7, #36	; 0x24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40013800 	.word	0x40013800
 8002d60:	40020000 	.word	0x40020000
 8002d64:	40020400 	.word	0x40020400
 8002d68:	40020800 	.word	0x40020800
 8002d6c:	40020c00 	.word	0x40020c00
 8002d70:	40021000 	.word	0x40021000
 8002d74:	40021400 	.word	0x40021400
 8002d78:	40021800 	.word	0x40021800
 8002d7c:	40021c00 	.word	0x40021c00
 8002d80:	40022000 	.word	0x40022000
 8002d84:	40022400 	.word	0x40022400
 8002d88:	40013c00 	.word	0x40013c00

08002d8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	460b      	mov	r3, r1
 8002d96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	887b      	ldrh	r3, [r7, #2]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002da4:	2301      	movs	r3, #1
 8002da6:	73fb      	strb	r3, [r7, #15]
 8002da8:	e001      	b.n	8002dae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002daa:	2300      	movs	r3, #0
 8002dac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	807b      	strh	r3, [r7, #2]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dcc:	787b      	ldrb	r3, [r7, #1]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dd2:	887a      	ldrh	r2, [r7, #2]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002dd8:	e003      	b.n	8002de2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002dda:	887b      	ldrh	r3, [r7, #2]
 8002ddc:	041a      	lsls	r2, r3, #16
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	619a      	str	r2, [r3, #24]
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b085      	sub	sp, #20
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	460b      	mov	r3, r1
 8002df8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e00:	887a      	ldrh	r2, [r7, #2]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	4013      	ands	r3, r2
 8002e06:	041a      	lsls	r2, r3, #16
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	43d9      	mvns	r1, r3
 8002e0c:	887b      	ldrh	r3, [r7, #2]
 8002e0e:	400b      	ands	r3, r1
 8002e10:	431a      	orrs	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	619a      	str	r2, [r3, #24]
}
 8002e16:	bf00      	nop
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e24:	b08f      	sub	sp, #60	; 0x3c
 8002e26:	af0a      	add	r7, sp, #40	; 0x28
 8002e28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e116      	b.n	8003062 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d106      	bne.n	8002e54 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7ff faae 	bl	80023b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2203      	movs	r2, #3
 8002e58:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d102      	bne.n	8002e6e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f003 fdcc 	bl	8006a10 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	603b      	str	r3, [r7, #0]
 8002e7e:	687e      	ldr	r6, [r7, #4]
 8002e80:	466d      	mov	r5, sp
 8002e82:	f106 0410 	add.w	r4, r6, #16
 8002e86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e92:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e96:	1d33      	adds	r3, r6, #4
 8002e98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e9a:	6838      	ldr	r0, [r7, #0]
 8002e9c:	f003 fd60 	bl	8006960 <USB_CoreInit>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d005      	beq.n	8002eb2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e0d7      	b.n	8003062 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f003 fdba 	bl	8006a32 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	73fb      	strb	r3, [r7, #15]
 8002ec2:	e04a      	b.n	8002f5a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ec4:	7bfa      	ldrb	r2, [r7, #15]
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	1a9b      	subs	r3, r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	333d      	adds	r3, #61	; 0x3d
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ed8:	7bfa      	ldrb	r2, [r7, #15]
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	4613      	mov	r3, r2
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	1a9b      	subs	r3, r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	333c      	adds	r3, #60	; 0x3c
 8002ee8:	7bfa      	ldrb	r2, [r7, #15]
 8002eea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002eec:	7bfa      	ldrb	r2, [r7, #15]
 8002eee:	7bfb      	ldrb	r3, [r7, #15]
 8002ef0:	b298      	uxth	r0, r3
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	1a9b      	subs	r3, r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	3342      	adds	r3, #66	; 0x42
 8002f00:	4602      	mov	r2, r0
 8002f02:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f04:	7bfa      	ldrb	r2, [r7, #15]
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	1a9b      	subs	r3, r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	333f      	adds	r3, #63	; 0x3f
 8002f14:	2200      	movs	r2, #0
 8002f16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f18:	7bfa      	ldrb	r2, [r7, #15]
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	1a9b      	subs	r3, r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	3344      	adds	r3, #68	; 0x44
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f2c:	7bfa      	ldrb	r2, [r7, #15]
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	1a9b      	subs	r3, r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	3348      	adds	r3, #72	; 0x48
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f40:	7bfa      	ldrb	r2, [r7, #15]
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	1a9b      	subs	r3, r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	3350      	adds	r3, #80	; 0x50
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	3301      	adds	r3, #1
 8002f58:	73fb      	strb	r3, [r7, #15]
 8002f5a:	7bfa      	ldrb	r2, [r7, #15]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d3af      	bcc.n	8002ec4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f64:	2300      	movs	r3, #0
 8002f66:	73fb      	strb	r3, [r7, #15]
 8002f68:	e044      	b.n	8002ff4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f6a:	7bfa      	ldrb	r2, [r7, #15]
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	1a9b      	subs	r3, r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	440b      	add	r3, r1
 8002f78:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f80:	7bfa      	ldrb	r2, [r7, #15]
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	4613      	mov	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	1a9b      	subs	r3, r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002f92:	7bfa      	ldrb	r2, [r7, #15]
 8002f94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f96:	7bfa      	ldrb	r2, [r7, #15]
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	1a9b      	subs	r3, r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002fa8:	2200      	movs	r2, #0
 8002faa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fac:	7bfa      	ldrb	r2, [r7, #15]
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	1a9b      	subs	r3, r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002fc2:	7bfa      	ldrb	r2, [r7, #15]
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	1a9b      	subs	r3, r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002fd8:	7bfa      	ldrb	r2, [r7, #15]
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fee:	7bfb      	ldrb	r3, [r7, #15]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	73fb      	strb	r3, [r7, #15]
 8002ff4:	7bfa      	ldrb	r2, [r7, #15]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d3b5      	bcc.n	8002f6a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	687e      	ldr	r6, [r7, #4]
 8003006:	466d      	mov	r5, sp
 8003008:	f106 0410 	add.w	r4, r6, #16
 800300c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800300e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003010:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003012:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003014:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003018:	e885 0003 	stmia.w	r5, {r0, r1}
 800301c:	1d33      	adds	r3, r6, #4
 800301e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003020:	6838      	ldr	r0, [r7, #0]
 8003022:	f003 fd53 	bl	8006acc <USB_DevInit>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e014      	b.n	8003062 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	2b01      	cmp	r3, #1
 800304e:	d102      	bne.n	8003056 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f80b 	bl	800306c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f003 ff0d 	bl	8006e7a <USB_DevDisconnect>

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800306c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800309a:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <HAL_PCDEx_ActivateLPM+0x44>)
 800309c:	4313      	orrs	r3, r2
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	10000003 	.word	0x10000003

080030b4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030b8:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a04      	ldr	r2, [pc, #16]	; (80030d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80030be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c2:	6013      	str	r3, [r2, #0]
}
 80030c4:	bf00      	nop
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	40007000 	.word	0x40007000

080030d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80030dc:	2300      	movs	r3, #0
 80030de:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e291      	b.n	800360e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 8087 	beq.w	8003206 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030f8:	4b96      	ldr	r3, [pc, #600]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 030c 	and.w	r3, r3, #12
 8003100:	2b04      	cmp	r3, #4
 8003102:	d00c      	beq.n	800311e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003104:	4b93      	ldr	r3, [pc, #588]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 030c 	and.w	r3, r3, #12
 800310c:	2b08      	cmp	r3, #8
 800310e:	d112      	bne.n	8003136 <HAL_RCC_OscConfig+0x62>
 8003110:	4b90      	ldr	r3, [pc, #576]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003118:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800311c:	d10b      	bne.n	8003136 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800311e:	4b8d      	ldr	r3, [pc, #564]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d06c      	beq.n	8003204 <HAL_RCC_OscConfig+0x130>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d168      	bne.n	8003204 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e26b      	b.n	800360e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800313e:	d106      	bne.n	800314e <HAL_RCC_OscConfig+0x7a>
 8003140:	4b84      	ldr	r3, [pc, #528]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a83      	ldr	r2, [pc, #524]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800314a:	6013      	str	r3, [r2, #0]
 800314c:	e02e      	b.n	80031ac <HAL_RCC_OscConfig+0xd8>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10c      	bne.n	8003170 <HAL_RCC_OscConfig+0x9c>
 8003156:	4b7f      	ldr	r3, [pc, #508]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a7e      	ldr	r2, [pc, #504]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 800315c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	4b7c      	ldr	r3, [pc, #496]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a7b      	ldr	r2, [pc, #492]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003168:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	e01d      	b.n	80031ac <HAL_RCC_OscConfig+0xd8>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003178:	d10c      	bne.n	8003194 <HAL_RCC_OscConfig+0xc0>
 800317a:	4b76      	ldr	r3, [pc, #472]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a75      	ldr	r2, [pc, #468]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	4b73      	ldr	r3, [pc, #460]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a72      	ldr	r2, [pc, #456]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 800318c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	e00b      	b.n	80031ac <HAL_RCC_OscConfig+0xd8>
 8003194:	4b6f      	ldr	r3, [pc, #444]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a6e      	ldr	r2, [pc, #440]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 800319a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	4b6c      	ldr	r3, [pc, #432]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a6b      	ldr	r2, [pc, #428]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 80031a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d013      	beq.n	80031dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b4:	f7ff fafc 	bl	80027b0 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031bc:	f7ff faf8 	bl	80027b0 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b64      	cmp	r3, #100	; 0x64
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e21f      	b.n	800360e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ce:	4b61      	ldr	r3, [pc, #388]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f0      	beq.n	80031bc <HAL_RCC_OscConfig+0xe8>
 80031da:	e014      	b.n	8003206 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031dc:	f7ff fae8 	bl	80027b0 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e4:	f7ff fae4 	bl	80027b0 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b64      	cmp	r3, #100	; 0x64
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e20b      	b.n	800360e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031f6:	4b57      	ldr	r3, [pc, #348]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x110>
 8003202:	e000      	b.n	8003206 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d069      	beq.n	80032e6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003212:	4b50      	ldr	r3, [pc, #320]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 030c 	and.w	r3, r3, #12
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00b      	beq.n	8003236 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800321e:	4b4d      	ldr	r3, [pc, #308]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	2b08      	cmp	r3, #8
 8003228:	d11c      	bne.n	8003264 <HAL_RCC_OscConfig+0x190>
 800322a:	4b4a      	ldr	r3, [pc, #296]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d116      	bne.n	8003264 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003236:	4b47      	ldr	r3, [pc, #284]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d005      	beq.n	800324e <HAL_RCC_OscConfig+0x17a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d001      	beq.n	800324e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e1df      	b.n	800360e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324e:	4b41      	ldr	r3, [pc, #260]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	493d      	ldr	r1, [pc, #244]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 800325e:	4313      	orrs	r3, r2
 8003260:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003262:	e040      	b.n	80032e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d023      	beq.n	80032b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800326c:	4b39      	ldr	r3, [pc, #228]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a38      	ldr	r2, [pc, #224]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003278:	f7ff fa9a 	bl	80027b0 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003280:	f7ff fa96 	bl	80027b0 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e1bd      	b.n	800360e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003292:	4b30      	ldr	r3, [pc, #192]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0f0      	beq.n	8003280 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800329e:	4b2d      	ldr	r3, [pc, #180]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	4929      	ldr	r1, [pc, #164]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	600b      	str	r3, [r1, #0]
 80032b2:	e018      	b.n	80032e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032b4:	4b27      	ldr	r3, [pc, #156]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a26      	ldr	r2, [pc, #152]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 80032ba:	f023 0301 	bic.w	r3, r3, #1
 80032be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c0:	f7ff fa76 	bl	80027b0 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c8:	f7ff fa72 	bl	80027b0 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e199      	b.n	800360e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032da:	4b1e      	ldr	r3, [pc, #120]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d038      	beq.n	8003364 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d019      	beq.n	800332e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032fa:	4b16      	ldr	r3, [pc, #88]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 80032fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032fe:	4a15      	ldr	r2, [pc, #84]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003300:	f043 0301 	orr.w	r3, r3, #1
 8003304:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003306:	f7ff fa53 	bl	80027b0 <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800330e:	f7ff fa4f 	bl	80027b0 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e176      	b.n	800360e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003320:	4b0c      	ldr	r3, [pc, #48]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0f0      	beq.n	800330e <HAL_RCC_OscConfig+0x23a>
 800332c:	e01a      	b.n	8003364 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800332e:	4b09      	ldr	r3, [pc, #36]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003332:	4a08      	ldr	r2, [pc, #32]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003334:	f023 0301 	bic.w	r3, r3, #1
 8003338:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333a:	f7ff fa39 	bl	80027b0 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003340:	e00a      	b.n	8003358 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003342:	f7ff fa35 	bl	80027b0 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d903      	bls.n	8003358 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e15c      	b.n	800360e <HAL_RCC_OscConfig+0x53a>
 8003354:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003358:	4b91      	ldr	r3, [pc, #580]	; (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 800335a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1ee      	bne.n	8003342 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 80a4 	beq.w	80034ba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003372:	4b8b      	ldr	r3, [pc, #556]	; (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10d      	bne.n	800339a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800337e:	4b88      	ldr	r3, [pc, #544]	; (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	4a87      	ldr	r2, [pc, #540]	; (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 8003384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003388:	6413      	str	r3, [r2, #64]	; 0x40
 800338a:	4b85      	ldr	r3, [pc, #532]	; (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003392:	60bb      	str	r3, [r7, #8]
 8003394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003396:	2301      	movs	r3, #1
 8003398:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800339a:	4b82      	ldr	r3, [pc, #520]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d118      	bne.n	80033d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80033a6:	4b7f      	ldr	r3, [pc, #508]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a7e      	ldr	r2, [pc, #504]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 80033ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033b2:	f7ff f9fd 	bl	80027b0 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ba:	f7ff f9f9 	bl	80027b0 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b64      	cmp	r3, #100	; 0x64
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e120      	b.n	800360e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033cc:	4b75      	ldr	r3, [pc, #468]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0f0      	beq.n	80033ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d106      	bne.n	80033ee <HAL_RCC_OscConfig+0x31a>
 80033e0:	4b6f      	ldr	r3, [pc, #444]	; (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 80033e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e4:	4a6e      	ldr	r2, [pc, #440]	; (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 80033e6:	f043 0301 	orr.w	r3, r3, #1
 80033ea:	6713      	str	r3, [r2, #112]	; 0x70
 80033ec:	e02d      	b.n	800344a <HAL_RCC_OscConfig+0x376>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10c      	bne.n	8003410 <HAL_RCC_OscConfig+0x33c>
 80033f6:	4b6a      	ldr	r3, [pc, #424]	; (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 80033f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fa:	4a69      	ldr	r2, [pc, #420]	; (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 80033fc:	f023 0301 	bic.w	r3, r3, #1
 8003400:	6713      	str	r3, [r2, #112]	; 0x70
 8003402:	4b67      	ldr	r3, [pc, #412]	; (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 8003404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003406:	4a66      	ldr	r2, [pc, #408]	; (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 8003408:	f023 0304 	bic.w	r3, r3, #4
 800340c:	6713      	str	r3, [r2, #112]	; 0x70
 800340e:	e01c      	b.n	800344a <HAL_RCC_OscConfig+0x376>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b05      	cmp	r3, #5
 8003416:	d10c      	bne.n	8003432 <HAL_RCC_OscConfig+0x35e>
 8003418:	4b61      	ldr	r3, [pc, #388]	; (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 800341a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341c:	4a60      	ldr	r2, [pc, #384]	; (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 800341e:	f043 0304 	orr.w	r3, r3, #4
 8003422:	6713      	str	r3, [r2, #112]	; 0x70
 8003424:	4b5e      	ldr	r3, [pc, #376]	; (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 8003426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003428:	4a5d      	ldr	r2, [pc, #372]	; (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 800342a:	f043 0301 	orr.w	r3, r3, #1
 800342e:	6713      	str	r3, [r2, #112]	; 0x70
 8003430:	e00b      	b.n	800344a <HAL_RCC_OscConfig+0x376>
 8003432:	4b5b      	ldr	r3, [pc, #364]	; (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 8003434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003436:	4a5a      	ldr	r2, [pc, #360]	; (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 8003438:	f023 0301 	bic.w	r3, r3, #1
 800343c:	6713      	str	r3, [r2, #112]	; 0x70
 800343e:	4b58      	ldr	r3, [pc, #352]	; (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 8003440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003442:	4a57      	ldr	r2, [pc, #348]	; (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 8003444:	f023 0304 	bic.w	r3, r3, #4
 8003448:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d015      	beq.n	800347e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003452:	f7ff f9ad 	bl	80027b0 <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003458:	e00a      	b.n	8003470 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800345a:	f7ff f9a9 	bl	80027b0 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	f241 3288 	movw	r2, #5000	; 0x1388
 8003468:	4293      	cmp	r3, r2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e0ce      	b.n	800360e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003470:	4b4b      	ldr	r3, [pc, #300]	; (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 8003472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0ee      	beq.n	800345a <HAL_RCC_OscConfig+0x386>
 800347c:	e014      	b.n	80034a8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347e:	f7ff f997 	bl	80027b0 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003484:	e00a      	b.n	800349c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003486:	f7ff f993 	bl	80027b0 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	f241 3288 	movw	r2, #5000	; 0x1388
 8003494:	4293      	cmp	r3, r2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e0b8      	b.n	800360e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800349c:	4b40      	ldr	r3, [pc, #256]	; (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 800349e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1ee      	bne.n	8003486 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034a8:	7dfb      	ldrb	r3, [r7, #23]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d105      	bne.n	80034ba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ae:	4b3c      	ldr	r3, [pc, #240]	; (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	4a3b      	ldr	r2, [pc, #236]	; (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 80034b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 80a4 	beq.w	800360c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034c4:	4b36      	ldr	r3, [pc, #216]	; (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f003 030c 	and.w	r3, r3, #12
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d06b      	beq.n	80035a8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d149      	bne.n	800356c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d8:	4b31      	ldr	r3, [pc, #196]	; (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a30      	ldr	r2, [pc, #192]	; (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 80034de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e4:	f7ff f964 	bl	80027b0 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ec:	f7ff f960 	bl	80027b0 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e087      	b.n	800360e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fe:	4b28      	ldr	r3, [pc, #160]	; (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f0      	bne.n	80034ec <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69da      	ldr	r2, [r3, #28]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	019b      	lsls	r3, r3, #6
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003520:	085b      	lsrs	r3, r3, #1
 8003522:	3b01      	subs	r3, #1
 8003524:	041b      	lsls	r3, r3, #16
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352c:	061b      	lsls	r3, r3, #24
 800352e:	4313      	orrs	r3, r2
 8003530:	4a1b      	ldr	r2, [pc, #108]	; (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 8003532:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003536:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003538:	4b19      	ldr	r3, [pc, #100]	; (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a18      	ldr	r2, [pc, #96]	; (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 800353e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003544:	f7ff f934 	bl	80027b0 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800354c:	f7ff f930 	bl	80027b0 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e057      	b.n	800360e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355e:	4b10      	ldr	r3, [pc, #64]	; (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f0      	beq.n	800354c <HAL_RCC_OscConfig+0x478>
 800356a:	e04f      	b.n	800360c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356c:	4b0c      	ldr	r3, [pc, #48]	; (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a0b      	ldr	r2, [pc, #44]	; (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 8003572:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003578:	f7ff f91a 	bl	80027b0 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003580:	f7ff f916 	bl	80027b0 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e03d      	b.n	800360e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003592:	4b03      	ldr	r3, [pc, #12]	; (80035a0 <HAL_RCC_OscConfig+0x4cc>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0x4ac>
 800359e:	e035      	b.n	800360c <HAL_RCC_OscConfig+0x538>
 80035a0:	40023800 	.word	0x40023800
 80035a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80035a8:	4b1b      	ldr	r3, [pc, #108]	; (8003618 <HAL_RCC_OscConfig+0x544>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d028      	beq.n	8003608 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d121      	bne.n	8003608 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d11a      	bne.n	8003608 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035d8:	4013      	ands	r3, r2
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035de:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d111      	bne.n	8003608 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ee:	085b      	lsrs	r3, r3, #1
 80035f0:	3b01      	subs	r3, #1
 80035f2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d107      	bne.n	8003608 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003602:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003604:	429a      	cmp	r2, r3
 8003606:	d001      	beq.n	800360c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e000      	b.n	800360e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	40023800 	.word	0x40023800

0800361c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003626:	2300      	movs	r3, #0
 8003628:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e0d0      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003634:	4b6a      	ldr	r3, [pc, #424]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 030f 	and.w	r3, r3, #15
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	d910      	bls.n	8003664 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003642:	4b67      	ldr	r3, [pc, #412]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f023 020f 	bic.w	r2, r3, #15
 800364a:	4965      	ldr	r1, [pc, #404]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	4313      	orrs	r3, r2
 8003650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003652:	4b63      	ldr	r3, [pc, #396]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	429a      	cmp	r2, r3
 800365e:	d001      	beq.n	8003664 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e0b8      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d020      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b00      	cmp	r3, #0
 800367a:	d005      	beq.n	8003688 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800367c:	4b59      	ldr	r3, [pc, #356]	; (80037e4 <HAL_RCC_ClockConfig+0x1c8>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	4a58      	ldr	r2, [pc, #352]	; (80037e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003682:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003686:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003694:	4b53      	ldr	r3, [pc, #332]	; (80037e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	4a52      	ldr	r2, [pc, #328]	; (80037e4 <HAL_RCC_ClockConfig+0x1c8>)
 800369a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800369e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a0:	4b50      	ldr	r3, [pc, #320]	; (80037e4 <HAL_RCC_ClockConfig+0x1c8>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	494d      	ldr	r1, [pc, #308]	; (80037e4 <HAL_RCC_ClockConfig+0x1c8>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d040      	beq.n	8003740 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d107      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c6:	4b47      	ldr	r3, [pc, #284]	; (80037e4 <HAL_RCC_ClockConfig+0x1c8>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d115      	bne.n	80036fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e07f      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d107      	bne.n	80036ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036de:	4b41      	ldr	r3, [pc, #260]	; (80037e4 <HAL_RCC_ClockConfig+0x1c8>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d109      	bne.n	80036fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e073      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ee:	4b3d      	ldr	r3, [pc, #244]	; (80037e4 <HAL_RCC_ClockConfig+0x1c8>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e06b      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036fe:	4b39      	ldr	r3, [pc, #228]	; (80037e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f023 0203 	bic.w	r2, r3, #3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	4936      	ldr	r1, [pc, #216]	; (80037e4 <HAL_RCC_ClockConfig+0x1c8>)
 800370c:	4313      	orrs	r3, r2
 800370e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003710:	f7ff f84e 	bl	80027b0 <HAL_GetTick>
 8003714:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003716:	e00a      	b.n	800372e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003718:	f7ff f84a 	bl	80027b0 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	f241 3288 	movw	r2, #5000	; 0x1388
 8003726:	4293      	cmp	r3, r2
 8003728:	d901      	bls.n	800372e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e053      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372e:	4b2d      	ldr	r3, [pc, #180]	; (80037e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 020c 	and.w	r2, r3, #12
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	429a      	cmp	r2, r3
 800373e:	d1eb      	bne.n	8003718 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003740:	4b27      	ldr	r3, [pc, #156]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 030f 	and.w	r3, r3, #15
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	429a      	cmp	r2, r3
 800374c:	d210      	bcs.n	8003770 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800374e:	4b24      	ldr	r3, [pc, #144]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f023 020f 	bic.w	r2, r3, #15
 8003756:	4922      	ldr	r1, [pc, #136]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	4313      	orrs	r3, r2
 800375c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800375e:	4b20      	ldr	r3, [pc, #128]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d001      	beq.n	8003770 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e032      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	d008      	beq.n	800378e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800377c:	4b19      	ldr	r3, [pc, #100]	; (80037e4 <HAL_RCC_ClockConfig+0x1c8>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	4916      	ldr	r1, [pc, #88]	; (80037e4 <HAL_RCC_ClockConfig+0x1c8>)
 800378a:	4313      	orrs	r3, r2
 800378c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b00      	cmp	r3, #0
 8003798:	d009      	beq.n	80037ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800379a:	4b12      	ldr	r3, [pc, #72]	; (80037e4 <HAL_RCC_ClockConfig+0x1c8>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	490e      	ldr	r1, [pc, #56]	; (80037e4 <HAL_RCC_ClockConfig+0x1c8>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037ae:	f000 f821 	bl	80037f4 <HAL_RCC_GetSysClockFreq>
 80037b2:	4602      	mov	r2, r0
 80037b4:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <HAL_RCC_ClockConfig+0x1c8>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	091b      	lsrs	r3, r3, #4
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	490a      	ldr	r1, [pc, #40]	; (80037e8 <HAL_RCC_ClockConfig+0x1cc>)
 80037c0:	5ccb      	ldrb	r3, [r1, r3]
 80037c2:	fa22 f303 	lsr.w	r3, r2, r3
 80037c6:	4a09      	ldr	r2, [pc, #36]	; (80037ec <HAL_RCC_ClockConfig+0x1d0>)
 80037c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037ca:	4b09      	ldr	r3, [pc, #36]	; (80037f0 <HAL_RCC_ClockConfig+0x1d4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fe ffaa 	bl	8002728 <HAL_InitTick>

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40023c00 	.word	0x40023c00
 80037e4:	40023800 	.word	0x40023800
 80037e8:	08009d5c 	.word	0x08009d5c
 80037ec:	20000004 	.word	0x20000004
 80037f0:	20000008 	.word	0x20000008

080037f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037f8:	b084      	sub	sp, #16
 80037fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80037fc:	2300      	movs	r3, #0
 80037fe:	607b      	str	r3, [r7, #4]
 8003800:	2300      	movs	r3, #0
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	2300      	movs	r3, #0
 8003806:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003808:	2300      	movs	r3, #0
 800380a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800380c:	4b67      	ldr	r3, [pc, #412]	; (80039ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 030c 	and.w	r3, r3, #12
 8003814:	2b08      	cmp	r3, #8
 8003816:	d00d      	beq.n	8003834 <HAL_RCC_GetSysClockFreq+0x40>
 8003818:	2b08      	cmp	r3, #8
 800381a:	f200 80bd 	bhi.w	8003998 <HAL_RCC_GetSysClockFreq+0x1a4>
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <HAL_RCC_GetSysClockFreq+0x34>
 8003822:	2b04      	cmp	r3, #4
 8003824:	d003      	beq.n	800382e <HAL_RCC_GetSysClockFreq+0x3a>
 8003826:	e0b7      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003828:	4b61      	ldr	r3, [pc, #388]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800382a:	60bb      	str	r3, [r7, #8]
      break;
 800382c:	e0b7      	b.n	800399e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800382e:	4b61      	ldr	r3, [pc, #388]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003830:	60bb      	str	r3, [r7, #8]
      break;
 8003832:	e0b4      	b.n	800399e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003834:	4b5d      	ldr	r3, [pc, #372]	; (80039ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800383c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800383e:	4b5b      	ldr	r3, [pc, #364]	; (80039ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d04d      	beq.n	80038e6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800384a:	4b58      	ldr	r3, [pc, #352]	; (80039ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	099b      	lsrs	r3, r3, #6
 8003850:	461a      	mov	r2, r3
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	f240 10ff 	movw	r0, #511	; 0x1ff
 800385a:	f04f 0100 	mov.w	r1, #0
 800385e:	ea02 0800 	and.w	r8, r2, r0
 8003862:	ea03 0901 	and.w	r9, r3, r1
 8003866:	4640      	mov	r0, r8
 8003868:	4649      	mov	r1, r9
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	014b      	lsls	r3, r1, #5
 8003874:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003878:	0142      	lsls	r2, r0, #5
 800387a:	4610      	mov	r0, r2
 800387c:	4619      	mov	r1, r3
 800387e:	ebb0 0008 	subs.w	r0, r0, r8
 8003882:	eb61 0109 	sbc.w	r1, r1, r9
 8003886:	f04f 0200 	mov.w	r2, #0
 800388a:	f04f 0300 	mov.w	r3, #0
 800388e:	018b      	lsls	r3, r1, #6
 8003890:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003894:	0182      	lsls	r2, r0, #6
 8003896:	1a12      	subs	r2, r2, r0
 8003898:	eb63 0301 	sbc.w	r3, r3, r1
 800389c:	f04f 0000 	mov.w	r0, #0
 80038a0:	f04f 0100 	mov.w	r1, #0
 80038a4:	00d9      	lsls	r1, r3, #3
 80038a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038aa:	00d0      	lsls	r0, r2, #3
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	eb12 0208 	adds.w	r2, r2, r8
 80038b4:	eb43 0309 	adc.w	r3, r3, r9
 80038b8:	f04f 0000 	mov.w	r0, #0
 80038bc:	f04f 0100 	mov.w	r1, #0
 80038c0:	0259      	lsls	r1, r3, #9
 80038c2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80038c6:	0250      	lsls	r0, r2, #9
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
 80038cc:	4610      	mov	r0, r2
 80038ce:	4619      	mov	r1, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	461a      	mov	r2, r3
 80038d4:	f04f 0300 	mov.w	r3, #0
 80038d8:	f7fd f9d6 	bl	8000c88 <__aeabi_uldivmod>
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	4613      	mov	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	e04a      	b.n	800397c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038e6:	4b31      	ldr	r3, [pc, #196]	; (80039ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	099b      	lsrs	r3, r3, #6
 80038ec:	461a      	mov	r2, r3
 80038ee:	f04f 0300 	mov.w	r3, #0
 80038f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80038f6:	f04f 0100 	mov.w	r1, #0
 80038fa:	ea02 0400 	and.w	r4, r2, r0
 80038fe:	ea03 0501 	and.w	r5, r3, r1
 8003902:	4620      	mov	r0, r4
 8003904:	4629      	mov	r1, r5
 8003906:	f04f 0200 	mov.w	r2, #0
 800390a:	f04f 0300 	mov.w	r3, #0
 800390e:	014b      	lsls	r3, r1, #5
 8003910:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003914:	0142      	lsls	r2, r0, #5
 8003916:	4610      	mov	r0, r2
 8003918:	4619      	mov	r1, r3
 800391a:	1b00      	subs	r0, r0, r4
 800391c:	eb61 0105 	sbc.w	r1, r1, r5
 8003920:	f04f 0200 	mov.w	r2, #0
 8003924:	f04f 0300 	mov.w	r3, #0
 8003928:	018b      	lsls	r3, r1, #6
 800392a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800392e:	0182      	lsls	r2, r0, #6
 8003930:	1a12      	subs	r2, r2, r0
 8003932:	eb63 0301 	sbc.w	r3, r3, r1
 8003936:	f04f 0000 	mov.w	r0, #0
 800393a:	f04f 0100 	mov.w	r1, #0
 800393e:	00d9      	lsls	r1, r3, #3
 8003940:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003944:	00d0      	lsls	r0, r2, #3
 8003946:	4602      	mov	r2, r0
 8003948:	460b      	mov	r3, r1
 800394a:	1912      	adds	r2, r2, r4
 800394c:	eb45 0303 	adc.w	r3, r5, r3
 8003950:	f04f 0000 	mov.w	r0, #0
 8003954:	f04f 0100 	mov.w	r1, #0
 8003958:	0299      	lsls	r1, r3, #10
 800395a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800395e:	0290      	lsls	r0, r2, #10
 8003960:	4602      	mov	r2, r0
 8003962:	460b      	mov	r3, r1
 8003964:	4610      	mov	r0, r2
 8003966:	4619      	mov	r1, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	461a      	mov	r2, r3
 800396c:	f04f 0300 	mov.w	r3, #0
 8003970:	f7fd f98a 	bl	8000c88 <__aeabi_uldivmod>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	4613      	mov	r3, r2
 800397a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800397c:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	0c1b      	lsrs	r3, r3, #16
 8003982:	f003 0303 	and.w	r3, r3, #3
 8003986:	3301      	adds	r3, #1
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	fbb2 f3f3 	udiv	r3, r2, r3
 8003994:	60bb      	str	r3, [r7, #8]
      break;
 8003996:	e002      	b.n	800399e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003998:	4b05      	ldr	r3, [pc, #20]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800399a:	60bb      	str	r3, [r7, #8]
      break;
 800399c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800399e:	68bb      	ldr	r3, [r7, #8]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80039aa:	bf00      	nop
 80039ac:	40023800 	.word	0x40023800
 80039b0:	00f42400 	.word	0x00f42400
 80039b4:	007a1200 	.word	0x007a1200

080039b8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039bc:	4b03      	ldr	r3, [pc, #12]	; (80039cc <HAL_RCC_GetHCLKFreq+0x14>)
 80039be:	681b      	ldr	r3, [r3, #0]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	20000004 	.word	0x20000004

080039d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039d4:	f7ff fff0 	bl	80039b8 <HAL_RCC_GetHCLKFreq>
 80039d8:	4602      	mov	r2, r0
 80039da:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	0a9b      	lsrs	r3, r3, #10
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	4903      	ldr	r1, [pc, #12]	; (80039f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039e6:	5ccb      	ldrb	r3, [r1, r3]
 80039e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40023800 	.word	0x40023800
 80039f4:	08009d6c 	.word	0x08009d6c

080039f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039fc:	f7ff ffdc 	bl	80039b8 <HAL_RCC_GetHCLKFreq>
 8003a00:	4602      	mov	r2, r0
 8003a02:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	0b5b      	lsrs	r3, r3, #13
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	4903      	ldr	r1, [pc, #12]	; (8003a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a0e:	5ccb      	ldrb	r3, [r1, r3]
 8003a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	08009d6c 	.word	0x08009d6c

08003a20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b088      	sub	sp, #32
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003a30:	2300      	movs	r3, #0
 8003a32:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003a34:	2300      	movs	r3, #0
 8003a36:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d012      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a48:	4b69      	ldr	r3, [pc, #420]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	4a68      	ldr	r2, [pc, #416]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a4e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a52:	6093      	str	r3, [r2, #8]
 8003a54:	4b66      	ldr	r3, [pc, #408]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5c:	4964      	ldr	r1, [pc, #400]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d017      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a7a:	4b5d      	ldr	r3, [pc, #372]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a88:	4959      	ldr	r1, [pc, #356]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a98:	d101      	bne.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d017      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ab6:	4b4e      	ldr	r3, [pc, #312]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003abc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	494a      	ldr	r1, [pc, #296]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ad4:	d101      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003af2:	2301      	movs	r3, #1
 8003af4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0320 	and.w	r3, r3, #32
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 808b 	beq.w	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b04:	4b3a      	ldr	r3, [pc, #232]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b08:	4a39      	ldr	r2, [pc, #228]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8003b10:	4b37      	ldr	r3, [pc, #220]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b18:	60bb      	str	r3, [r7, #8]
 8003b1a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b1c:	4b35      	ldr	r3, [pc, #212]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a34      	ldr	r2, [pc, #208]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b28:	f7fe fe42 	bl	80027b0 <HAL_GetTick>
 8003b2c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b30:	f7fe fe3e 	bl	80027b0 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b64      	cmp	r3, #100	; 0x64
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e357      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b42:	4b2c      	ldr	r3, [pc, #176]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0f0      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b4e:	4b28      	ldr	r3, [pc, #160]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b56:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d035      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d02e      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b6c:	4b20      	ldr	r3, [pc, #128]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b74:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b76:	4b1e      	ldr	r3, [pc, #120]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7a:	4a1d      	ldr	r2, [pc, #116]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b80:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b82:	4b1b      	ldr	r3, [pc, #108]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b86:	4a1a      	ldr	r2, [pc, #104]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b8c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003b8e:	4a18      	ldr	r2, [pc, #96]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b94:	4b16      	ldr	r3, [pc, #88]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d114      	bne.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba0:	f7fe fe06 	bl	80027b0 <HAL_GetTick>
 8003ba4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba6:	e00a      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ba8:	f7fe fe02 	bl	80027b0 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e319      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bbe:	4b0c      	ldr	r3, [pc, #48]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d0ee      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bd6:	d111      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003bd8:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003be4:	4b04      	ldr	r3, [pc, #16]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003be6:	400b      	ands	r3, r1
 8003be8:	4901      	ldr	r1, [pc, #4]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	608b      	str	r3, [r1, #8]
 8003bee:	e00b      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	40007000 	.word	0x40007000
 8003bf8:	0ffffcff 	.word	0x0ffffcff
 8003bfc:	4bb1      	ldr	r3, [pc, #708]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	4ab0      	ldr	r2, [pc, #704]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c02:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003c06:	6093      	str	r3, [r2, #8]
 8003c08:	4bae      	ldr	r3, [pc, #696]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c14:	49ab      	ldr	r1, [pc, #684]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0310 	and.w	r3, r3, #16
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d010      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c26:	4ba7      	ldr	r3, [pc, #668]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c2c:	4aa5      	ldr	r2, [pc, #660]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c32:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003c36:	4ba3      	ldr	r3, [pc, #652]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c38:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c40:	49a0      	ldr	r1, [pc, #640]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00a      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c54:	4b9b      	ldr	r3, [pc, #620]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c62:	4998      	ldr	r1, [pc, #608]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c76:	4b93      	ldr	r3, [pc, #588]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c84:	498f      	ldr	r1, [pc, #572]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00a      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c98:	4b8a      	ldr	r3, [pc, #552]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ca6:	4987      	ldr	r1, [pc, #540]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00a      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003cba:	4b82      	ldr	r3, [pc, #520]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc8:	497e      	ldr	r1, [pc, #504]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00a      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cdc:	4b79      	ldr	r3, [pc, #484]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce2:	f023 0203 	bic.w	r2, r3, #3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cea:	4976      	ldr	r1, [pc, #472]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cfe:	4b71      	ldr	r3, [pc, #452]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d04:	f023 020c 	bic.w	r2, r3, #12
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d0c:	496d      	ldr	r1, [pc, #436]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00a      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d20:	4b68      	ldr	r3, [pc, #416]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d26:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d2e:	4965      	ldr	r1, [pc, #404]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d42:	4b60      	ldr	r3, [pc, #384]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d48:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d50:	495c      	ldr	r1, [pc, #368]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00a      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d64:	4b57      	ldr	r3, [pc, #348]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d72:	4954      	ldr	r1, [pc, #336]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00a      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d86:	4b4f      	ldr	r3, [pc, #316]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d94:	494b      	ldr	r1, [pc, #300]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00a      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003da8:	4b46      	ldr	r3, [pc, #280]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db6:	4943      	ldr	r1, [pc, #268]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00a      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003dca:	4b3e      	ldr	r3, [pc, #248]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd8:	493a      	ldr	r1, [pc, #232]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00a      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003dec:	4b35      	ldr	r3, [pc, #212]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dfa:	4932      	ldr	r1, [pc, #200]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d011      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003e0e:	4b2d      	ldr	r3, [pc, #180]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e14:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e1c:	4929      	ldr	r1, [pc, #164]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e2c:	d101      	bne.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00a      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e4e:	4b1d      	ldr	r3, [pc, #116]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e54:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e5c:	4919      	ldr	r1, [pc, #100]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00b      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e70:	4b14      	ldr	r3, [pc, #80]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e76:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e80:	4910      	ldr	r1, [pc, #64]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d006      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f000 80d9 	beq.w	800404e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e9c:	4b09      	ldr	r3, [pc, #36]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a08      	ldr	r2, [pc, #32]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ea2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ea6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ea8:	f7fe fc82 	bl	80027b0 <HAL_GetTick>
 8003eac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003eae:	e00b      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003eb0:	f7fe fc7e 	bl	80027b0 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b64      	cmp	r3, #100	; 0x64
 8003ebc:	d904      	bls.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e197      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003ec2:	bf00      	nop
 8003ec4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ec8:	4b6c      	ldr	r3, [pc, #432]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1ed      	bne.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d021      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d11d      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ee8:	4b64      	ldr	r3, [pc, #400]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eee:	0c1b      	lsrs	r3, r3, #16
 8003ef0:	f003 0303 	and.w	r3, r3, #3
 8003ef4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ef6:	4b61      	ldr	r3, [pc, #388]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003efc:	0e1b      	lsrs	r3, r3, #24
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	019a      	lsls	r2, r3, #6
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	041b      	lsls	r3, r3, #16
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	061b      	lsls	r3, r3, #24
 8003f14:	431a      	orrs	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	071b      	lsls	r3, r3, #28
 8003f1c:	4957      	ldr	r1, [pc, #348]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d004      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f38:	d00a      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d02e      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f4e:	d129      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f50:	4b4a      	ldr	r3, [pc, #296]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f56:	0c1b      	lsrs	r3, r3, #16
 8003f58:	f003 0303 	and.w	r3, r3, #3
 8003f5c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f5e:	4b47      	ldr	r3, [pc, #284]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f64:	0f1b      	lsrs	r3, r3, #28
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	019a      	lsls	r2, r3, #6
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	041b      	lsls	r3, r3, #16
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	061b      	lsls	r3, r3, #24
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	071b      	lsls	r3, r3, #28
 8003f84:	493d      	ldr	r1, [pc, #244]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f8c:	4b3b      	ldr	r3, [pc, #236]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f92:	f023 021f 	bic.w	r2, r3, #31
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	4937      	ldr	r1, [pc, #220]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d01d      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003fb0:	4b32      	ldr	r3, [pc, #200]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fb6:	0e1b      	lsrs	r3, r3, #24
 8003fb8:	f003 030f 	and.w	r3, r3, #15
 8003fbc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fbe:	4b2f      	ldr	r3, [pc, #188]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fc4:	0f1b      	lsrs	r3, r3, #28
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	019a      	lsls	r2, r3, #6
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	041b      	lsls	r3, r3, #16
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	061b      	lsls	r3, r3, #24
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	071b      	lsls	r3, r3, #28
 8003fe4:	4925      	ldr	r1, [pc, #148]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d011      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	019a      	lsls	r2, r3, #6
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	041b      	lsls	r3, r3, #16
 8004004:	431a      	orrs	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	061b      	lsls	r3, r3, #24
 800400c:	431a      	orrs	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	071b      	lsls	r3, r3, #28
 8004014:	4919      	ldr	r1, [pc, #100]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800401c:	4b17      	ldr	r3, [pc, #92]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a16      	ldr	r2, [pc, #88]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004022:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004026:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004028:	f7fe fbc2 	bl	80027b0 <HAL_GetTick>
 800402c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004030:	f7fe fbbe 	bl	80027b0 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b64      	cmp	r3, #100	; 0x64
 800403c:	d901      	bls.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e0d7      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004042:	4b0e      	ldr	r3, [pc, #56]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0f0      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	2b01      	cmp	r3, #1
 8004052:	f040 80cd 	bne.w	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004056:	4b09      	ldr	r3, [pc, #36]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a08      	ldr	r2, [pc, #32]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800405c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004060:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004062:	f7fe fba5 	bl	80027b0 <HAL_GetTick>
 8004066:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004068:	e00a      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800406a:	f7fe fba1 	bl	80027b0 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b64      	cmp	r3, #100	; 0x64
 8004076:	d903      	bls.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e0ba      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800407c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004080:	4b5e      	ldr	r3, [pc, #376]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004088:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800408c:	d0ed      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d009      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d02e      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d12a      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80040b6:	4b51      	ldr	r3, [pc, #324]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040bc:	0c1b      	lsrs	r3, r3, #16
 80040be:	f003 0303 	and.w	r3, r3, #3
 80040c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80040c4:	4b4d      	ldr	r3, [pc, #308]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ca:	0f1b      	lsrs	r3, r3, #28
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	019a      	lsls	r2, r3, #6
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	041b      	lsls	r3, r3, #16
 80040dc:	431a      	orrs	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	061b      	lsls	r3, r3, #24
 80040e4:	431a      	orrs	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	071b      	lsls	r3, r3, #28
 80040ea:	4944      	ldr	r1, [pc, #272]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80040f2:	4b42      	ldr	r3, [pc, #264]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004100:	3b01      	subs	r3, #1
 8004102:	021b      	lsls	r3, r3, #8
 8004104:	493d      	ldr	r1, [pc, #244]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004106:	4313      	orrs	r3, r2
 8004108:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d022      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800411c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004120:	d11d      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004122:	4b36      	ldr	r3, [pc, #216]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004128:	0e1b      	lsrs	r3, r3, #24
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004130:	4b32      	ldr	r3, [pc, #200]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004136:	0f1b      	lsrs	r3, r3, #28
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	019a      	lsls	r2, r3, #6
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	041b      	lsls	r3, r3, #16
 800414a:	431a      	orrs	r2, r3
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	061b      	lsls	r3, r3, #24
 8004150:	431a      	orrs	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	071b      	lsls	r3, r3, #28
 8004156:	4929      	ldr	r1, [pc, #164]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004158:	4313      	orrs	r3, r2
 800415a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0308 	and.w	r3, r3, #8
 8004166:	2b00      	cmp	r3, #0
 8004168:	d028      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800416a:	4b24      	ldr	r3, [pc, #144]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800416c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004170:	0e1b      	lsrs	r3, r3, #24
 8004172:	f003 030f 	and.w	r3, r3, #15
 8004176:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004178:	4b20      	ldr	r3, [pc, #128]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417e:	0c1b      	lsrs	r3, r3, #16
 8004180:	f003 0303 	and.w	r3, r3, #3
 8004184:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	019a      	lsls	r2, r3, #6
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	041b      	lsls	r3, r3, #16
 8004190:	431a      	orrs	r2, r3
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	061b      	lsls	r3, r3, #24
 8004196:	431a      	orrs	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	071b      	lsls	r3, r3, #28
 800419e:	4917      	ldr	r1, [pc, #92]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80041a6:	4b15      	ldr	r3, [pc, #84]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b4:	4911      	ldr	r1, [pc, #68]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80041bc:	4b0f      	ldr	r3, [pc, #60]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a0e      	ldr	r2, [pc, #56]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041c8:	f7fe faf2 	bl	80027b0 <HAL_GetTick>
 80041cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041ce:	e008      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041d0:	f7fe faee 	bl	80027b0 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b64      	cmp	r3, #100	; 0x64
 80041dc:	d901      	bls.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e007      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041e2:	4b06      	ldr	r3, [pc, #24]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041ee:	d1ef      	bne.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3720      	adds	r7, #32
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	40023800 	.word	0x40023800

08004200 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e09d      	b.n	800434e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004216:	2b00      	cmp	r3, #0
 8004218:	d108      	bne.n	800422c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004222:	d009      	beq.n	8004238 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	61da      	str	r2, [r3, #28]
 800422a:	e005      	b.n	8004238 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d106      	bne.n	8004258 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7fd ff78 	bl	8002148 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800426e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004278:	d902      	bls.n	8004280 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800427a:	2300      	movs	r3, #0
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	e002      	b.n	8004286 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004280:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004284:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800428e:	d007      	beq.n	80042a0 <HAL_SPI_Init+0xa0>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004298:	d002      	beq.n	80042a0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80042b0:	431a      	orrs	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	431a      	orrs	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	69db      	ldr	r3, [r3, #28]
 80042d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042d8:	431a      	orrs	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e2:	ea42 0103 	orr.w	r1, r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	0c1b      	lsrs	r3, r3, #16
 80042fc:	f003 0204 	and.w	r2, r3, #4
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	f003 0310 	and.w	r3, r3, #16
 8004308:	431a      	orrs	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800431c:	ea42 0103 	orr.w	r1, r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	69da      	ldr	r2, [r3, #28]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800433c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b08a      	sub	sp, #40	; 0x28
 800435a:	af00      	add	r7, sp, #0
 800435c:	60f8      	str	r0, [r7, #12]
 800435e:	60b9      	str	r1, [r7, #8]
 8004360:	607a      	str	r2, [r7, #4]
 8004362:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004364:	2301      	movs	r3, #1
 8004366:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004368:	2300      	movs	r3, #0
 800436a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_SPI_TransmitReceive+0x26>
 8004378:	2302      	movs	r3, #2
 800437a:	e1fb      	b.n	8004774 <HAL_SPI_TransmitReceive+0x41e>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004384:	f7fe fa14 	bl	80027b0 <HAL_GetTick>
 8004388:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004390:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004398:	887b      	ldrh	r3, [r7, #2]
 800439a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800439c:	887b      	ldrh	r3, [r7, #2]
 800439e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80043a0:	7efb      	ldrb	r3, [r7, #27]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d00e      	beq.n	80043c4 <HAL_SPI_TransmitReceive+0x6e>
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043ac:	d106      	bne.n	80043bc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d102      	bne.n	80043bc <HAL_SPI_TransmitReceive+0x66>
 80043b6:	7efb      	ldrb	r3, [r7, #27]
 80043b8:	2b04      	cmp	r3, #4
 80043ba:	d003      	beq.n	80043c4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80043bc:	2302      	movs	r3, #2
 80043be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80043c2:	e1cd      	b.n	8004760 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d005      	beq.n	80043d6 <HAL_SPI_TransmitReceive+0x80>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d002      	beq.n	80043d6 <HAL_SPI_TransmitReceive+0x80>
 80043d0:	887b      	ldrh	r3, [r7, #2]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d103      	bne.n	80043de <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80043dc:	e1c0      	b.n	8004760 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d003      	beq.n	80043f2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2205      	movs	r2, #5
 80043ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	887a      	ldrh	r2, [r7, #2]
 8004402:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	887a      	ldrh	r2, [r7, #2]
 800440a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	887a      	ldrh	r2, [r7, #2]
 8004418:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	887a      	ldrh	r2, [r7, #2]
 800441e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004434:	d802      	bhi.n	800443c <HAL_SPI_TransmitReceive+0xe6>
 8004436:	8a3b      	ldrh	r3, [r7, #16]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d908      	bls.n	800444e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800444a:	605a      	str	r2, [r3, #4]
 800444c:	e007      	b.n	800445e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800445c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004468:	2b40      	cmp	r3, #64	; 0x40
 800446a:	d007      	beq.n	800447c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800447a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004484:	d97c      	bls.n	8004580 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d002      	beq.n	8004494 <HAL_SPI_TransmitReceive+0x13e>
 800448e:	8a7b      	ldrh	r3, [r7, #18]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d169      	bne.n	8004568 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	881a      	ldrh	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a4:	1c9a      	adds	r2, r3, #2
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044b8:	e056      	b.n	8004568 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d11b      	bne.n	8004500 <HAL_SPI_TransmitReceive+0x1aa>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d016      	beq.n	8004500 <HAL_SPI_TransmitReceive+0x1aa>
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d113      	bne.n	8004500 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044dc:	881a      	ldrh	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e8:	1c9a      	adds	r2, r3, #2
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b01      	cmp	r3, #1
 800450c:	d11c      	bne.n	8004548 <HAL_SPI_TransmitReceive+0x1f2>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004514:	b29b      	uxth	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d016      	beq.n	8004548 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	b292      	uxth	r2, r2
 8004526:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	1c9a      	adds	r2, r3, #2
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004538:	b29b      	uxth	r3, r3
 800453a:	3b01      	subs	r3, #1
 800453c:	b29a      	uxth	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004544:	2301      	movs	r3, #1
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004548:	f7fe f932 	bl	80027b0 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004554:	429a      	cmp	r2, r3
 8004556:	d807      	bhi.n	8004568 <HAL_SPI_TransmitReceive+0x212>
 8004558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455e:	d003      	beq.n	8004568 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004566:	e0fb      	b.n	8004760 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1a3      	bne.n	80044ba <HAL_SPI_TransmitReceive+0x164>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d19d      	bne.n	80044ba <HAL_SPI_TransmitReceive+0x164>
 800457e:	e0df      	b.n	8004740 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <HAL_SPI_TransmitReceive+0x23a>
 8004588:	8a7b      	ldrh	r3, [r7, #18]
 800458a:	2b01      	cmp	r3, #1
 800458c:	f040 80cb 	bne.w	8004726 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004594:	b29b      	uxth	r3, r3
 8004596:	2b01      	cmp	r3, #1
 8004598:	d912      	bls.n	80045c0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459e:	881a      	ldrh	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045aa:	1c9a      	adds	r2, r3, #2
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3b02      	subs	r3, #2
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045be:	e0b2      	b.n	8004726 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	330c      	adds	r3, #12
 80045ca:	7812      	ldrb	r2, [r2, #0]
 80045cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045dc:	b29b      	uxth	r3, r3
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045e6:	e09e      	b.n	8004726 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d134      	bne.n	8004660 <HAL_SPI_TransmitReceive+0x30a>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d02f      	beq.n	8004660 <HAL_SPI_TransmitReceive+0x30a>
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	2b01      	cmp	r3, #1
 8004604:	d12c      	bne.n	8004660 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800460a:	b29b      	uxth	r3, r3
 800460c:	2b01      	cmp	r3, #1
 800460e:	d912      	bls.n	8004636 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004614:	881a      	ldrh	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004620:	1c9a      	adds	r2, r3, #2
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800462a:	b29b      	uxth	r3, r3
 800462c:	3b02      	subs	r3, #2
 800462e:	b29a      	uxth	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004634:	e012      	b.n	800465c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	330c      	adds	r3, #12
 8004640:	7812      	ldrb	r2, [r2, #0]
 8004642:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004648:	1c5a      	adds	r2, r3, #1
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004652:	b29b      	uxth	r3, r3
 8004654:	3b01      	subs	r3, #1
 8004656:	b29a      	uxth	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800465c:	2300      	movs	r3, #0
 800465e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b01      	cmp	r3, #1
 800466c:	d148      	bne.n	8004700 <HAL_SPI_TransmitReceive+0x3aa>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004674:	b29b      	uxth	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d042      	beq.n	8004700 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004680:	b29b      	uxth	r3, r3
 8004682:	2b01      	cmp	r3, #1
 8004684:	d923      	bls.n	80046ce <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68da      	ldr	r2, [r3, #12]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	b292      	uxth	r2, r2
 8004692:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	1c9a      	adds	r2, r3, #2
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	3b02      	subs	r3, #2
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d81f      	bhi.n	80046fc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046ca:	605a      	str	r2, [r3, #4]
 80046cc:	e016      	b.n	80046fc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f103 020c 	add.w	r2, r3, #12
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	7812      	ldrb	r2, [r2, #0]
 80046dc:	b2d2      	uxtb	r2, r2
 80046de:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046fc:	2301      	movs	r3, #1
 80046fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004700:	f7fe f856 	bl	80027b0 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800470c:	429a      	cmp	r2, r3
 800470e:	d803      	bhi.n	8004718 <HAL_SPI_TransmitReceive+0x3c2>
 8004710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004716:	d102      	bne.n	800471e <HAL_SPI_TransmitReceive+0x3c8>
 8004718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471a:	2b00      	cmp	r3, #0
 800471c:	d103      	bne.n	8004726 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004724:	e01c      	b.n	8004760 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800472a:	b29b      	uxth	r3, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	f47f af5b 	bne.w	80045e8 <HAL_SPI_TransmitReceive+0x292>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004738:	b29b      	uxth	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	f47f af54 	bne.w	80045e8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004740:	69fa      	ldr	r2, [r7, #28]
 8004742:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 f937 	bl	80049b8 <SPI_EndRxTxTransaction>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d006      	beq.n	800475e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2220      	movs	r2, #32
 800475a:	661a      	str	r2, [r3, #96]	; 0x60
 800475c:	e000      	b.n	8004760 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800475e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004770:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004774:	4618      	mov	r0, r3
 8004776:	3728      	adds	r7, #40	; 0x28
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	603b      	str	r3, [r7, #0]
 8004788:	4613      	mov	r3, r2
 800478a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800478c:	f7fe f810 	bl	80027b0 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004794:	1a9b      	subs	r3, r3, r2
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	4413      	add	r3, r2
 800479a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800479c:	f7fe f808 	bl	80027b0 <HAL_GetTick>
 80047a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047a2:	4b39      	ldr	r3, [pc, #228]	; (8004888 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	015b      	lsls	r3, r3, #5
 80047a8:	0d1b      	lsrs	r3, r3, #20
 80047aa:	69fa      	ldr	r2, [r7, #28]
 80047ac:	fb02 f303 	mul.w	r3, r2, r3
 80047b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047b2:	e054      	b.n	800485e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ba:	d050      	beq.n	800485e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047bc:	f7fd fff8 	bl	80027b0 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	69fa      	ldr	r2, [r7, #28]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d902      	bls.n	80047d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d13d      	bne.n	800484e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047ea:	d111      	bne.n	8004810 <SPI_WaitFlagStateUntilTimeout+0x94>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047f4:	d004      	beq.n	8004800 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047fe:	d107      	bne.n	8004810 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800480e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004818:	d10f      	bne.n	800483a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004838:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e017      	b.n	800487e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	3b01      	subs	r3, #1
 800485c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4013      	ands	r3, r2
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	429a      	cmp	r2, r3
 800486c:	bf0c      	ite	eq
 800486e:	2301      	moveq	r3, #1
 8004870:	2300      	movne	r3, #0
 8004872:	b2db      	uxtb	r3, r3
 8004874:	461a      	mov	r2, r3
 8004876:	79fb      	ldrb	r3, [r7, #7]
 8004878:	429a      	cmp	r2, r3
 800487a:	d19b      	bne.n	80047b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3720      	adds	r7, #32
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20000004 	.word	0x20000004

0800488c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b08a      	sub	sp, #40	; 0x28
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800489a:	2300      	movs	r3, #0
 800489c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800489e:	f7fd ff87 	bl	80027b0 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a6:	1a9b      	subs	r3, r3, r2
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	4413      	add	r3, r2
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80048ae:	f7fd ff7f 	bl	80027b0 <HAL_GetTick>
 80048b2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	330c      	adds	r3, #12
 80048ba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80048bc:	4b3d      	ldr	r3, [pc, #244]	; (80049b4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	4613      	mov	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	00da      	lsls	r2, r3, #3
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	0d1b      	lsrs	r3, r3, #20
 80048cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ce:	fb02 f303 	mul.w	r3, r2, r3
 80048d2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80048d4:	e060      	b.n	8004998 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80048dc:	d107      	bne.n	80048ee <SPI_WaitFifoStateUntilTimeout+0x62>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d104      	bne.n	80048ee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80048ec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f4:	d050      	beq.n	8004998 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048f6:	f7fd ff5b 	bl	80027b0 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004902:	429a      	cmp	r2, r3
 8004904:	d902      	bls.n	800490c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	2b00      	cmp	r3, #0
 800490a:	d13d      	bne.n	8004988 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800491a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004924:	d111      	bne.n	800494a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800492e:	d004      	beq.n	800493a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004938:	d107      	bne.n	800494a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004948:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004952:	d10f      	bne.n	8004974 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004972:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e010      	b.n	80049aa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800498e:	2300      	movs	r3, #0
 8004990:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	3b01      	subs	r3, #1
 8004996:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	4013      	ands	r3, r2
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d196      	bne.n	80048d6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3728      	adds	r7, #40	; 0x28
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	20000004 	.word	0x20000004

080049b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b088      	sub	sp, #32
 80049bc:	af02      	add	r7, sp, #8
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f7ff ff5b 	bl	800488c <SPI_WaitFifoStateUntilTimeout>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d007      	beq.n	80049ec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049e0:	f043 0220 	orr.w	r2, r3, #32
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e046      	b.n	8004a7a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80049ec:	4b25      	ldr	r3, [pc, #148]	; (8004a84 <SPI_EndRxTxTransaction+0xcc>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a25      	ldr	r2, [pc, #148]	; (8004a88 <SPI_EndRxTxTransaction+0xd0>)
 80049f2:	fba2 2303 	umull	r2, r3, r2, r3
 80049f6:	0d5b      	lsrs	r3, r3, #21
 80049f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80049fc:	fb02 f303 	mul.w	r3, r2, r3
 8004a00:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a0a:	d112      	bne.n	8004a32 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	2200      	movs	r2, #0
 8004a14:	2180      	movs	r1, #128	; 0x80
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f7ff feb0 	bl	800477c <SPI_WaitFlagStateUntilTimeout>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d016      	beq.n	8004a50 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a26:	f043 0220 	orr.w	r2, r3, #32
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e023      	b.n	8004a7a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00a      	beq.n	8004a4e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a48:	2b80      	cmp	r3, #128	; 0x80
 8004a4a:	d0f2      	beq.n	8004a32 <SPI_EndRxTxTransaction+0x7a>
 8004a4c:	e000      	b.n	8004a50 <SPI_EndRxTxTransaction+0x98>
        break;
 8004a4e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f7ff ff15 	bl	800488c <SPI_WaitFifoStateUntilTimeout>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d007      	beq.n	8004a78 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a6c:	f043 0220 	orr.w	r2, r3, #32
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e000      	b.n	8004a7a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3718      	adds	r7, #24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	20000004 	.word	0x20000004
 8004a88:	165e9f81 	.word	0x165e9f81

08004a8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e049      	b.n	8004b32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d106      	bne.n	8004ab8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7fd fbaa 	bl	800220c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	3304      	adds	r3, #4
 8004ac8:	4619      	mov	r1, r3
 8004aca:	4610      	mov	r0, r2
 8004acc:	f000 fd30 	bl	8005530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
	...

08004b3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d001      	beq.n	8004b54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e054      	b.n	8004bfe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2202      	movs	r2, #2
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0201 	orr.w	r2, r2, #1
 8004b6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a26      	ldr	r2, [pc, #152]	; (8004c0c <HAL_TIM_Base_Start_IT+0xd0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d022      	beq.n	8004bbc <HAL_TIM_Base_Start_IT+0x80>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b7e:	d01d      	beq.n	8004bbc <HAL_TIM_Base_Start_IT+0x80>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a22      	ldr	r2, [pc, #136]	; (8004c10 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d018      	beq.n	8004bbc <HAL_TIM_Base_Start_IT+0x80>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a21      	ldr	r2, [pc, #132]	; (8004c14 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d013      	beq.n	8004bbc <HAL_TIM_Base_Start_IT+0x80>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a1f      	ldr	r2, [pc, #124]	; (8004c18 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d00e      	beq.n	8004bbc <HAL_TIM_Base_Start_IT+0x80>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a1e      	ldr	r2, [pc, #120]	; (8004c1c <HAL_TIM_Base_Start_IT+0xe0>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d009      	beq.n	8004bbc <HAL_TIM_Base_Start_IT+0x80>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a1c      	ldr	r2, [pc, #112]	; (8004c20 <HAL_TIM_Base_Start_IT+0xe4>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d004      	beq.n	8004bbc <HAL_TIM_Base_Start_IT+0x80>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a1b      	ldr	r2, [pc, #108]	; (8004c24 <HAL_TIM_Base_Start_IT+0xe8>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d115      	bne.n	8004be8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	4b19      	ldr	r3, [pc, #100]	; (8004c28 <HAL_TIM_Base_Start_IT+0xec>)
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2b06      	cmp	r3, #6
 8004bcc:	d015      	beq.n	8004bfa <HAL_TIM_Base_Start_IT+0xbe>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bd4:	d011      	beq.n	8004bfa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f042 0201 	orr.w	r2, r2, #1
 8004be4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be6:	e008      	b.n	8004bfa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f042 0201 	orr.w	r2, r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	e000      	b.n	8004bfc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bfa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	40010000 	.word	0x40010000
 8004c10:	40000400 	.word	0x40000400
 8004c14:	40000800 	.word	0x40000800
 8004c18:	40000c00 	.word	0x40000c00
 8004c1c:	40010400 	.word	0x40010400
 8004c20:	40014000 	.word	0x40014000
 8004c24:	40001800 	.word	0x40001800
 8004c28:	00010007 	.word	0x00010007

08004c2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e049      	b.n	8004cd2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d106      	bne.n	8004c58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f841 	bl	8004cda <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	3304      	adds	r3, #4
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4610      	mov	r0, r2
 8004c6c:	f000 fc60 	bl	8005530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
	...

08004cf0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d109      	bne.n	8004d14 <HAL_TIM_PWM_Start+0x24>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	bf14      	ite	ne
 8004d0c:	2301      	movne	r3, #1
 8004d0e:	2300      	moveq	r3, #0
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	e03c      	b.n	8004d8e <HAL_TIM_PWM_Start+0x9e>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d109      	bne.n	8004d2e <HAL_TIM_PWM_Start+0x3e>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	bf14      	ite	ne
 8004d26:	2301      	movne	r3, #1
 8004d28:	2300      	moveq	r3, #0
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	e02f      	b.n	8004d8e <HAL_TIM_PWM_Start+0x9e>
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b08      	cmp	r3, #8
 8004d32:	d109      	bne.n	8004d48 <HAL_TIM_PWM_Start+0x58>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	bf14      	ite	ne
 8004d40:	2301      	movne	r3, #1
 8004d42:	2300      	moveq	r3, #0
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	e022      	b.n	8004d8e <HAL_TIM_PWM_Start+0x9e>
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	2b0c      	cmp	r3, #12
 8004d4c:	d109      	bne.n	8004d62 <HAL_TIM_PWM_Start+0x72>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	bf14      	ite	ne
 8004d5a:	2301      	movne	r3, #1
 8004d5c:	2300      	moveq	r3, #0
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	e015      	b.n	8004d8e <HAL_TIM_PWM_Start+0x9e>
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2b10      	cmp	r3, #16
 8004d66:	d109      	bne.n	8004d7c <HAL_TIM_PWM_Start+0x8c>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	bf14      	ite	ne
 8004d74:	2301      	movne	r3, #1
 8004d76:	2300      	moveq	r3, #0
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	e008      	b.n	8004d8e <HAL_TIM_PWM_Start+0x9e>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	bf14      	ite	ne
 8004d88:	2301      	movne	r3, #1
 8004d8a:	2300      	moveq	r3, #0
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e092      	b.n	8004ebc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d104      	bne.n	8004da6 <HAL_TIM_PWM_Start+0xb6>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004da4:	e023      	b.n	8004dee <HAL_TIM_PWM_Start+0xfe>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b04      	cmp	r3, #4
 8004daa:	d104      	bne.n	8004db6 <HAL_TIM_PWM_Start+0xc6>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004db4:	e01b      	b.n	8004dee <HAL_TIM_PWM_Start+0xfe>
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	d104      	bne.n	8004dc6 <HAL_TIM_PWM_Start+0xd6>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dc4:	e013      	b.n	8004dee <HAL_TIM_PWM_Start+0xfe>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b0c      	cmp	r3, #12
 8004dca:	d104      	bne.n	8004dd6 <HAL_TIM_PWM_Start+0xe6>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2202      	movs	r2, #2
 8004dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004dd4:	e00b      	b.n	8004dee <HAL_TIM_PWM_Start+0xfe>
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b10      	cmp	r3, #16
 8004dda:	d104      	bne.n	8004de6 <HAL_TIM_PWM_Start+0xf6>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004de4:	e003      	b.n	8004dee <HAL_TIM_PWM_Start+0xfe>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2202      	movs	r2, #2
 8004dea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2201      	movs	r2, #1
 8004df4:	6839      	ldr	r1, [r7, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 ff32 	bl	8005c60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a30      	ldr	r2, [pc, #192]	; (8004ec4 <HAL_TIM_PWM_Start+0x1d4>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d004      	beq.n	8004e10 <HAL_TIM_PWM_Start+0x120>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a2f      	ldr	r2, [pc, #188]	; (8004ec8 <HAL_TIM_PWM_Start+0x1d8>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d101      	bne.n	8004e14 <HAL_TIM_PWM_Start+0x124>
 8004e10:	2301      	movs	r3, #1
 8004e12:	e000      	b.n	8004e16 <HAL_TIM_PWM_Start+0x126>
 8004e14:	2300      	movs	r3, #0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d007      	beq.n	8004e2a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a25      	ldr	r2, [pc, #148]	; (8004ec4 <HAL_TIM_PWM_Start+0x1d4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d022      	beq.n	8004e7a <HAL_TIM_PWM_Start+0x18a>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e3c:	d01d      	beq.n	8004e7a <HAL_TIM_PWM_Start+0x18a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a22      	ldr	r2, [pc, #136]	; (8004ecc <HAL_TIM_PWM_Start+0x1dc>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d018      	beq.n	8004e7a <HAL_TIM_PWM_Start+0x18a>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a20      	ldr	r2, [pc, #128]	; (8004ed0 <HAL_TIM_PWM_Start+0x1e0>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d013      	beq.n	8004e7a <HAL_TIM_PWM_Start+0x18a>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a1f      	ldr	r2, [pc, #124]	; (8004ed4 <HAL_TIM_PWM_Start+0x1e4>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d00e      	beq.n	8004e7a <HAL_TIM_PWM_Start+0x18a>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a19      	ldr	r2, [pc, #100]	; (8004ec8 <HAL_TIM_PWM_Start+0x1d8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d009      	beq.n	8004e7a <HAL_TIM_PWM_Start+0x18a>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a1b      	ldr	r2, [pc, #108]	; (8004ed8 <HAL_TIM_PWM_Start+0x1e8>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d004      	beq.n	8004e7a <HAL_TIM_PWM_Start+0x18a>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a19      	ldr	r2, [pc, #100]	; (8004edc <HAL_TIM_PWM_Start+0x1ec>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d115      	bne.n	8004ea6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	689a      	ldr	r2, [r3, #8]
 8004e80:	4b17      	ldr	r3, [pc, #92]	; (8004ee0 <HAL_TIM_PWM_Start+0x1f0>)
 8004e82:	4013      	ands	r3, r2
 8004e84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2b06      	cmp	r3, #6
 8004e8a:	d015      	beq.n	8004eb8 <HAL_TIM_PWM_Start+0x1c8>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e92:	d011      	beq.n	8004eb8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0201 	orr.w	r2, r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea4:	e008      	b.n	8004eb8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f042 0201 	orr.w	r2, r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	e000      	b.n	8004eba <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	40010000 	.word	0x40010000
 8004ec8:	40010400 	.word	0x40010400
 8004ecc:	40000400 	.word	0x40000400
 8004ed0:	40000800 	.word	0x40000800
 8004ed4:	40000c00 	.word	0x40000c00
 8004ed8:	40014000 	.word	0x40014000
 8004edc:	40001800 	.word	0x40001800
 8004ee0:	00010007 	.word	0x00010007

08004ee4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d122      	bne.n	8004f40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d11b      	bne.n	8004f40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f06f 0202 	mvn.w	r2, #2
 8004f10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 fae4 	bl	80054f4 <HAL_TIM_IC_CaptureCallback>
 8004f2c:	e005      	b.n	8004f3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 fad6 	bl	80054e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 fae7 	bl	8005508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	f003 0304 	and.w	r3, r3, #4
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d122      	bne.n	8004f94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	f003 0304 	and.w	r3, r3, #4
 8004f58:	2b04      	cmp	r3, #4
 8004f5a:	d11b      	bne.n	8004f94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f06f 0204 	mvn.w	r2, #4
 8004f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2202      	movs	r2, #2
 8004f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 faba 	bl	80054f4 <HAL_TIM_IC_CaptureCallback>
 8004f80:	e005      	b.n	8004f8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 faac 	bl	80054e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 fabd 	bl	8005508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	f003 0308 	and.w	r3, r3, #8
 8004f9e:	2b08      	cmp	r3, #8
 8004fa0:	d122      	bne.n	8004fe8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f003 0308 	and.w	r3, r3, #8
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d11b      	bne.n	8004fe8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f06f 0208 	mvn.w	r2, #8
 8004fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2204      	movs	r2, #4
 8004fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	f003 0303 	and.w	r3, r3, #3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 fa90 	bl	80054f4 <HAL_TIM_IC_CaptureCallback>
 8004fd4:	e005      	b.n	8004fe2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 fa82 	bl	80054e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 fa93 	bl	8005508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	f003 0310 	and.w	r3, r3, #16
 8004ff2:	2b10      	cmp	r3, #16
 8004ff4:	d122      	bne.n	800503c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f003 0310 	and.w	r3, r3, #16
 8005000:	2b10      	cmp	r3, #16
 8005002:	d11b      	bne.n	800503c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f06f 0210 	mvn.w	r2, #16
 800500c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2208      	movs	r2, #8
 8005012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	69db      	ldr	r3, [r3, #28]
 800501a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 fa66 	bl	80054f4 <HAL_TIM_IC_CaptureCallback>
 8005028:	e005      	b.n	8005036 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 fa58 	bl	80054e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 fa69 	bl	8005508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b01      	cmp	r3, #1
 8005048:	d10e      	bne.n	8005068 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	2b01      	cmp	r3, #1
 8005056:	d107      	bne.n	8005068 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f06f 0201 	mvn.w	r2, #1
 8005060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7fc ffd8 	bl	8002018 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005072:	2b80      	cmp	r3, #128	; 0x80
 8005074:	d10e      	bne.n	8005094 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005080:	2b80      	cmp	r3, #128	; 0x80
 8005082:	d107      	bne.n	8005094 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800508c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 fea4 	bl	8005ddc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050a2:	d10e      	bne.n	80050c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ae:	2b80      	cmp	r3, #128	; 0x80
 80050b0:	d107      	bne.n	80050c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80050ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 fe97 	bl	8005df0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050cc:	2b40      	cmp	r3, #64	; 0x40
 80050ce:	d10e      	bne.n	80050ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050da:	2b40      	cmp	r3, #64	; 0x40
 80050dc:	d107      	bne.n	80050ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 fa17 	bl	800551c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	f003 0320 	and.w	r3, r3, #32
 80050f8:	2b20      	cmp	r3, #32
 80050fa:	d10e      	bne.n	800511a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f003 0320 	and.w	r3, r3, #32
 8005106:	2b20      	cmp	r3, #32
 8005108:	d107      	bne.n	800511a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f06f 0220 	mvn.w	r2, #32
 8005112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 fe57 	bl	8005dc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800511a:	bf00      	nop
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
	...

08005124 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005130:	2300      	movs	r3, #0
 8005132:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800513a:	2b01      	cmp	r3, #1
 800513c:	d101      	bne.n	8005142 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800513e:	2302      	movs	r3, #2
 8005140:	e0ff      	b.n	8005342 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b14      	cmp	r3, #20
 800514e:	f200 80f0 	bhi.w	8005332 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005152:	a201      	add	r2, pc, #4	; (adr r2, 8005158 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005158:	080051ad 	.word	0x080051ad
 800515c:	08005333 	.word	0x08005333
 8005160:	08005333 	.word	0x08005333
 8005164:	08005333 	.word	0x08005333
 8005168:	080051ed 	.word	0x080051ed
 800516c:	08005333 	.word	0x08005333
 8005170:	08005333 	.word	0x08005333
 8005174:	08005333 	.word	0x08005333
 8005178:	0800522f 	.word	0x0800522f
 800517c:	08005333 	.word	0x08005333
 8005180:	08005333 	.word	0x08005333
 8005184:	08005333 	.word	0x08005333
 8005188:	0800526f 	.word	0x0800526f
 800518c:	08005333 	.word	0x08005333
 8005190:	08005333 	.word	0x08005333
 8005194:	08005333 	.word	0x08005333
 8005198:	080052b1 	.word	0x080052b1
 800519c:	08005333 	.word	0x08005333
 80051a0:	08005333 	.word	0x08005333
 80051a4:	08005333 	.word	0x08005333
 80051a8:	080052f1 	.word	0x080052f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68b9      	ldr	r1, [r7, #8]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fa5c 	bl	8005670 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	699a      	ldr	r2, [r3, #24]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0208 	orr.w	r2, r2, #8
 80051c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	699a      	ldr	r2, [r3, #24]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 0204 	bic.w	r2, r2, #4
 80051d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6999      	ldr	r1, [r3, #24]
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	691a      	ldr	r2, [r3, #16]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	619a      	str	r2, [r3, #24]
      break;
 80051ea:	e0a5      	b.n	8005338 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68b9      	ldr	r1, [r7, #8]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 faae 	bl	8005754 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	699a      	ldr	r2, [r3, #24]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005206:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	699a      	ldr	r2, [r3, #24]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005216:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6999      	ldr	r1, [r3, #24]
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	021a      	lsls	r2, r3, #8
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	619a      	str	r2, [r3, #24]
      break;
 800522c:	e084      	b.n	8005338 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68b9      	ldr	r1, [r7, #8]
 8005234:	4618      	mov	r0, r3
 8005236:	f000 fb05 	bl	8005844 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	69da      	ldr	r2, [r3, #28]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f042 0208 	orr.w	r2, r2, #8
 8005248:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	69da      	ldr	r2, [r3, #28]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 0204 	bic.w	r2, r2, #4
 8005258:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	69d9      	ldr	r1, [r3, #28]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	691a      	ldr	r2, [r3, #16]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	61da      	str	r2, [r3, #28]
      break;
 800526c:	e064      	b.n	8005338 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68b9      	ldr	r1, [r7, #8]
 8005274:	4618      	mov	r0, r3
 8005276:	f000 fb5b 	bl	8005930 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	69da      	ldr	r2, [r3, #28]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005288:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	69da      	ldr	r2, [r3, #28]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005298:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	69d9      	ldr	r1, [r3, #28]
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	021a      	lsls	r2, r3, #8
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	61da      	str	r2, [r3, #28]
      break;
 80052ae:	e043      	b.n	8005338 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68b9      	ldr	r1, [r7, #8]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 fb92 	bl	80059e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0208 	orr.w	r2, r2, #8
 80052ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f022 0204 	bic.w	r2, r2, #4
 80052da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	691a      	ldr	r2, [r3, #16]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052ee:	e023      	b.n	8005338 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68b9      	ldr	r1, [r7, #8]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 fbc4 	bl	8005a84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800530a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800531a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	021a      	lsls	r2, r3, #8
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	430a      	orrs	r2, r1
 800532e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005330:	e002      	b.n	8005338 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	75fb      	strb	r3, [r7, #23]
      break;
 8005336:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005340:	7dfb      	ldrb	r3, [r7, #23]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3718      	adds	r7, #24
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop

0800534c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005356:	2300      	movs	r3, #0
 8005358:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005360:	2b01      	cmp	r3, #1
 8005362:	d101      	bne.n	8005368 <HAL_TIM_ConfigClockSource+0x1c>
 8005364:	2302      	movs	r3, #2
 8005366:	e0b4      	b.n	80054d2 <HAL_TIM_ConfigClockSource+0x186>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2202      	movs	r2, #2
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	4b56      	ldr	r3, [pc, #344]	; (80054dc <HAL_TIM_ConfigClockSource+0x190>)
 8005384:	4013      	ands	r3, r2
 8005386:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800538e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a0:	d03e      	beq.n	8005420 <HAL_TIM_ConfigClockSource+0xd4>
 80053a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a6:	f200 8087 	bhi.w	80054b8 <HAL_TIM_ConfigClockSource+0x16c>
 80053aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ae:	f000 8086 	beq.w	80054be <HAL_TIM_ConfigClockSource+0x172>
 80053b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053b6:	d87f      	bhi.n	80054b8 <HAL_TIM_ConfigClockSource+0x16c>
 80053b8:	2b70      	cmp	r3, #112	; 0x70
 80053ba:	d01a      	beq.n	80053f2 <HAL_TIM_ConfigClockSource+0xa6>
 80053bc:	2b70      	cmp	r3, #112	; 0x70
 80053be:	d87b      	bhi.n	80054b8 <HAL_TIM_ConfigClockSource+0x16c>
 80053c0:	2b60      	cmp	r3, #96	; 0x60
 80053c2:	d050      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0x11a>
 80053c4:	2b60      	cmp	r3, #96	; 0x60
 80053c6:	d877      	bhi.n	80054b8 <HAL_TIM_ConfigClockSource+0x16c>
 80053c8:	2b50      	cmp	r3, #80	; 0x50
 80053ca:	d03c      	beq.n	8005446 <HAL_TIM_ConfigClockSource+0xfa>
 80053cc:	2b50      	cmp	r3, #80	; 0x50
 80053ce:	d873      	bhi.n	80054b8 <HAL_TIM_ConfigClockSource+0x16c>
 80053d0:	2b40      	cmp	r3, #64	; 0x40
 80053d2:	d058      	beq.n	8005486 <HAL_TIM_ConfigClockSource+0x13a>
 80053d4:	2b40      	cmp	r3, #64	; 0x40
 80053d6:	d86f      	bhi.n	80054b8 <HAL_TIM_ConfigClockSource+0x16c>
 80053d8:	2b30      	cmp	r3, #48	; 0x30
 80053da:	d064      	beq.n	80054a6 <HAL_TIM_ConfigClockSource+0x15a>
 80053dc:	2b30      	cmp	r3, #48	; 0x30
 80053de:	d86b      	bhi.n	80054b8 <HAL_TIM_ConfigClockSource+0x16c>
 80053e0:	2b20      	cmp	r3, #32
 80053e2:	d060      	beq.n	80054a6 <HAL_TIM_ConfigClockSource+0x15a>
 80053e4:	2b20      	cmp	r3, #32
 80053e6:	d867      	bhi.n	80054b8 <HAL_TIM_ConfigClockSource+0x16c>
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d05c      	beq.n	80054a6 <HAL_TIM_ConfigClockSource+0x15a>
 80053ec:	2b10      	cmp	r3, #16
 80053ee:	d05a      	beq.n	80054a6 <HAL_TIM_ConfigClockSource+0x15a>
 80053f0:	e062      	b.n	80054b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6818      	ldr	r0, [r3, #0]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	6899      	ldr	r1, [r3, #8]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	685a      	ldr	r2, [r3, #4]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f000 fc0d 	bl	8005c20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005414:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	609a      	str	r2, [r3, #8]
      break;
 800541e:	e04f      	b.n	80054c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6818      	ldr	r0, [r3, #0]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	6899      	ldr	r1, [r3, #8]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	f000 fbf6 	bl	8005c20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689a      	ldr	r2, [r3, #8]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005442:	609a      	str	r2, [r3, #8]
      break;
 8005444:	e03c      	b.n	80054c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6818      	ldr	r0, [r3, #0]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	6859      	ldr	r1, [r3, #4]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	461a      	mov	r2, r3
 8005454:	f000 fb6a 	bl	8005b2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2150      	movs	r1, #80	; 0x50
 800545e:	4618      	mov	r0, r3
 8005460:	f000 fbc3 	bl	8005bea <TIM_ITRx_SetConfig>
      break;
 8005464:	e02c      	b.n	80054c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6818      	ldr	r0, [r3, #0]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	6859      	ldr	r1, [r3, #4]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	461a      	mov	r2, r3
 8005474:	f000 fb89 	bl	8005b8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2160      	movs	r1, #96	; 0x60
 800547e:	4618      	mov	r0, r3
 8005480:	f000 fbb3 	bl	8005bea <TIM_ITRx_SetConfig>
      break;
 8005484:	e01c      	b.n	80054c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6818      	ldr	r0, [r3, #0]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	6859      	ldr	r1, [r3, #4]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	461a      	mov	r2, r3
 8005494:	f000 fb4a 	bl	8005b2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2140      	movs	r1, #64	; 0x40
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 fba3 	bl	8005bea <TIM_ITRx_SetConfig>
      break;
 80054a4:	e00c      	b.n	80054c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4619      	mov	r1, r3
 80054b0:	4610      	mov	r0, r2
 80054b2:	f000 fb9a 	bl	8005bea <TIM_ITRx_SetConfig>
      break;
 80054b6:	e003      	b.n	80054c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	73fb      	strb	r3, [r7, #15]
      break;
 80054bc:	e000      	b.n	80054c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	fffeff88 	.word	0xfffeff88

080054e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a40      	ldr	r2, [pc, #256]	; (8005644 <TIM_Base_SetConfig+0x114>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d013      	beq.n	8005570 <TIM_Base_SetConfig+0x40>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800554e:	d00f      	beq.n	8005570 <TIM_Base_SetConfig+0x40>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a3d      	ldr	r2, [pc, #244]	; (8005648 <TIM_Base_SetConfig+0x118>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d00b      	beq.n	8005570 <TIM_Base_SetConfig+0x40>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a3c      	ldr	r2, [pc, #240]	; (800564c <TIM_Base_SetConfig+0x11c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d007      	beq.n	8005570 <TIM_Base_SetConfig+0x40>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a3b      	ldr	r2, [pc, #236]	; (8005650 <TIM_Base_SetConfig+0x120>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d003      	beq.n	8005570 <TIM_Base_SetConfig+0x40>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a3a      	ldr	r2, [pc, #232]	; (8005654 <TIM_Base_SetConfig+0x124>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d108      	bne.n	8005582 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	4313      	orrs	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a2f      	ldr	r2, [pc, #188]	; (8005644 <TIM_Base_SetConfig+0x114>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d02b      	beq.n	80055e2 <TIM_Base_SetConfig+0xb2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005590:	d027      	beq.n	80055e2 <TIM_Base_SetConfig+0xb2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a2c      	ldr	r2, [pc, #176]	; (8005648 <TIM_Base_SetConfig+0x118>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d023      	beq.n	80055e2 <TIM_Base_SetConfig+0xb2>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a2b      	ldr	r2, [pc, #172]	; (800564c <TIM_Base_SetConfig+0x11c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d01f      	beq.n	80055e2 <TIM_Base_SetConfig+0xb2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a2a      	ldr	r2, [pc, #168]	; (8005650 <TIM_Base_SetConfig+0x120>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d01b      	beq.n	80055e2 <TIM_Base_SetConfig+0xb2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a29      	ldr	r2, [pc, #164]	; (8005654 <TIM_Base_SetConfig+0x124>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d017      	beq.n	80055e2 <TIM_Base_SetConfig+0xb2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a28      	ldr	r2, [pc, #160]	; (8005658 <TIM_Base_SetConfig+0x128>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d013      	beq.n	80055e2 <TIM_Base_SetConfig+0xb2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a27      	ldr	r2, [pc, #156]	; (800565c <TIM_Base_SetConfig+0x12c>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d00f      	beq.n	80055e2 <TIM_Base_SetConfig+0xb2>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a26      	ldr	r2, [pc, #152]	; (8005660 <TIM_Base_SetConfig+0x130>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d00b      	beq.n	80055e2 <TIM_Base_SetConfig+0xb2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a25      	ldr	r2, [pc, #148]	; (8005664 <TIM_Base_SetConfig+0x134>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d007      	beq.n	80055e2 <TIM_Base_SetConfig+0xb2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a24      	ldr	r2, [pc, #144]	; (8005668 <TIM_Base_SetConfig+0x138>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d003      	beq.n	80055e2 <TIM_Base_SetConfig+0xb2>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a23      	ldr	r2, [pc, #140]	; (800566c <TIM_Base_SetConfig+0x13c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d108      	bne.n	80055f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	4313      	orrs	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a0a      	ldr	r2, [pc, #40]	; (8005644 <TIM_Base_SetConfig+0x114>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d003      	beq.n	8005628 <TIM_Base_SetConfig+0xf8>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a0c      	ldr	r2, [pc, #48]	; (8005654 <TIM_Base_SetConfig+0x124>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d103      	bne.n	8005630 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	691a      	ldr	r2, [r3, #16]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	615a      	str	r2, [r3, #20]
}
 8005636:	bf00      	nop
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	40010000 	.word	0x40010000
 8005648:	40000400 	.word	0x40000400
 800564c:	40000800 	.word	0x40000800
 8005650:	40000c00 	.word	0x40000c00
 8005654:	40010400 	.word	0x40010400
 8005658:	40014000 	.word	0x40014000
 800565c:	40014400 	.word	0x40014400
 8005660:	40014800 	.word	0x40014800
 8005664:	40001800 	.word	0x40001800
 8005668:	40001c00 	.word	0x40001c00
 800566c:	40002000 	.word	0x40002000

08005670 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	f023 0201 	bic.w	r2, r3, #1
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	4b2b      	ldr	r3, [pc, #172]	; (8005748 <TIM_OC1_SetConfig+0xd8>)
 800569c:	4013      	ands	r3, r2
 800569e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f023 0303 	bic.w	r3, r3, #3
 80056a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f023 0302 	bic.w	r3, r3, #2
 80056b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a21      	ldr	r2, [pc, #132]	; (800574c <TIM_OC1_SetConfig+0xdc>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d003      	beq.n	80056d4 <TIM_OC1_SetConfig+0x64>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a20      	ldr	r2, [pc, #128]	; (8005750 <TIM_OC1_SetConfig+0xe0>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d10c      	bne.n	80056ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f023 0308 	bic.w	r3, r3, #8
 80056da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f023 0304 	bic.w	r3, r3, #4
 80056ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a16      	ldr	r2, [pc, #88]	; (800574c <TIM_OC1_SetConfig+0xdc>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d003      	beq.n	80056fe <TIM_OC1_SetConfig+0x8e>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a15      	ldr	r2, [pc, #84]	; (8005750 <TIM_OC1_SetConfig+0xe0>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d111      	bne.n	8005722 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005704:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800570c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	4313      	orrs	r3, r2
 8005716:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	4313      	orrs	r3, r2
 8005720:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	621a      	str	r2, [r3, #32]
}
 800573c:	bf00      	nop
 800573e:	371c      	adds	r7, #28
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	fffeff8f 	.word	0xfffeff8f
 800574c:	40010000 	.word	0x40010000
 8005750:	40010400 	.word	0x40010400

08005754 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	f023 0210 	bic.w	r2, r3, #16
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	4b2e      	ldr	r3, [pc, #184]	; (8005838 <TIM_OC2_SetConfig+0xe4>)
 8005780:	4013      	ands	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800578a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	021b      	lsls	r3, r3, #8
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	4313      	orrs	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f023 0320 	bic.w	r3, r3, #32
 800579e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	011b      	lsls	r3, r3, #4
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a23      	ldr	r2, [pc, #140]	; (800583c <TIM_OC2_SetConfig+0xe8>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d003      	beq.n	80057bc <TIM_OC2_SetConfig+0x68>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a22      	ldr	r2, [pc, #136]	; (8005840 <TIM_OC2_SetConfig+0xec>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d10d      	bne.n	80057d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	011b      	lsls	r3, r3, #4
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a18      	ldr	r2, [pc, #96]	; (800583c <TIM_OC2_SetConfig+0xe8>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d003      	beq.n	80057e8 <TIM_OC2_SetConfig+0x94>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a17      	ldr	r2, [pc, #92]	; (8005840 <TIM_OC2_SetConfig+0xec>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d113      	bne.n	8005810 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	695b      	ldr	r3, [r3, #20]
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	4313      	orrs	r3, r2
 8005802:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	4313      	orrs	r3, r2
 800580e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	621a      	str	r2, [r3, #32]
}
 800582a:	bf00      	nop
 800582c:	371c      	adds	r7, #28
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	feff8fff 	.word	0xfeff8fff
 800583c:	40010000 	.word	0x40010000
 8005840:	40010400 	.word	0x40010400

08005844 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005844:	b480      	push	{r7}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4b2d      	ldr	r3, [pc, #180]	; (8005924 <TIM_OC3_SetConfig+0xe0>)
 8005870:	4013      	ands	r3, r2
 8005872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f023 0303 	bic.w	r3, r3, #3
 800587a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	4313      	orrs	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800588c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	021b      	lsls	r3, r3, #8
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	4313      	orrs	r3, r2
 8005898:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a22      	ldr	r2, [pc, #136]	; (8005928 <TIM_OC3_SetConfig+0xe4>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d003      	beq.n	80058aa <TIM_OC3_SetConfig+0x66>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a21      	ldr	r2, [pc, #132]	; (800592c <TIM_OC3_SetConfig+0xe8>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d10d      	bne.n	80058c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	021b      	lsls	r3, r3, #8
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a17      	ldr	r2, [pc, #92]	; (8005928 <TIM_OC3_SetConfig+0xe4>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d003      	beq.n	80058d6 <TIM_OC3_SetConfig+0x92>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a16      	ldr	r2, [pc, #88]	; (800592c <TIM_OC3_SetConfig+0xe8>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d113      	bne.n	80058fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	011b      	lsls	r3, r3, #4
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	011b      	lsls	r3, r3, #4
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	621a      	str	r2, [r3, #32]
}
 8005918:	bf00      	nop
 800591a:	371c      	adds	r7, #28
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr
 8005924:	fffeff8f 	.word	0xfffeff8f
 8005928:	40010000 	.word	0x40010000
 800592c:	40010400 	.word	0x40010400

08005930 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005930:	b480      	push	{r7}
 8005932:	b087      	sub	sp, #28
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	4b1e      	ldr	r3, [pc, #120]	; (80059d4 <TIM_OC4_SetConfig+0xa4>)
 800595c:	4013      	ands	r3, r2
 800595e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	021b      	lsls	r3, r3, #8
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	4313      	orrs	r3, r2
 8005972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800597a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	031b      	lsls	r3, r3, #12
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	4313      	orrs	r3, r2
 8005986:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a13      	ldr	r2, [pc, #76]	; (80059d8 <TIM_OC4_SetConfig+0xa8>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d003      	beq.n	8005998 <TIM_OC4_SetConfig+0x68>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a12      	ldr	r2, [pc, #72]	; (80059dc <TIM_OC4_SetConfig+0xac>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d109      	bne.n	80059ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800599e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	019b      	lsls	r3, r3, #6
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	621a      	str	r2, [r3, #32]
}
 80059c6:	bf00      	nop
 80059c8:	371c      	adds	r7, #28
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	feff8fff 	.word	0xfeff8fff
 80059d8:	40010000 	.word	0x40010000
 80059dc:	40010400 	.word	0x40010400

080059e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b087      	sub	sp, #28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	4b1b      	ldr	r3, [pc, #108]	; (8005a78 <TIM_OC5_SetConfig+0x98>)
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	041b      	lsls	r3, r3, #16
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a12      	ldr	r2, [pc, #72]	; (8005a7c <TIM_OC5_SetConfig+0x9c>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d003      	beq.n	8005a3e <TIM_OC5_SetConfig+0x5e>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a11      	ldr	r2, [pc, #68]	; (8005a80 <TIM_OC5_SetConfig+0xa0>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d109      	bne.n	8005a52 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	021b      	lsls	r3, r3, #8
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	621a      	str	r2, [r3, #32]
}
 8005a6c:	bf00      	nop
 8005a6e:	371c      	adds	r7, #28
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	fffeff8f 	.word	0xfffeff8f
 8005a7c:	40010000 	.word	0x40010000
 8005a80:	40010400 	.word	0x40010400

08005a84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	4b1c      	ldr	r3, [pc, #112]	; (8005b20 <TIM_OC6_SetConfig+0x9c>)
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	021b      	lsls	r3, r3, #8
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ac6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	051b      	lsls	r3, r3, #20
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a13      	ldr	r2, [pc, #76]	; (8005b24 <TIM_OC6_SetConfig+0xa0>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d003      	beq.n	8005ae4 <TIM_OC6_SetConfig+0x60>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a12      	ldr	r2, [pc, #72]	; (8005b28 <TIM_OC6_SetConfig+0xa4>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d109      	bne.n	8005af8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005aea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	029b      	lsls	r3, r3, #10
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	621a      	str	r2, [r3, #32]
}
 8005b12:	bf00      	nop
 8005b14:	371c      	adds	r7, #28
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	feff8fff 	.word	0xfeff8fff
 8005b24:	40010000 	.word	0x40010000
 8005b28:	40010400 	.word	0x40010400

08005b2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b087      	sub	sp, #28
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	f023 0201 	bic.w	r2, r3, #1
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	011b      	lsls	r3, r3, #4
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f023 030a 	bic.w	r3, r3, #10
 8005b68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	621a      	str	r2, [r3, #32]
}
 8005b7e:	bf00      	nop
 8005b80:	371c      	adds	r7, #28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b087      	sub	sp, #28
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	60f8      	str	r0, [r7, #12]
 8005b92:	60b9      	str	r1, [r7, #8]
 8005b94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	f023 0210 	bic.w	r2, r3, #16
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	031b      	lsls	r3, r3, #12
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	011b      	lsls	r3, r3, #4
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	621a      	str	r2, [r3, #32]
}
 8005bde:	bf00      	nop
 8005be0:	371c      	adds	r7, #28
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b085      	sub	sp, #20
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
 8005bf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	f043 0307 	orr.w	r3, r3, #7
 8005c0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	609a      	str	r2, [r3, #8]
}
 8005c14:	bf00      	nop
 8005c16:	3714      	adds	r7, #20
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
 8005c2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	021a      	lsls	r2, r3, #8
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	431a      	orrs	r2, r3
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	609a      	str	r2, [r3, #8]
}
 8005c54:	bf00      	nop
 8005c56:	371c      	adds	r7, #28
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	f003 031f 	and.w	r3, r3, #31
 8005c72:	2201      	movs	r2, #1
 8005c74:	fa02 f303 	lsl.w	r3, r2, r3
 8005c78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6a1a      	ldr	r2, [r3, #32]
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	43db      	mvns	r3, r3
 8005c82:	401a      	ands	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6a1a      	ldr	r2, [r3, #32]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f003 031f 	and.w	r3, r3, #31
 8005c92:	6879      	ldr	r1, [r7, #4]
 8005c94:	fa01 f303 	lsl.w	r3, r1, r3
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	621a      	str	r2, [r3, #32]
}
 8005c9e:	bf00      	nop
 8005ca0:	371c      	adds	r7, #28
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
	...

08005cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d101      	bne.n	8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	e06d      	b.n	8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a30      	ldr	r2, [pc, #192]	; (8005dac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d004      	beq.n	8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a2f      	ldr	r2, [pc, #188]	; (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d108      	bne.n	8005d0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005cfe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a20      	ldr	r2, [pc, #128]	; (8005dac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d022      	beq.n	8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d36:	d01d      	beq.n	8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a1d      	ldr	r2, [pc, #116]	; (8005db4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d018      	beq.n	8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a1c      	ldr	r2, [pc, #112]	; (8005db8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d013      	beq.n	8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a1a      	ldr	r2, [pc, #104]	; (8005dbc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d00e      	beq.n	8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a15      	ldr	r2, [pc, #84]	; (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d009      	beq.n	8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a16      	ldr	r2, [pc, #88]	; (8005dc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d004      	beq.n	8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a15      	ldr	r2, [pc, #84]	; (8005dc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d10c      	bne.n	8005d8e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3714      	adds	r7, #20
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	40010000 	.word	0x40010000
 8005db0:	40010400 	.word	0x40010400
 8005db4:	40000400 	.word	0x40000400
 8005db8:	40000800 	.word	0x40000800
 8005dbc:	40000c00 	.word	0x40000c00
 8005dc0:	40014000 	.word	0x40014000
 8005dc4:	40001800 	.word	0x40001800

08005dc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d101      	bne.n	8005e16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e040      	b.n	8005e98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d106      	bne.n	8005e2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7fc fa62 	bl	80022f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2224      	movs	r2, #36	; 0x24
 8005e30:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 0201 	bic.w	r2, r2, #1
 8005e40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f990 	bl	8006168 <UART_SetConfig>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d101      	bne.n	8005e52 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e022      	b.n	8005e98 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d002      	beq.n	8005e60 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 fbe6 	bl	800662c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689a      	ldr	r2, [r3, #8]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f042 0201 	orr.w	r2, r2, #1
 8005e8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 fc6d 	bl	8006770 <UART_CheckIdleState>
 8005e96:	4603      	mov	r3, r0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b08a      	sub	sp, #40	; 0x28
 8005ea4:	af02      	add	r7, sp, #8
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	603b      	str	r3, [r7, #0]
 8005eac:	4613      	mov	r3, r2
 8005eae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005eb4:	2b20      	cmp	r3, #32
 8005eb6:	f040 8081 	bne.w	8005fbc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d002      	beq.n	8005ec6 <HAL_UART_Transmit+0x26>
 8005ec0:	88fb      	ldrh	r3, [r7, #6]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e079      	b.n	8005fbe <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d101      	bne.n	8005ed8 <HAL_UART_Transmit+0x38>
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	e072      	b.n	8005fbe <HAL_UART_Transmit+0x11e>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2221      	movs	r2, #33	; 0x21
 8005eec:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005eee:	f7fc fc5f 	bl	80027b0 <HAL_GetTick>
 8005ef2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	88fa      	ldrh	r2, [r7, #6]
 8005ef8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	88fa      	ldrh	r2, [r7, #6]
 8005f00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f0c:	d108      	bne.n	8005f20 <HAL_UART_Transmit+0x80>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d104      	bne.n	8005f20 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005f16:	2300      	movs	r3, #0
 8005f18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	61bb      	str	r3, [r7, #24]
 8005f1e:	e003      	b.n	8005f28 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f24:	2300      	movs	r3, #0
 8005f26:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005f30:	e02c      	b.n	8005f8c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	2180      	movs	r1, #128	; 0x80
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f000 fc4a 	bl	80067d6 <UART_WaitOnFlagUntilTimeout>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d001      	beq.n	8005f4c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e038      	b.n	8005fbe <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10b      	bne.n	8005f6a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	881b      	ldrh	r3, [r3, #0]
 8005f56:	461a      	mov	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f60:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	3302      	adds	r3, #2
 8005f66:	61bb      	str	r3, [r7, #24]
 8005f68:	e007      	b.n	8005f7a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	781a      	ldrb	r2, [r3, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	3301      	adds	r3, #1
 8005f78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	3b01      	subs	r3, #1
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1cc      	bne.n	8005f32 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	2140      	movs	r1, #64	; 0x40
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f000 fc17 	bl	80067d6 <UART_WaitOnFlagUntilTimeout>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e005      	b.n	8005fbe <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2220      	movs	r2, #32
 8005fb6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	e000      	b.n	8005fbe <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005fbc:	2302      	movs	r3, #2
  }
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3720      	adds	r7, #32
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b08a      	sub	sp, #40	; 0x28
 8005fca:	af02      	add	r7, sp, #8
 8005fcc:	60f8      	str	r0, [r7, #12]
 8005fce:	60b9      	str	r1, [r7, #8]
 8005fd0:	603b      	str	r3, [r7, #0]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fda:	2b20      	cmp	r3, #32
 8005fdc:	f040 80be 	bne.w	800615c <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d002      	beq.n	8005fec <HAL_UART_Receive+0x26>
 8005fe6:	88fb      	ldrh	r3, [r7, #6]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e0b6      	b.n	800615e <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d101      	bne.n	8005ffe <HAL_UART_Receive+0x38>
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	e0af      	b.n	800615e <HAL_UART_Receive+0x198>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2222      	movs	r2, #34	; 0x22
 8006012:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800601a:	f7fc fbc9 	bl	80027b0 <HAL_GetTick>
 800601e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	88fa      	ldrh	r2, [r7, #6]
 8006024:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	88fa      	ldrh	r2, [r7, #6]
 800602c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006038:	d10e      	bne.n	8006058 <HAL_UART_Receive+0x92>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d105      	bne.n	800604e <HAL_UART_Receive+0x88>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006048:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800604c:	e02d      	b.n	80060aa <HAL_UART_Receive+0xe4>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	22ff      	movs	r2, #255	; 0xff
 8006052:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006056:	e028      	b.n	80060aa <HAL_UART_Receive+0xe4>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10d      	bne.n	800607c <HAL_UART_Receive+0xb6>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d104      	bne.n	8006072 <HAL_UART_Receive+0xac>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	22ff      	movs	r2, #255	; 0xff
 800606c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006070:	e01b      	b.n	80060aa <HAL_UART_Receive+0xe4>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	227f      	movs	r2, #127	; 0x7f
 8006076:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800607a:	e016      	b.n	80060aa <HAL_UART_Receive+0xe4>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006084:	d10d      	bne.n	80060a2 <HAL_UART_Receive+0xdc>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d104      	bne.n	8006098 <HAL_UART_Receive+0xd2>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	227f      	movs	r2, #127	; 0x7f
 8006092:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006096:	e008      	b.n	80060aa <HAL_UART_Receive+0xe4>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	223f      	movs	r2, #63	; 0x3f
 800609c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060a0:	e003      	b.n	80060aa <HAL_UART_Receive+0xe4>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80060b0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ba:	d108      	bne.n	80060ce <HAL_UART_Receive+0x108>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d104      	bne.n	80060ce <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80060c4:	2300      	movs	r3, #0
 80060c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	61bb      	str	r3, [r7, #24]
 80060cc:	e003      	b.n	80060d6 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060d2:	2300      	movs	r3, #0
 80060d4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80060de:	e032      	b.n	8006146 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	2200      	movs	r2, #0
 80060e8:	2120      	movs	r1, #32
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f000 fb73 	bl	80067d6 <UART_WaitOnFlagUntilTimeout>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e031      	b.n	800615e <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10c      	bne.n	800611a <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006106:	b29a      	uxth	r2, r3
 8006108:	8a7b      	ldrh	r3, [r7, #18]
 800610a:	4013      	ands	r3, r2
 800610c:	b29a      	uxth	r2, r3
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	3302      	adds	r3, #2
 8006116:	61bb      	str	r3, [r7, #24]
 8006118:	e00c      	b.n	8006134 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	b2da      	uxtb	r2, r3
 8006122:	8a7b      	ldrh	r3, [r7, #18]
 8006124:	b2db      	uxtb	r3, r3
 8006126:	4013      	ands	r3, r2
 8006128:	b2da      	uxtb	r2, r3
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	3301      	adds	r3, #1
 8006132:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800613a:	b29b      	uxth	r3, r3
 800613c:	3b01      	subs	r3, #1
 800613e:	b29a      	uxth	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800614c:	b29b      	uxth	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1c6      	bne.n	80060e0 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2220      	movs	r2, #32
 8006156:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006158:	2300      	movs	r3, #0
 800615a:	e000      	b.n	800615e <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 800615c:	2302      	movs	r3, #2
  }
}
 800615e:	4618      	mov	r0, r3
 8006160:	3720      	adds	r7, #32
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
	...

08006168 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b088      	sub	sp, #32
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006170:	2300      	movs	r3, #0
 8006172:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689a      	ldr	r2, [r3, #8]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	431a      	orrs	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	431a      	orrs	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	69db      	ldr	r3, [r3, #28]
 8006188:	4313      	orrs	r3, r2
 800618a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	4ba7      	ldr	r3, [pc, #668]	; (8006430 <UART_SetConfig+0x2c8>)
 8006194:	4013      	ands	r3, r2
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	6812      	ldr	r2, [r2, #0]
 800619a:	6979      	ldr	r1, [r7, #20]
 800619c:	430b      	orrs	r3, r1
 800619e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68da      	ldr	r2, [r3, #12]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	430a      	orrs	r2, r1
 80061b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a95      	ldr	r2, [pc, #596]	; (8006434 <UART_SetConfig+0x2cc>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d120      	bne.n	8006226 <UART_SetConfig+0xbe>
 80061e4:	4b94      	ldr	r3, [pc, #592]	; (8006438 <UART_SetConfig+0x2d0>)
 80061e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ea:	f003 0303 	and.w	r3, r3, #3
 80061ee:	2b03      	cmp	r3, #3
 80061f0:	d816      	bhi.n	8006220 <UART_SetConfig+0xb8>
 80061f2:	a201      	add	r2, pc, #4	; (adr r2, 80061f8 <UART_SetConfig+0x90>)
 80061f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f8:	08006209 	.word	0x08006209
 80061fc:	08006215 	.word	0x08006215
 8006200:	0800620f 	.word	0x0800620f
 8006204:	0800621b 	.word	0x0800621b
 8006208:	2301      	movs	r3, #1
 800620a:	77fb      	strb	r3, [r7, #31]
 800620c:	e14f      	b.n	80064ae <UART_SetConfig+0x346>
 800620e:	2302      	movs	r3, #2
 8006210:	77fb      	strb	r3, [r7, #31]
 8006212:	e14c      	b.n	80064ae <UART_SetConfig+0x346>
 8006214:	2304      	movs	r3, #4
 8006216:	77fb      	strb	r3, [r7, #31]
 8006218:	e149      	b.n	80064ae <UART_SetConfig+0x346>
 800621a:	2308      	movs	r3, #8
 800621c:	77fb      	strb	r3, [r7, #31]
 800621e:	e146      	b.n	80064ae <UART_SetConfig+0x346>
 8006220:	2310      	movs	r3, #16
 8006222:	77fb      	strb	r3, [r7, #31]
 8006224:	e143      	b.n	80064ae <UART_SetConfig+0x346>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a84      	ldr	r2, [pc, #528]	; (800643c <UART_SetConfig+0x2d4>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d132      	bne.n	8006296 <UART_SetConfig+0x12e>
 8006230:	4b81      	ldr	r3, [pc, #516]	; (8006438 <UART_SetConfig+0x2d0>)
 8006232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006236:	f003 030c 	and.w	r3, r3, #12
 800623a:	2b0c      	cmp	r3, #12
 800623c:	d828      	bhi.n	8006290 <UART_SetConfig+0x128>
 800623e:	a201      	add	r2, pc, #4	; (adr r2, 8006244 <UART_SetConfig+0xdc>)
 8006240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006244:	08006279 	.word	0x08006279
 8006248:	08006291 	.word	0x08006291
 800624c:	08006291 	.word	0x08006291
 8006250:	08006291 	.word	0x08006291
 8006254:	08006285 	.word	0x08006285
 8006258:	08006291 	.word	0x08006291
 800625c:	08006291 	.word	0x08006291
 8006260:	08006291 	.word	0x08006291
 8006264:	0800627f 	.word	0x0800627f
 8006268:	08006291 	.word	0x08006291
 800626c:	08006291 	.word	0x08006291
 8006270:	08006291 	.word	0x08006291
 8006274:	0800628b 	.word	0x0800628b
 8006278:	2300      	movs	r3, #0
 800627a:	77fb      	strb	r3, [r7, #31]
 800627c:	e117      	b.n	80064ae <UART_SetConfig+0x346>
 800627e:	2302      	movs	r3, #2
 8006280:	77fb      	strb	r3, [r7, #31]
 8006282:	e114      	b.n	80064ae <UART_SetConfig+0x346>
 8006284:	2304      	movs	r3, #4
 8006286:	77fb      	strb	r3, [r7, #31]
 8006288:	e111      	b.n	80064ae <UART_SetConfig+0x346>
 800628a:	2308      	movs	r3, #8
 800628c:	77fb      	strb	r3, [r7, #31]
 800628e:	e10e      	b.n	80064ae <UART_SetConfig+0x346>
 8006290:	2310      	movs	r3, #16
 8006292:	77fb      	strb	r3, [r7, #31]
 8006294:	e10b      	b.n	80064ae <UART_SetConfig+0x346>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a69      	ldr	r2, [pc, #420]	; (8006440 <UART_SetConfig+0x2d8>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d120      	bne.n	80062e2 <UART_SetConfig+0x17a>
 80062a0:	4b65      	ldr	r3, [pc, #404]	; (8006438 <UART_SetConfig+0x2d0>)
 80062a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80062aa:	2b30      	cmp	r3, #48	; 0x30
 80062ac:	d013      	beq.n	80062d6 <UART_SetConfig+0x16e>
 80062ae:	2b30      	cmp	r3, #48	; 0x30
 80062b0:	d814      	bhi.n	80062dc <UART_SetConfig+0x174>
 80062b2:	2b20      	cmp	r3, #32
 80062b4:	d009      	beq.n	80062ca <UART_SetConfig+0x162>
 80062b6:	2b20      	cmp	r3, #32
 80062b8:	d810      	bhi.n	80062dc <UART_SetConfig+0x174>
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d002      	beq.n	80062c4 <UART_SetConfig+0x15c>
 80062be:	2b10      	cmp	r3, #16
 80062c0:	d006      	beq.n	80062d0 <UART_SetConfig+0x168>
 80062c2:	e00b      	b.n	80062dc <UART_SetConfig+0x174>
 80062c4:	2300      	movs	r3, #0
 80062c6:	77fb      	strb	r3, [r7, #31]
 80062c8:	e0f1      	b.n	80064ae <UART_SetConfig+0x346>
 80062ca:	2302      	movs	r3, #2
 80062cc:	77fb      	strb	r3, [r7, #31]
 80062ce:	e0ee      	b.n	80064ae <UART_SetConfig+0x346>
 80062d0:	2304      	movs	r3, #4
 80062d2:	77fb      	strb	r3, [r7, #31]
 80062d4:	e0eb      	b.n	80064ae <UART_SetConfig+0x346>
 80062d6:	2308      	movs	r3, #8
 80062d8:	77fb      	strb	r3, [r7, #31]
 80062da:	e0e8      	b.n	80064ae <UART_SetConfig+0x346>
 80062dc:	2310      	movs	r3, #16
 80062de:	77fb      	strb	r3, [r7, #31]
 80062e0:	e0e5      	b.n	80064ae <UART_SetConfig+0x346>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a57      	ldr	r2, [pc, #348]	; (8006444 <UART_SetConfig+0x2dc>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d120      	bne.n	800632e <UART_SetConfig+0x1c6>
 80062ec:	4b52      	ldr	r3, [pc, #328]	; (8006438 <UART_SetConfig+0x2d0>)
 80062ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80062f6:	2bc0      	cmp	r3, #192	; 0xc0
 80062f8:	d013      	beq.n	8006322 <UART_SetConfig+0x1ba>
 80062fa:	2bc0      	cmp	r3, #192	; 0xc0
 80062fc:	d814      	bhi.n	8006328 <UART_SetConfig+0x1c0>
 80062fe:	2b80      	cmp	r3, #128	; 0x80
 8006300:	d009      	beq.n	8006316 <UART_SetConfig+0x1ae>
 8006302:	2b80      	cmp	r3, #128	; 0x80
 8006304:	d810      	bhi.n	8006328 <UART_SetConfig+0x1c0>
 8006306:	2b00      	cmp	r3, #0
 8006308:	d002      	beq.n	8006310 <UART_SetConfig+0x1a8>
 800630a:	2b40      	cmp	r3, #64	; 0x40
 800630c:	d006      	beq.n	800631c <UART_SetConfig+0x1b4>
 800630e:	e00b      	b.n	8006328 <UART_SetConfig+0x1c0>
 8006310:	2300      	movs	r3, #0
 8006312:	77fb      	strb	r3, [r7, #31]
 8006314:	e0cb      	b.n	80064ae <UART_SetConfig+0x346>
 8006316:	2302      	movs	r3, #2
 8006318:	77fb      	strb	r3, [r7, #31]
 800631a:	e0c8      	b.n	80064ae <UART_SetConfig+0x346>
 800631c:	2304      	movs	r3, #4
 800631e:	77fb      	strb	r3, [r7, #31]
 8006320:	e0c5      	b.n	80064ae <UART_SetConfig+0x346>
 8006322:	2308      	movs	r3, #8
 8006324:	77fb      	strb	r3, [r7, #31]
 8006326:	e0c2      	b.n	80064ae <UART_SetConfig+0x346>
 8006328:	2310      	movs	r3, #16
 800632a:	77fb      	strb	r3, [r7, #31]
 800632c:	e0bf      	b.n	80064ae <UART_SetConfig+0x346>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a45      	ldr	r2, [pc, #276]	; (8006448 <UART_SetConfig+0x2e0>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d125      	bne.n	8006384 <UART_SetConfig+0x21c>
 8006338:	4b3f      	ldr	r3, [pc, #252]	; (8006438 <UART_SetConfig+0x2d0>)
 800633a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800633e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006342:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006346:	d017      	beq.n	8006378 <UART_SetConfig+0x210>
 8006348:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800634c:	d817      	bhi.n	800637e <UART_SetConfig+0x216>
 800634e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006352:	d00b      	beq.n	800636c <UART_SetConfig+0x204>
 8006354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006358:	d811      	bhi.n	800637e <UART_SetConfig+0x216>
 800635a:	2b00      	cmp	r3, #0
 800635c:	d003      	beq.n	8006366 <UART_SetConfig+0x1fe>
 800635e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006362:	d006      	beq.n	8006372 <UART_SetConfig+0x20a>
 8006364:	e00b      	b.n	800637e <UART_SetConfig+0x216>
 8006366:	2300      	movs	r3, #0
 8006368:	77fb      	strb	r3, [r7, #31]
 800636a:	e0a0      	b.n	80064ae <UART_SetConfig+0x346>
 800636c:	2302      	movs	r3, #2
 800636e:	77fb      	strb	r3, [r7, #31]
 8006370:	e09d      	b.n	80064ae <UART_SetConfig+0x346>
 8006372:	2304      	movs	r3, #4
 8006374:	77fb      	strb	r3, [r7, #31]
 8006376:	e09a      	b.n	80064ae <UART_SetConfig+0x346>
 8006378:	2308      	movs	r3, #8
 800637a:	77fb      	strb	r3, [r7, #31]
 800637c:	e097      	b.n	80064ae <UART_SetConfig+0x346>
 800637e:	2310      	movs	r3, #16
 8006380:	77fb      	strb	r3, [r7, #31]
 8006382:	e094      	b.n	80064ae <UART_SetConfig+0x346>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a30      	ldr	r2, [pc, #192]	; (800644c <UART_SetConfig+0x2e4>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d125      	bne.n	80063da <UART_SetConfig+0x272>
 800638e:	4b2a      	ldr	r3, [pc, #168]	; (8006438 <UART_SetConfig+0x2d0>)
 8006390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006394:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006398:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800639c:	d017      	beq.n	80063ce <UART_SetConfig+0x266>
 800639e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063a2:	d817      	bhi.n	80063d4 <UART_SetConfig+0x26c>
 80063a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063a8:	d00b      	beq.n	80063c2 <UART_SetConfig+0x25a>
 80063aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063ae:	d811      	bhi.n	80063d4 <UART_SetConfig+0x26c>
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d003      	beq.n	80063bc <UART_SetConfig+0x254>
 80063b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063b8:	d006      	beq.n	80063c8 <UART_SetConfig+0x260>
 80063ba:	e00b      	b.n	80063d4 <UART_SetConfig+0x26c>
 80063bc:	2301      	movs	r3, #1
 80063be:	77fb      	strb	r3, [r7, #31]
 80063c0:	e075      	b.n	80064ae <UART_SetConfig+0x346>
 80063c2:	2302      	movs	r3, #2
 80063c4:	77fb      	strb	r3, [r7, #31]
 80063c6:	e072      	b.n	80064ae <UART_SetConfig+0x346>
 80063c8:	2304      	movs	r3, #4
 80063ca:	77fb      	strb	r3, [r7, #31]
 80063cc:	e06f      	b.n	80064ae <UART_SetConfig+0x346>
 80063ce:	2308      	movs	r3, #8
 80063d0:	77fb      	strb	r3, [r7, #31]
 80063d2:	e06c      	b.n	80064ae <UART_SetConfig+0x346>
 80063d4:	2310      	movs	r3, #16
 80063d6:	77fb      	strb	r3, [r7, #31]
 80063d8:	e069      	b.n	80064ae <UART_SetConfig+0x346>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a1c      	ldr	r2, [pc, #112]	; (8006450 <UART_SetConfig+0x2e8>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d137      	bne.n	8006454 <UART_SetConfig+0x2ec>
 80063e4:	4b14      	ldr	r3, [pc, #80]	; (8006438 <UART_SetConfig+0x2d0>)
 80063e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80063ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063f2:	d017      	beq.n	8006424 <UART_SetConfig+0x2bc>
 80063f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063f8:	d817      	bhi.n	800642a <UART_SetConfig+0x2c2>
 80063fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063fe:	d00b      	beq.n	8006418 <UART_SetConfig+0x2b0>
 8006400:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006404:	d811      	bhi.n	800642a <UART_SetConfig+0x2c2>
 8006406:	2b00      	cmp	r3, #0
 8006408:	d003      	beq.n	8006412 <UART_SetConfig+0x2aa>
 800640a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800640e:	d006      	beq.n	800641e <UART_SetConfig+0x2b6>
 8006410:	e00b      	b.n	800642a <UART_SetConfig+0x2c2>
 8006412:	2300      	movs	r3, #0
 8006414:	77fb      	strb	r3, [r7, #31]
 8006416:	e04a      	b.n	80064ae <UART_SetConfig+0x346>
 8006418:	2302      	movs	r3, #2
 800641a:	77fb      	strb	r3, [r7, #31]
 800641c:	e047      	b.n	80064ae <UART_SetConfig+0x346>
 800641e:	2304      	movs	r3, #4
 8006420:	77fb      	strb	r3, [r7, #31]
 8006422:	e044      	b.n	80064ae <UART_SetConfig+0x346>
 8006424:	2308      	movs	r3, #8
 8006426:	77fb      	strb	r3, [r7, #31]
 8006428:	e041      	b.n	80064ae <UART_SetConfig+0x346>
 800642a:	2310      	movs	r3, #16
 800642c:	77fb      	strb	r3, [r7, #31]
 800642e:	e03e      	b.n	80064ae <UART_SetConfig+0x346>
 8006430:	efff69f3 	.word	0xefff69f3
 8006434:	40011000 	.word	0x40011000
 8006438:	40023800 	.word	0x40023800
 800643c:	40004400 	.word	0x40004400
 8006440:	40004800 	.word	0x40004800
 8006444:	40004c00 	.word	0x40004c00
 8006448:	40005000 	.word	0x40005000
 800644c:	40011400 	.word	0x40011400
 8006450:	40007800 	.word	0x40007800
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a71      	ldr	r2, [pc, #452]	; (8006620 <UART_SetConfig+0x4b8>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d125      	bne.n	80064aa <UART_SetConfig+0x342>
 800645e:	4b71      	ldr	r3, [pc, #452]	; (8006624 <UART_SetConfig+0x4bc>)
 8006460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006464:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006468:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800646c:	d017      	beq.n	800649e <UART_SetConfig+0x336>
 800646e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006472:	d817      	bhi.n	80064a4 <UART_SetConfig+0x33c>
 8006474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006478:	d00b      	beq.n	8006492 <UART_SetConfig+0x32a>
 800647a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800647e:	d811      	bhi.n	80064a4 <UART_SetConfig+0x33c>
 8006480:	2b00      	cmp	r3, #0
 8006482:	d003      	beq.n	800648c <UART_SetConfig+0x324>
 8006484:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006488:	d006      	beq.n	8006498 <UART_SetConfig+0x330>
 800648a:	e00b      	b.n	80064a4 <UART_SetConfig+0x33c>
 800648c:	2300      	movs	r3, #0
 800648e:	77fb      	strb	r3, [r7, #31]
 8006490:	e00d      	b.n	80064ae <UART_SetConfig+0x346>
 8006492:	2302      	movs	r3, #2
 8006494:	77fb      	strb	r3, [r7, #31]
 8006496:	e00a      	b.n	80064ae <UART_SetConfig+0x346>
 8006498:	2304      	movs	r3, #4
 800649a:	77fb      	strb	r3, [r7, #31]
 800649c:	e007      	b.n	80064ae <UART_SetConfig+0x346>
 800649e:	2308      	movs	r3, #8
 80064a0:	77fb      	strb	r3, [r7, #31]
 80064a2:	e004      	b.n	80064ae <UART_SetConfig+0x346>
 80064a4:	2310      	movs	r3, #16
 80064a6:	77fb      	strb	r3, [r7, #31]
 80064a8:	e001      	b.n	80064ae <UART_SetConfig+0x346>
 80064aa:	2310      	movs	r3, #16
 80064ac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	69db      	ldr	r3, [r3, #28]
 80064b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064b6:	d15a      	bne.n	800656e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80064b8:	7ffb      	ldrb	r3, [r7, #31]
 80064ba:	2b08      	cmp	r3, #8
 80064bc:	d827      	bhi.n	800650e <UART_SetConfig+0x3a6>
 80064be:	a201      	add	r2, pc, #4	; (adr r2, 80064c4 <UART_SetConfig+0x35c>)
 80064c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c4:	080064e9 	.word	0x080064e9
 80064c8:	080064f1 	.word	0x080064f1
 80064cc:	080064f9 	.word	0x080064f9
 80064d0:	0800650f 	.word	0x0800650f
 80064d4:	080064ff 	.word	0x080064ff
 80064d8:	0800650f 	.word	0x0800650f
 80064dc:	0800650f 	.word	0x0800650f
 80064e0:	0800650f 	.word	0x0800650f
 80064e4:	08006507 	.word	0x08006507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064e8:	f7fd fa72 	bl	80039d0 <HAL_RCC_GetPCLK1Freq>
 80064ec:	61b8      	str	r0, [r7, #24]
        break;
 80064ee:	e013      	b.n	8006518 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064f0:	f7fd fa82 	bl	80039f8 <HAL_RCC_GetPCLK2Freq>
 80064f4:	61b8      	str	r0, [r7, #24]
        break;
 80064f6:	e00f      	b.n	8006518 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064f8:	4b4b      	ldr	r3, [pc, #300]	; (8006628 <UART_SetConfig+0x4c0>)
 80064fa:	61bb      	str	r3, [r7, #24]
        break;
 80064fc:	e00c      	b.n	8006518 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064fe:	f7fd f979 	bl	80037f4 <HAL_RCC_GetSysClockFreq>
 8006502:	61b8      	str	r0, [r7, #24]
        break;
 8006504:	e008      	b.n	8006518 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800650a:	61bb      	str	r3, [r7, #24]
        break;
 800650c:	e004      	b.n	8006518 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800650e:	2300      	movs	r3, #0
 8006510:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	77bb      	strb	r3, [r7, #30]
        break;
 8006516:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d074      	beq.n	8006608 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	005a      	lsls	r2, r3, #1
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	085b      	lsrs	r3, r3, #1
 8006528:	441a      	add	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006532:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	2b0f      	cmp	r3, #15
 8006538:	d916      	bls.n	8006568 <UART_SetConfig+0x400>
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006540:	d212      	bcs.n	8006568 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	b29b      	uxth	r3, r3
 8006546:	f023 030f 	bic.w	r3, r3, #15
 800654a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	085b      	lsrs	r3, r3, #1
 8006550:	b29b      	uxth	r3, r3
 8006552:	f003 0307 	and.w	r3, r3, #7
 8006556:	b29a      	uxth	r2, r3
 8006558:	89fb      	ldrh	r3, [r7, #14]
 800655a:	4313      	orrs	r3, r2
 800655c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	89fa      	ldrh	r2, [r7, #14]
 8006564:	60da      	str	r2, [r3, #12]
 8006566:	e04f      	b.n	8006608 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	77bb      	strb	r3, [r7, #30]
 800656c:	e04c      	b.n	8006608 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800656e:	7ffb      	ldrb	r3, [r7, #31]
 8006570:	2b08      	cmp	r3, #8
 8006572:	d828      	bhi.n	80065c6 <UART_SetConfig+0x45e>
 8006574:	a201      	add	r2, pc, #4	; (adr r2, 800657c <UART_SetConfig+0x414>)
 8006576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657a:	bf00      	nop
 800657c:	080065a1 	.word	0x080065a1
 8006580:	080065a9 	.word	0x080065a9
 8006584:	080065b1 	.word	0x080065b1
 8006588:	080065c7 	.word	0x080065c7
 800658c:	080065b7 	.word	0x080065b7
 8006590:	080065c7 	.word	0x080065c7
 8006594:	080065c7 	.word	0x080065c7
 8006598:	080065c7 	.word	0x080065c7
 800659c:	080065bf 	.word	0x080065bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065a0:	f7fd fa16 	bl	80039d0 <HAL_RCC_GetPCLK1Freq>
 80065a4:	61b8      	str	r0, [r7, #24]
        break;
 80065a6:	e013      	b.n	80065d0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065a8:	f7fd fa26 	bl	80039f8 <HAL_RCC_GetPCLK2Freq>
 80065ac:	61b8      	str	r0, [r7, #24]
        break;
 80065ae:	e00f      	b.n	80065d0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065b0:	4b1d      	ldr	r3, [pc, #116]	; (8006628 <UART_SetConfig+0x4c0>)
 80065b2:	61bb      	str	r3, [r7, #24]
        break;
 80065b4:	e00c      	b.n	80065d0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065b6:	f7fd f91d 	bl	80037f4 <HAL_RCC_GetSysClockFreq>
 80065ba:	61b8      	str	r0, [r7, #24]
        break;
 80065bc:	e008      	b.n	80065d0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065c2:	61bb      	str	r3, [r7, #24]
        break;
 80065c4:	e004      	b.n	80065d0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80065c6:	2300      	movs	r3, #0
 80065c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	77bb      	strb	r3, [r7, #30]
        break;
 80065ce:	bf00      	nop
    }

    if (pclk != 0U)
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d018      	beq.n	8006608 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	085a      	lsrs	r2, r3, #1
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	441a      	add	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	2b0f      	cmp	r3, #15
 80065ee:	d909      	bls.n	8006604 <UART_SetConfig+0x49c>
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065f6:	d205      	bcs.n	8006604 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	60da      	str	r2, [r3, #12]
 8006602:	e001      	b.n	8006608 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006614:	7fbb      	ldrb	r3, [r7, #30]
}
 8006616:	4618      	mov	r0, r3
 8006618:	3720      	adds	r7, #32
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	40007c00 	.word	0x40007c00
 8006624:	40023800 	.word	0x40023800
 8006628:	00f42400 	.word	0x00f42400

0800662c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00a      	beq.n	8006656 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	430a      	orrs	r2, r1
 8006654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665a:	f003 0302 	and.w	r3, r3, #2
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00a      	beq.n	8006678 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	430a      	orrs	r2, r1
 8006676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667c:	f003 0304 	and.w	r3, r3, #4
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00a      	beq.n	800669a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	430a      	orrs	r2, r1
 8006698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669e:	f003 0308 	and.w	r3, r3, #8
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00a      	beq.n	80066bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	430a      	orrs	r2, r1
 80066ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c0:	f003 0310 	and.w	r3, r3, #16
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00a      	beq.n	80066de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	430a      	orrs	r2, r1
 80066dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e2:	f003 0320 	and.w	r3, r3, #32
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00a      	beq.n	8006700 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	430a      	orrs	r2, r1
 80066fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006708:	2b00      	cmp	r3, #0
 800670a:	d01a      	beq.n	8006742 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	430a      	orrs	r2, r1
 8006720:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006726:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800672a:	d10a      	bne.n	8006742 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00a      	beq.n	8006764 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	430a      	orrs	r2, r1
 8006762:	605a      	str	r2, [r3, #4]
  }
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af02      	add	r7, sp, #8
 8006776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006780:	f7fc f816 	bl	80027b0 <HAL_GetTick>
 8006784:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0308 	and.w	r3, r3, #8
 8006790:	2b08      	cmp	r3, #8
 8006792:	d10e      	bne.n	80067b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006794:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 f817 	bl	80067d6 <UART_WaitOnFlagUntilTimeout>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d001      	beq.n	80067b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e00d      	b.n	80067ce <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2220      	movs	r2, #32
 80067b6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2220      	movs	r2, #32
 80067bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b09c      	sub	sp, #112	; 0x70
 80067da:	af00      	add	r7, sp, #0
 80067dc:	60f8      	str	r0, [r7, #12]
 80067de:	60b9      	str	r1, [r7, #8]
 80067e0:	603b      	str	r3, [r7, #0]
 80067e2:	4613      	mov	r3, r2
 80067e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067e6:	e0a5      	b.n	8006934 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ee:	f000 80a1 	beq.w	8006934 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067f2:	f7fb ffdd 	bl	80027b0 <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80067fe:	429a      	cmp	r2, r3
 8006800:	d302      	bcc.n	8006808 <UART_WaitOnFlagUntilTimeout+0x32>
 8006802:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006804:	2b00      	cmp	r3, #0
 8006806:	d13e      	bne.n	8006886 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006810:	e853 3f00 	ldrex	r3, [r3]
 8006814:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006818:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800681c:	667b      	str	r3, [r7, #100]	; 0x64
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	461a      	mov	r2, r3
 8006824:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006826:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006828:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800682c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800682e:	e841 2300 	strex	r3, r2, [r1]
 8006832:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1e6      	bne.n	8006808 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	3308      	adds	r3, #8
 8006840:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006844:	e853 3f00 	ldrex	r3, [r3]
 8006848:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800684a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684c:	f023 0301 	bic.w	r3, r3, #1
 8006850:	663b      	str	r3, [r7, #96]	; 0x60
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	3308      	adds	r3, #8
 8006858:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800685a:	64ba      	str	r2, [r7, #72]	; 0x48
 800685c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006860:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006862:	e841 2300 	strex	r3, r2, [r1]
 8006866:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1e5      	bne.n	800683a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2220      	movs	r2, #32
 8006872:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2220      	movs	r2, #32
 8006878:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e067      	b.n	8006956 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0304 	and.w	r3, r3, #4
 8006890:	2b00      	cmp	r3, #0
 8006892:	d04f      	beq.n	8006934 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	69db      	ldr	r3, [r3, #28]
 800689a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800689e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068a2:	d147      	bne.n	8006934 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b6:	e853 3f00 	ldrex	r3, [r3]
 80068ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	461a      	mov	r2, r3
 80068ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068cc:	637b      	str	r3, [r7, #52]	; 0x34
 80068ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068d4:	e841 2300 	strex	r3, r2, [r1]
 80068d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80068da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1e6      	bne.n	80068ae <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3308      	adds	r3, #8
 80068e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	e853 3f00 	ldrex	r3, [r3]
 80068ee:	613b      	str	r3, [r7, #16]
   return(result);
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	f023 0301 	bic.w	r3, r3, #1
 80068f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	3308      	adds	r3, #8
 80068fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006900:	623a      	str	r2, [r7, #32]
 8006902:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006904:	69f9      	ldr	r1, [r7, #28]
 8006906:	6a3a      	ldr	r2, [r7, #32]
 8006908:	e841 2300 	strex	r3, r2, [r1]
 800690c:	61bb      	str	r3, [r7, #24]
   return(result);
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d1e5      	bne.n	80068e0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2220      	movs	r2, #32
 8006918:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2220      	movs	r2, #32
 800691e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2220      	movs	r2, #32
 8006924:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e010      	b.n	8006956 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	69da      	ldr	r2, [r3, #28]
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	4013      	ands	r3, r2
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	429a      	cmp	r2, r3
 8006942:	bf0c      	ite	eq
 8006944:	2301      	moveq	r3, #1
 8006946:	2300      	movne	r3, #0
 8006948:	b2db      	uxtb	r3, r3
 800694a:	461a      	mov	r2, r3
 800694c:	79fb      	ldrb	r3, [r7, #7]
 800694e:	429a      	cmp	r2, r3
 8006950:	f43f af4a 	beq.w	80067e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3770      	adds	r7, #112	; 0x70
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
	...

08006960 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006960:	b084      	sub	sp, #16
 8006962:	b580      	push	{r7, lr}
 8006964:	b084      	sub	sp, #16
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
 800696a:	f107 001c 	add.w	r0, r7, #28
 800696e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006974:	2b01      	cmp	r3, #1
 8006976:	d120      	bne.n	80069ba <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68da      	ldr	r2, [r3, #12]
 8006988:	4b20      	ldr	r3, [pc, #128]	; (8006a0c <USB_CoreInit+0xac>)
 800698a:	4013      	ands	r3, r2
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800699c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d105      	bne.n	80069ae <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fa92 	bl	8006ed8 <USB_CoreReset>
 80069b4:	4603      	mov	r3, r0
 80069b6:	73fb      	strb	r3, [r7, #15]
 80069b8:	e010      	b.n	80069dc <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fa86 	bl	8006ed8 <USB_CoreReset>
 80069cc:	4603      	mov	r3, r0
 80069ce:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80069dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d10b      	bne.n	80069fa <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f043 0206 	orr.w	r2, r3, #6
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f043 0220 	orr.w	r2, r3, #32
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80069fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3710      	adds	r7, #16
 8006a00:	46bd      	mov	sp, r7
 8006a02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a06:	b004      	add	sp, #16
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	ffbdffbf 	.word	0xffbdffbf

08006a10 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f023 0201 	bic.w	r2, r3, #1
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b084      	sub	sp, #16
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a4e:	78fb      	ldrb	r3, [r7, #3]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d115      	bne.n	8006a80 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a60:	2001      	movs	r0, #1
 8006a62:	f7fb feb1 	bl	80027c8 <HAL_Delay>
      ms++;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fa25 	bl	8006ebc <USB_GetMode>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d01e      	beq.n	8006ab6 <USB_SetCurrentMode+0x84>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2b31      	cmp	r3, #49	; 0x31
 8006a7c:	d9f0      	bls.n	8006a60 <USB_SetCurrentMode+0x2e>
 8006a7e:	e01a      	b.n	8006ab6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a80:	78fb      	ldrb	r3, [r7, #3]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d115      	bne.n	8006ab2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a92:	2001      	movs	r0, #1
 8006a94:	f7fb fe98 	bl	80027c8 <HAL_Delay>
      ms++;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fa0c 	bl	8006ebc <USB_GetMode>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d005      	beq.n	8006ab6 <USB_SetCurrentMode+0x84>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2b31      	cmp	r3, #49	; 0x31
 8006aae:	d9f0      	bls.n	8006a92 <USB_SetCurrentMode+0x60>
 8006ab0:	e001      	b.n	8006ab6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e005      	b.n	8006ac2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2b32      	cmp	r3, #50	; 0x32
 8006aba:	d101      	bne.n	8006ac0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e000      	b.n	8006ac2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
	...

08006acc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006acc:	b084      	sub	sp, #16
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b086      	sub	sp, #24
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
 8006ad6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006ada:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	613b      	str	r3, [r7, #16]
 8006aea:	e009      	b.n	8006b00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	3340      	adds	r3, #64	; 0x40
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	2200      	movs	r2, #0
 8006af8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	3301      	adds	r3, #1
 8006afe:	613b      	str	r3, [r7, #16]
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	2b0e      	cmp	r3, #14
 8006b04:	d9f2      	bls.n	8006aec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d11c      	bne.n	8006b46 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b1a:	f043 0302 	orr.w	r3, r3, #2
 8006b1e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b24:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	601a      	str	r2, [r3, #0]
 8006b44:	e005      	b.n	8006b52 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b58:	461a      	mov	r2, r3
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b64:	4619      	mov	r1, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	680b      	ldr	r3, [r1, #0]
 8006b70:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d10c      	bne.n	8006b92 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d104      	bne.n	8006b88 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006b7e:	2100      	movs	r1, #0
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 f961 	bl	8006e48 <USB_SetDevSpeed>
 8006b86:	e008      	b.n	8006b9a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006b88:	2101      	movs	r1, #1
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f95c 	bl	8006e48 <USB_SetDevSpeed>
 8006b90:	e003      	b.n	8006b9a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006b92:	2103      	movs	r1, #3
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 f957 	bl	8006e48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b9a:	2110      	movs	r1, #16
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f8f3 	bl	8006d88 <USB_FlushTxFifo>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d001      	beq.n	8006bac <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f91d 	bl	8006dec <USB_FlushRxFifo>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d001      	beq.n	8006bbc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bce:	461a      	mov	r2, r3
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bda:	461a      	mov	r2, r3
 8006bdc:	2300      	movs	r3, #0
 8006bde:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006be0:	2300      	movs	r3, #0
 8006be2:	613b      	str	r3, [r7, #16]
 8006be4:	e043      	b.n	8006c6e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	015a      	lsls	r2, r3, #5
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	4413      	add	r3, r2
 8006bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bfc:	d118      	bne.n	8006c30 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10a      	bne.n	8006c1a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	015a      	lsls	r2, r3, #5
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c10:	461a      	mov	r2, r3
 8006c12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c16:	6013      	str	r3, [r2, #0]
 8006c18:	e013      	b.n	8006c42 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	015a      	lsls	r2, r3, #5
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	4413      	add	r3, r2
 8006c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c26:	461a      	mov	r2, r3
 8006c28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c2c:	6013      	str	r3, [r2, #0]
 8006c2e:	e008      	b.n	8006c42 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	015a      	lsls	r2, r3, #5
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	4413      	add	r3, r2
 8006c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	2300      	movs	r3, #0
 8006c40:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	015a      	lsls	r2, r3, #5
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	4413      	add	r3, r2
 8006c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c4e:	461a      	mov	r2, r3
 8006c50:	2300      	movs	r3, #0
 8006c52:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	015a      	lsls	r2, r3, #5
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c60:	461a      	mov	r2, r3
 8006c62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	613b      	str	r3, [r7, #16]
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d3b7      	bcc.n	8006be6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c76:	2300      	movs	r3, #0
 8006c78:	613b      	str	r3, [r7, #16]
 8006c7a:	e043      	b.n	8006d04 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	015a      	lsls	r2, r3, #5
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4413      	add	r3, r2
 8006c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c92:	d118      	bne.n	8006cc6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10a      	bne.n	8006cb0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	015a      	lsls	r2, r3, #5
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006cac:	6013      	str	r3, [r2, #0]
 8006cae:	e013      	b.n	8006cd8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006cc2:	6013      	str	r3, [r2, #0]
 8006cc4:	e008      	b.n	8006cd8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	015a      	lsls	r2, r3, #5
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	4413      	add	r3, r2
 8006cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006cfc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	3301      	adds	r3, #1
 8006d02:	613b      	str	r3, [r7, #16]
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d3b7      	bcc.n	8006c7c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d1e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006d2c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d105      	bne.n	8006d40 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	f043 0210 	orr.w	r2, r3, #16
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	699a      	ldr	r2, [r3, #24]
 8006d44:	4b0e      	ldr	r3, [pc, #56]	; (8006d80 <USB_DevInit+0x2b4>)
 8006d46:	4313      	orrs	r3, r2
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d005      	beq.n	8006d5e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	f043 0208 	orr.w	r2, r3, #8
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d105      	bne.n	8006d70 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	699a      	ldr	r2, [r3, #24]
 8006d68:	4b06      	ldr	r3, [pc, #24]	; (8006d84 <USB_DevInit+0x2b8>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3718      	adds	r7, #24
 8006d76:	46bd      	mov	sp, r7
 8006d78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d7c:	b004      	add	sp, #16
 8006d7e:	4770      	bx	lr
 8006d80:	803c3800 	.word	0x803c3800
 8006d84:	40000004 	.word	0x40000004

08006d88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d92:	2300      	movs	r3, #0
 8006d94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	60fb      	str	r3, [r7, #12]
 8006d9c:	4a12      	ldr	r2, [pc, #72]	; (8006de8 <USB_FlushTxFifo+0x60>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d901      	bls.n	8006da6 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e01a      	b.n	8006ddc <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	daf3      	bge.n	8006d96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006dae:	2300      	movs	r3, #0
 8006db0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	019b      	lsls	r3, r3, #6
 8006db6:	f043 0220 	orr.w	r2, r3, #32
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	60fb      	str	r3, [r7, #12]
 8006dc4:	4a08      	ldr	r2, [pc, #32]	; (8006de8 <USB_FlushTxFifo+0x60>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d901      	bls.n	8006dce <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e006      	b.n	8006ddc <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	f003 0320 	and.w	r3, r3, #32
 8006dd6:	2b20      	cmp	r3, #32
 8006dd8:	d0f1      	beq.n	8006dbe <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3714      	adds	r7, #20
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr
 8006de8:	00030d40 	.word	0x00030d40

08006dec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b085      	sub	sp, #20
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006df4:	2300      	movs	r3, #0
 8006df6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	60fb      	str	r3, [r7, #12]
 8006dfe:	4a11      	ldr	r2, [pc, #68]	; (8006e44 <USB_FlushRxFifo+0x58>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d901      	bls.n	8006e08 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e017      	b.n	8006e38 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	daf3      	bge.n	8006df8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006e10:	2300      	movs	r3, #0
 8006e12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2210      	movs	r2, #16
 8006e18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	60fb      	str	r3, [r7, #12]
 8006e20:	4a08      	ldr	r2, [pc, #32]	; (8006e44 <USB_FlushRxFifo+0x58>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d901      	bls.n	8006e2a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8006e26:	2303      	movs	r3, #3
 8006e28:	e006      	b.n	8006e38 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	f003 0310 	and.w	r3, r3, #16
 8006e32:	2b10      	cmp	r3, #16
 8006e34:	d0f1      	beq.n	8006e1a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3714      	adds	r7, #20
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr
 8006e44:	00030d40 	.word	0x00030d40

08006e48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	460b      	mov	r3, r1
 8006e52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	78fb      	ldrb	r3, [r7, #3]
 8006e62:	68f9      	ldr	r1, [r7, #12]
 8006e64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	b085      	sub	sp, #20
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006e94:	f023 0303 	bic.w	r3, r3, #3
 8006e98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ea8:	f043 0302 	orr.w	r3, r3, #2
 8006eac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3714      	adds	r7, #20
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	695b      	ldr	r3, [r3, #20]
 8006ec8:	f003 0301 	and.w	r3, r3, #1
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	60fb      	str	r3, [r7, #12]
 8006eea:	4a13      	ldr	r2, [pc, #76]	; (8006f38 <USB_CoreReset+0x60>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d901      	bls.n	8006ef4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	e01a      	b.n	8006f2a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	daf3      	bge.n	8006ee4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006efc:	2300      	movs	r3, #0
 8006efe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	f043 0201 	orr.w	r2, r3, #1
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	60fb      	str	r3, [r7, #12]
 8006f12:	4a09      	ldr	r2, [pc, #36]	; (8006f38 <USB_CoreReset+0x60>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d901      	bls.n	8006f1c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e006      	b.n	8006f2a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	f003 0301 	and.w	r3, r3, #1
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d0f1      	beq.n	8006f0c <USB_CoreReset+0x34>

  return HAL_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3714      	adds	r7, #20
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	00030d40 	.word	0x00030d40

08006f3c <__errno>:
 8006f3c:	4b01      	ldr	r3, [pc, #4]	; (8006f44 <__errno+0x8>)
 8006f3e:	6818      	ldr	r0, [r3, #0]
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	20000010 	.word	0x20000010

08006f48 <__libc_init_array>:
 8006f48:	b570      	push	{r4, r5, r6, lr}
 8006f4a:	4d0d      	ldr	r5, [pc, #52]	; (8006f80 <__libc_init_array+0x38>)
 8006f4c:	4c0d      	ldr	r4, [pc, #52]	; (8006f84 <__libc_init_array+0x3c>)
 8006f4e:	1b64      	subs	r4, r4, r5
 8006f50:	10a4      	asrs	r4, r4, #2
 8006f52:	2600      	movs	r6, #0
 8006f54:	42a6      	cmp	r6, r4
 8006f56:	d109      	bne.n	8006f6c <__libc_init_array+0x24>
 8006f58:	4d0b      	ldr	r5, [pc, #44]	; (8006f88 <__libc_init_array+0x40>)
 8006f5a:	4c0c      	ldr	r4, [pc, #48]	; (8006f8c <__libc_init_array+0x44>)
 8006f5c:	f002 feca 	bl	8009cf4 <_init>
 8006f60:	1b64      	subs	r4, r4, r5
 8006f62:	10a4      	asrs	r4, r4, #2
 8006f64:	2600      	movs	r6, #0
 8006f66:	42a6      	cmp	r6, r4
 8006f68:	d105      	bne.n	8006f76 <__libc_init_array+0x2e>
 8006f6a:	bd70      	pop	{r4, r5, r6, pc}
 8006f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f70:	4798      	blx	r3
 8006f72:	3601      	adds	r6, #1
 8006f74:	e7ee      	b.n	8006f54 <__libc_init_array+0xc>
 8006f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f7a:	4798      	blx	r3
 8006f7c:	3601      	adds	r6, #1
 8006f7e:	e7f2      	b.n	8006f66 <__libc_init_array+0x1e>
 8006f80:	0800a15c 	.word	0x0800a15c
 8006f84:	0800a15c 	.word	0x0800a15c
 8006f88:	0800a15c 	.word	0x0800a15c
 8006f8c:	0800a160 	.word	0x0800a160

08006f90 <memset>:
 8006f90:	4402      	add	r2, r0
 8006f92:	4603      	mov	r3, r0
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d100      	bne.n	8006f9a <memset+0xa>
 8006f98:	4770      	bx	lr
 8006f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f9e:	e7f9      	b.n	8006f94 <memset+0x4>

08006fa0 <__cvt>:
 8006fa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa4:	ec55 4b10 	vmov	r4, r5, d0
 8006fa8:	2d00      	cmp	r5, #0
 8006faa:	460e      	mov	r6, r1
 8006fac:	4619      	mov	r1, r3
 8006fae:	462b      	mov	r3, r5
 8006fb0:	bfbb      	ittet	lt
 8006fb2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006fb6:	461d      	movlt	r5, r3
 8006fb8:	2300      	movge	r3, #0
 8006fba:	232d      	movlt	r3, #45	; 0x2d
 8006fbc:	700b      	strb	r3, [r1, #0]
 8006fbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fc0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006fc4:	4691      	mov	r9, r2
 8006fc6:	f023 0820 	bic.w	r8, r3, #32
 8006fca:	bfbc      	itt	lt
 8006fcc:	4622      	movlt	r2, r4
 8006fce:	4614      	movlt	r4, r2
 8006fd0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006fd4:	d005      	beq.n	8006fe2 <__cvt+0x42>
 8006fd6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006fda:	d100      	bne.n	8006fde <__cvt+0x3e>
 8006fdc:	3601      	adds	r6, #1
 8006fde:	2102      	movs	r1, #2
 8006fe0:	e000      	b.n	8006fe4 <__cvt+0x44>
 8006fe2:	2103      	movs	r1, #3
 8006fe4:	ab03      	add	r3, sp, #12
 8006fe6:	9301      	str	r3, [sp, #4]
 8006fe8:	ab02      	add	r3, sp, #8
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	ec45 4b10 	vmov	d0, r4, r5
 8006ff0:	4653      	mov	r3, sl
 8006ff2:	4632      	mov	r2, r6
 8006ff4:	f000 fd00 	bl	80079f8 <_dtoa_r>
 8006ff8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006ffc:	4607      	mov	r7, r0
 8006ffe:	d102      	bne.n	8007006 <__cvt+0x66>
 8007000:	f019 0f01 	tst.w	r9, #1
 8007004:	d022      	beq.n	800704c <__cvt+0xac>
 8007006:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800700a:	eb07 0906 	add.w	r9, r7, r6
 800700e:	d110      	bne.n	8007032 <__cvt+0x92>
 8007010:	783b      	ldrb	r3, [r7, #0]
 8007012:	2b30      	cmp	r3, #48	; 0x30
 8007014:	d10a      	bne.n	800702c <__cvt+0x8c>
 8007016:	2200      	movs	r2, #0
 8007018:	2300      	movs	r3, #0
 800701a:	4620      	mov	r0, r4
 800701c:	4629      	mov	r1, r5
 800701e:	f7f9 fd73 	bl	8000b08 <__aeabi_dcmpeq>
 8007022:	b918      	cbnz	r0, 800702c <__cvt+0x8c>
 8007024:	f1c6 0601 	rsb	r6, r6, #1
 8007028:	f8ca 6000 	str.w	r6, [sl]
 800702c:	f8da 3000 	ldr.w	r3, [sl]
 8007030:	4499      	add	r9, r3
 8007032:	2200      	movs	r2, #0
 8007034:	2300      	movs	r3, #0
 8007036:	4620      	mov	r0, r4
 8007038:	4629      	mov	r1, r5
 800703a:	f7f9 fd65 	bl	8000b08 <__aeabi_dcmpeq>
 800703e:	b108      	cbz	r0, 8007044 <__cvt+0xa4>
 8007040:	f8cd 900c 	str.w	r9, [sp, #12]
 8007044:	2230      	movs	r2, #48	; 0x30
 8007046:	9b03      	ldr	r3, [sp, #12]
 8007048:	454b      	cmp	r3, r9
 800704a:	d307      	bcc.n	800705c <__cvt+0xbc>
 800704c:	9b03      	ldr	r3, [sp, #12]
 800704e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007050:	1bdb      	subs	r3, r3, r7
 8007052:	4638      	mov	r0, r7
 8007054:	6013      	str	r3, [r2, #0]
 8007056:	b004      	add	sp, #16
 8007058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800705c:	1c59      	adds	r1, r3, #1
 800705e:	9103      	str	r1, [sp, #12]
 8007060:	701a      	strb	r2, [r3, #0]
 8007062:	e7f0      	b.n	8007046 <__cvt+0xa6>

08007064 <__exponent>:
 8007064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007066:	4603      	mov	r3, r0
 8007068:	2900      	cmp	r1, #0
 800706a:	bfb8      	it	lt
 800706c:	4249      	neglt	r1, r1
 800706e:	f803 2b02 	strb.w	r2, [r3], #2
 8007072:	bfb4      	ite	lt
 8007074:	222d      	movlt	r2, #45	; 0x2d
 8007076:	222b      	movge	r2, #43	; 0x2b
 8007078:	2909      	cmp	r1, #9
 800707a:	7042      	strb	r2, [r0, #1]
 800707c:	dd2a      	ble.n	80070d4 <__exponent+0x70>
 800707e:	f10d 0407 	add.w	r4, sp, #7
 8007082:	46a4      	mov	ip, r4
 8007084:	270a      	movs	r7, #10
 8007086:	46a6      	mov	lr, r4
 8007088:	460a      	mov	r2, r1
 800708a:	fb91 f6f7 	sdiv	r6, r1, r7
 800708e:	fb07 1516 	mls	r5, r7, r6, r1
 8007092:	3530      	adds	r5, #48	; 0x30
 8007094:	2a63      	cmp	r2, #99	; 0x63
 8007096:	f104 34ff 	add.w	r4, r4, #4294967295
 800709a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800709e:	4631      	mov	r1, r6
 80070a0:	dcf1      	bgt.n	8007086 <__exponent+0x22>
 80070a2:	3130      	adds	r1, #48	; 0x30
 80070a4:	f1ae 0502 	sub.w	r5, lr, #2
 80070a8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80070ac:	1c44      	adds	r4, r0, #1
 80070ae:	4629      	mov	r1, r5
 80070b0:	4561      	cmp	r1, ip
 80070b2:	d30a      	bcc.n	80070ca <__exponent+0x66>
 80070b4:	f10d 0209 	add.w	r2, sp, #9
 80070b8:	eba2 020e 	sub.w	r2, r2, lr
 80070bc:	4565      	cmp	r5, ip
 80070be:	bf88      	it	hi
 80070c0:	2200      	movhi	r2, #0
 80070c2:	4413      	add	r3, r2
 80070c4:	1a18      	subs	r0, r3, r0
 80070c6:	b003      	add	sp, #12
 80070c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070ce:	f804 2f01 	strb.w	r2, [r4, #1]!
 80070d2:	e7ed      	b.n	80070b0 <__exponent+0x4c>
 80070d4:	2330      	movs	r3, #48	; 0x30
 80070d6:	3130      	adds	r1, #48	; 0x30
 80070d8:	7083      	strb	r3, [r0, #2]
 80070da:	70c1      	strb	r1, [r0, #3]
 80070dc:	1d03      	adds	r3, r0, #4
 80070de:	e7f1      	b.n	80070c4 <__exponent+0x60>

080070e0 <_printf_float>:
 80070e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e4:	ed2d 8b02 	vpush	{d8}
 80070e8:	b08d      	sub	sp, #52	; 0x34
 80070ea:	460c      	mov	r4, r1
 80070ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80070f0:	4616      	mov	r6, r2
 80070f2:	461f      	mov	r7, r3
 80070f4:	4605      	mov	r5, r0
 80070f6:	f001 fa6b 	bl	80085d0 <_localeconv_r>
 80070fa:	f8d0 a000 	ldr.w	sl, [r0]
 80070fe:	4650      	mov	r0, sl
 8007100:	f7f9 f886 	bl	8000210 <strlen>
 8007104:	2300      	movs	r3, #0
 8007106:	930a      	str	r3, [sp, #40]	; 0x28
 8007108:	6823      	ldr	r3, [r4, #0]
 800710a:	9305      	str	r3, [sp, #20]
 800710c:	f8d8 3000 	ldr.w	r3, [r8]
 8007110:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007114:	3307      	adds	r3, #7
 8007116:	f023 0307 	bic.w	r3, r3, #7
 800711a:	f103 0208 	add.w	r2, r3, #8
 800711e:	f8c8 2000 	str.w	r2, [r8]
 8007122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007126:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800712a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800712e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007132:	9307      	str	r3, [sp, #28]
 8007134:	f8cd 8018 	str.w	r8, [sp, #24]
 8007138:	ee08 0a10 	vmov	s16, r0
 800713c:	4b9f      	ldr	r3, [pc, #636]	; (80073bc <_printf_float+0x2dc>)
 800713e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007142:	f04f 32ff 	mov.w	r2, #4294967295
 8007146:	f7f9 fd11 	bl	8000b6c <__aeabi_dcmpun>
 800714a:	bb88      	cbnz	r0, 80071b0 <_printf_float+0xd0>
 800714c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007150:	4b9a      	ldr	r3, [pc, #616]	; (80073bc <_printf_float+0x2dc>)
 8007152:	f04f 32ff 	mov.w	r2, #4294967295
 8007156:	f7f9 fceb 	bl	8000b30 <__aeabi_dcmple>
 800715a:	bb48      	cbnz	r0, 80071b0 <_printf_float+0xd0>
 800715c:	2200      	movs	r2, #0
 800715e:	2300      	movs	r3, #0
 8007160:	4640      	mov	r0, r8
 8007162:	4649      	mov	r1, r9
 8007164:	f7f9 fcda 	bl	8000b1c <__aeabi_dcmplt>
 8007168:	b110      	cbz	r0, 8007170 <_printf_float+0x90>
 800716a:	232d      	movs	r3, #45	; 0x2d
 800716c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007170:	4b93      	ldr	r3, [pc, #588]	; (80073c0 <_printf_float+0x2e0>)
 8007172:	4894      	ldr	r0, [pc, #592]	; (80073c4 <_printf_float+0x2e4>)
 8007174:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007178:	bf94      	ite	ls
 800717a:	4698      	movls	r8, r3
 800717c:	4680      	movhi	r8, r0
 800717e:	2303      	movs	r3, #3
 8007180:	6123      	str	r3, [r4, #16]
 8007182:	9b05      	ldr	r3, [sp, #20]
 8007184:	f023 0204 	bic.w	r2, r3, #4
 8007188:	6022      	str	r2, [r4, #0]
 800718a:	f04f 0900 	mov.w	r9, #0
 800718e:	9700      	str	r7, [sp, #0]
 8007190:	4633      	mov	r3, r6
 8007192:	aa0b      	add	r2, sp, #44	; 0x2c
 8007194:	4621      	mov	r1, r4
 8007196:	4628      	mov	r0, r5
 8007198:	f000 f9d8 	bl	800754c <_printf_common>
 800719c:	3001      	adds	r0, #1
 800719e:	f040 8090 	bne.w	80072c2 <_printf_float+0x1e2>
 80071a2:	f04f 30ff 	mov.w	r0, #4294967295
 80071a6:	b00d      	add	sp, #52	; 0x34
 80071a8:	ecbd 8b02 	vpop	{d8}
 80071ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071b0:	4642      	mov	r2, r8
 80071b2:	464b      	mov	r3, r9
 80071b4:	4640      	mov	r0, r8
 80071b6:	4649      	mov	r1, r9
 80071b8:	f7f9 fcd8 	bl	8000b6c <__aeabi_dcmpun>
 80071bc:	b140      	cbz	r0, 80071d0 <_printf_float+0xf0>
 80071be:	464b      	mov	r3, r9
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	bfbc      	itt	lt
 80071c4:	232d      	movlt	r3, #45	; 0x2d
 80071c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80071ca:	487f      	ldr	r0, [pc, #508]	; (80073c8 <_printf_float+0x2e8>)
 80071cc:	4b7f      	ldr	r3, [pc, #508]	; (80073cc <_printf_float+0x2ec>)
 80071ce:	e7d1      	b.n	8007174 <_printf_float+0x94>
 80071d0:	6863      	ldr	r3, [r4, #4]
 80071d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80071d6:	9206      	str	r2, [sp, #24]
 80071d8:	1c5a      	adds	r2, r3, #1
 80071da:	d13f      	bne.n	800725c <_printf_float+0x17c>
 80071dc:	2306      	movs	r3, #6
 80071de:	6063      	str	r3, [r4, #4]
 80071e0:	9b05      	ldr	r3, [sp, #20]
 80071e2:	6861      	ldr	r1, [r4, #4]
 80071e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80071e8:	2300      	movs	r3, #0
 80071ea:	9303      	str	r3, [sp, #12]
 80071ec:	ab0a      	add	r3, sp, #40	; 0x28
 80071ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 80071f2:	ab09      	add	r3, sp, #36	; 0x24
 80071f4:	ec49 8b10 	vmov	d0, r8, r9
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	6022      	str	r2, [r4, #0]
 80071fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007200:	4628      	mov	r0, r5
 8007202:	f7ff fecd 	bl	8006fa0 <__cvt>
 8007206:	9b06      	ldr	r3, [sp, #24]
 8007208:	9909      	ldr	r1, [sp, #36]	; 0x24
 800720a:	2b47      	cmp	r3, #71	; 0x47
 800720c:	4680      	mov	r8, r0
 800720e:	d108      	bne.n	8007222 <_printf_float+0x142>
 8007210:	1cc8      	adds	r0, r1, #3
 8007212:	db02      	blt.n	800721a <_printf_float+0x13a>
 8007214:	6863      	ldr	r3, [r4, #4]
 8007216:	4299      	cmp	r1, r3
 8007218:	dd41      	ble.n	800729e <_printf_float+0x1be>
 800721a:	f1ab 0b02 	sub.w	fp, fp, #2
 800721e:	fa5f fb8b 	uxtb.w	fp, fp
 8007222:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007226:	d820      	bhi.n	800726a <_printf_float+0x18a>
 8007228:	3901      	subs	r1, #1
 800722a:	465a      	mov	r2, fp
 800722c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007230:	9109      	str	r1, [sp, #36]	; 0x24
 8007232:	f7ff ff17 	bl	8007064 <__exponent>
 8007236:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007238:	1813      	adds	r3, r2, r0
 800723a:	2a01      	cmp	r2, #1
 800723c:	4681      	mov	r9, r0
 800723e:	6123      	str	r3, [r4, #16]
 8007240:	dc02      	bgt.n	8007248 <_printf_float+0x168>
 8007242:	6822      	ldr	r2, [r4, #0]
 8007244:	07d2      	lsls	r2, r2, #31
 8007246:	d501      	bpl.n	800724c <_printf_float+0x16c>
 8007248:	3301      	adds	r3, #1
 800724a:	6123      	str	r3, [r4, #16]
 800724c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007250:	2b00      	cmp	r3, #0
 8007252:	d09c      	beq.n	800718e <_printf_float+0xae>
 8007254:	232d      	movs	r3, #45	; 0x2d
 8007256:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800725a:	e798      	b.n	800718e <_printf_float+0xae>
 800725c:	9a06      	ldr	r2, [sp, #24]
 800725e:	2a47      	cmp	r2, #71	; 0x47
 8007260:	d1be      	bne.n	80071e0 <_printf_float+0x100>
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1bc      	bne.n	80071e0 <_printf_float+0x100>
 8007266:	2301      	movs	r3, #1
 8007268:	e7b9      	b.n	80071de <_printf_float+0xfe>
 800726a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800726e:	d118      	bne.n	80072a2 <_printf_float+0x1c2>
 8007270:	2900      	cmp	r1, #0
 8007272:	6863      	ldr	r3, [r4, #4]
 8007274:	dd0b      	ble.n	800728e <_printf_float+0x1ae>
 8007276:	6121      	str	r1, [r4, #16]
 8007278:	b913      	cbnz	r3, 8007280 <_printf_float+0x1a0>
 800727a:	6822      	ldr	r2, [r4, #0]
 800727c:	07d0      	lsls	r0, r2, #31
 800727e:	d502      	bpl.n	8007286 <_printf_float+0x1a6>
 8007280:	3301      	adds	r3, #1
 8007282:	440b      	add	r3, r1
 8007284:	6123      	str	r3, [r4, #16]
 8007286:	65a1      	str	r1, [r4, #88]	; 0x58
 8007288:	f04f 0900 	mov.w	r9, #0
 800728c:	e7de      	b.n	800724c <_printf_float+0x16c>
 800728e:	b913      	cbnz	r3, 8007296 <_printf_float+0x1b6>
 8007290:	6822      	ldr	r2, [r4, #0]
 8007292:	07d2      	lsls	r2, r2, #31
 8007294:	d501      	bpl.n	800729a <_printf_float+0x1ba>
 8007296:	3302      	adds	r3, #2
 8007298:	e7f4      	b.n	8007284 <_printf_float+0x1a4>
 800729a:	2301      	movs	r3, #1
 800729c:	e7f2      	b.n	8007284 <_printf_float+0x1a4>
 800729e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80072a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072a4:	4299      	cmp	r1, r3
 80072a6:	db05      	blt.n	80072b4 <_printf_float+0x1d4>
 80072a8:	6823      	ldr	r3, [r4, #0]
 80072aa:	6121      	str	r1, [r4, #16]
 80072ac:	07d8      	lsls	r0, r3, #31
 80072ae:	d5ea      	bpl.n	8007286 <_printf_float+0x1a6>
 80072b0:	1c4b      	adds	r3, r1, #1
 80072b2:	e7e7      	b.n	8007284 <_printf_float+0x1a4>
 80072b4:	2900      	cmp	r1, #0
 80072b6:	bfd4      	ite	le
 80072b8:	f1c1 0202 	rsble	r2, r1, #2
 80072bc:	2201      	movgt	r2, #1
 80072be:	4413      	add	r3, r2
 80072c0:	e7e0      	b.n	8007284 <_printf_float+0x1a4>
 80072c2:	6823      	ldr	r3, [r4, #0]
 80072c4:	055a      	lsls	r2, r3, #21
 80072c6:	d407      	bmi.n	80072d8 <_printf_float+0x1f8>
 80072c8:	6923      	ldr	r3, [r4, #16]
 80072ca:	4642      	mov	r2, r8
 80072cc:	4631      	mov	r1, r6
 80072ce:	4628      	mov	r0, r5
 80072d0:	47b8      	blx	r7
 80072d2:	3001      	adds	r0, #1
 80072d4:	d12c      	bne.n	8007330 <_printf_float+0x250>
 80072d6:	e764      	b.n	80071a2 <_printf_float+0xc2>
 80072d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80072dc:	f240 80e0 	bls.w	80074a0 <_printf_float+0x3c0>
 80072e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072e4:	2200      	movs	r2, #0
 80072e6:	2300      	movs	r3, #0
 80072e8:	f7f9 fc0e 	bl	8000b08 <__aeabi_dcmpeq>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	d034      	beq.n	800735a <_printf_float+0x27a>
 80072f0:	4a37      	ldr	r2, [pc, #220]	; (80073d0 <_printf_float+0x2f0>)
 80072f2:	2301      	movs	r3, #1
 80072f4:	4631      	mov	r1, r6
 80072f6:	4628      	mov	r0, r5
 80072f8:	47b8      	blx	r7
 80072fa:	3001      	adds	r0, #1
 80072fc:	f43f af51 	beq.w	80071a2 <_printf_float+0xc2>
 8007300:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007304:	429a      	cmp	r2, r3
 8007306:	db02      	blt.n	800730e <_printf_float+0x22e>
 8007308:	6823      	ldr	r3, [r4, #0]
 800730a:	07d8      	lsls	r0, r3, #31
 800730c:	d510      	bpl.n	8007330 <_printf_float+0x250>
 800730e:	ee18 3a10 	vmov	r3, s16
 8007312:	4652      	mov	r2, sl
 8007314:	4631      	mov	r1, r6
 8007316:	4628      	mov	r0, r5
 8007318:	47b8      	blx	r7
 800731a:	3001      	adds	r0, #1
 800731c:	f43f af41 	beq.w	80071a2 <_printf_float+0xc2>
 8007320:	f04f 0800 	mov.w	r8, #0
 8007324:	f104 091a 	add.w	r9, r4, #26
 8007328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800732a:	3b01      	subs	r3, #1
 800732c:	4543      	cmp	r3, r8
 800732e:	dc09      	bgt.n	8007344 <_printf_float+0x264>
 8007330:	6823      	ldr	r3, [r4, #0]
 8007332:	079b      	lsls	r3, r3, #30
 8007334:	f100 8105 	bmi.w	8007542 <_printf_float+0x462>
 8007338:	68e0      	ldr	r0, [r4, #12]
 800733a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800733c:	4298      	cmp	r0, r3
 800733e:	bfb8      	it	lt
 8007340:	4618      	movlt	r0, r3
 8007342:	e730      	b.n	80071a6 <_printf_float+0xc6>
 8007344:	2301      	movs	r3, #1
 8007346:	464a      	mov	r2, r9
 8007348:	4631      	mov	r1, r6
 800734a:	4628      	mov	r0, r5
 800734c:	47b8      	blx	r7
 800734e:	3001      	adds	r0, #1
 8007350:	f43f af27 	beq.w	80071a2 <_printf_float+0xc2>
 8007354:	f108 0801 	add.w	r8, r8, #1
 8007358:	e7e6      	b.n	8007328 <_printf_float+0x248>
 800735a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800735c:	2b00      	cmp	r3, #0
 800735e:	dc39      	bgt.n	80073d4 <_printf_float+0x2f4>
 8007360:	4a1b      	ldr	r2, [pc, #108]	; (80073d0 <_printf_float+0x2f0>)
 8007362:	2301      	movs	r3, #1
 8007364:	4631      	mov	r1, r6
 8007366:	4628      	mov	r0, r5
 8007368:	47b8      	blx	r7
 800736a:	3001      	adds	r0, #1
 800736c:	f43f af19 	beq.w	80071a2 <_printf_float+0xc2>
 8007370:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007374:	4313      	orrs	r3, r2
 8007376:	d102      	bne.n	800737e <_printf_float+0x29e>
 8007378:	6823      	ldr	r3, [r4, #0]
 800737a:	07d9      	lsls	r1, r3, #31
 800737c:	d5d8      	bpl.n	8007330 <_printf_float+0x250>
 800737e:	ee18 3a10 	vmov	r3, s16
 8007382:	4652      	mov	r2, sl
 8007384:	4631      	mov	r1, r6
 8007386:	4628      	mov	r0, r5
 8007388:	47b8      	blx	r7
 800738a:	3001      	adds	r0, #1
 800738c:	f43f af09 	beq.w	80071a2 <_printf_float+0xc2>
 8007390:	f04f 0900 	mov.w	r9, #0
 8007394:	f104 0a1a 	add.w	sl, r4, #26
 8007398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800739a:	425b      	negs	r3, r3
 800739c:	454b      	cmp	r3, r9
 800739e:	dc01      	bgt.n	80073a4 <_printf_float+0x2c4>
 80073a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073a2:	e792      	b.n	80072ca <_printf_float+0x1ea>
 80073a4:	2301      	movs	r3, #1
 80073a6:	4652      	mov	r2, sl
 80073a8:	4631      	mov	r1, r6
 80073aa:	4628      	mov	r0, r5
 80073ac:	47b8      	blx	r7
 80073ae:	3001      	adds	r0, #1
 80073b0:	f43f aef7 	beq.w	80071a2 <_printf_float+0xc2>
 80073b4:	f109 0901 	add.w	r9, r9, #1
 80073b8:	e7ee      	b.n	8007398 <_printf_float+0x2b8>
 80073ba:	bf00      	nop
 80073bc:	7fefffff 	.word	0x7fefffff
 80073c0:	08009d78 	.word	0x08009d78
 80073c4:	08009d7c 	.word	0x08009d7c
 80073c8:	08009d84 	.word	0x08009d84
 80073cc:	08009d80 	.word	0x08009d80
 80073d0:	08009d88 	.word	0x08009d88
 80073d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073d8:	429a      	cmp	r2, r3
 80073da:	bfa8      	it	ge
 80073dc:	461a      	movge	r2, r3
 80073de:	2a00      	cmp	r2, #0
 80073e0:	4691      	mov	r9, r2
 80073e2:	dc37      	bgt.n	8007454 <_printf_float+0x374>
 80073e4:	f04f 0b00 	mov.w	fp, #0
 80073e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073ec:	f104 021a 	add.w	r2, r4, #26
 80073f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073f2:	9305      	str	r3, [sp, #20]
 80073f4:	eba3 0309 	sub.w	r3, r3, r9
 80073f8:	455b      	cmp	r3, fp
 80073fa:	dc33      	bgt.n	8007464 <_printf_float+0x384>
 80073fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007400:	429a      	cmp	r2, r3
 8007402:	db3b      	blt.n	800747c <_printf_float+0x39c>
 8007404:	6823      	ldr	r3, [r4, #0]
 8007406:	07da      	lsls	r2, r3, #31
 8007408:	d438      	bmi.n	800747c <_printf_float+0x39c>
 800740a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800740c:	9b05      	ldr	r3, [sp, #20]
 800740e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	eba2 0901 	sub.w	r9, r2, r1
 8007416:	4599      	cmp	r9, r3
 8007418:	bfa8      	it	ge
 800741a:	4699      	movge	r9, r3
 800741c:	f1b9 0f00 	cmp.w	r9, #0
 8007420:	dc35      	bgt.n	800748e <_printf_float+0x3ae>
 8007422:	f04f 0800 	mov.w	r8, #0
 8007426:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800742a:	f104 0a1a 	add.w	sl, r4, #26
 800742e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007432:	1a9b      	subs	r3, r3, r2
 8007434:	eba3 0309 	sub.w	r3, r3, r9
 8007438:	4543      	cmp	r3, r8
 800743a:	f77f af79 	ble.w	8007330 <_printf_float+0x250>
 800743e:	2301      	movs	r3, #1
 8007440:	4652      	mov	r2, sl
 8007442:	4631      	mov	r1, r6
 8007444:	4628      	mov	r0, r5
 8007446:	47b8      	blx	r7
 8007448:	3001      	adds	r0, #1
 800744a:	f43f aeaa 	beq.w	80071a2 <_printf_float+0xc2>
 800744e:	f108 0801 	add.w	r8, r8, #1
 8007452:	e7ec      	b.n	800742e <_printf_float+0x34e>
 8007454:	4613      	mov	r3, r2
 8007456:	4631      	mov	r1, r6
 8007458:	4642      	mov	r2, r8
 800745a:	4628      	mov	r0, r5
 800745c:	47b8      	blx	r7
 800745e:	3001      	adds	r0, #1
 8007460:	d1c0      	bne.n	80073e4 <_printf_float+0x304>
 8007462:	e69e      	b.n	80071a2 <_printf_float+0xc2>
 8007464:	2301      	movs	r3, #1
 8007466:	4631      	mov	r1, r6
 8007468:	4628      	mov	r0, r5
 800746a:	9205      	str	r2, [sp, #20]
 800746c:	47b8      	blx	r7
 800746e:	3001      	adds	r0, #1
 8007470:	f43f ae97 	beq.w	80071a2 <_printf_float+0xc2>
 8007474:	9a05      	ldr	r2, [sp, #20]
 8007476:	f10b 0b01 	add.w	fp, fp, #1
 800747a:	e7b9      	b.n	80073f0 <_printf_float+0x310>
 800747c:	ee18 3a10 	vmov	r3, s16
 8007480:	4652      	mov	r2, sl
 8007482:	4631      	mov	r1, r6
 8007484:	4628      	mov	r0, r5
 8007486:	47b8      	blx	r7
 8007488:	3001      	adds	r0, #1
 800748a:	d1be      	bne.n	800740a <_printf_float+0x32a>
 800748c:	e689      	b.n	80071a2 <_printf_float+0xc2>
 800748e:	9a05      	ldr	r2, [sp, #20]
 8007490:	464b      	mov	r3, r9
 8007492:	4442      	add	r2, r8
 8007494:	4631      	mov	r1, r6
 8007496:	4628      	mov	r0, r5
 8007498:	47b8      	blx	r7
 800749a:	3001      	adds	r0, #1
 800749c:	d1c1      	bne.n	8007422 <_printf_float+0x342>
 800749e:	e680      	b.n	80071a2 <_printf_float+0xc2>
 80074a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074a2:	2a01      	cmp	r2, #1
 80074a4:	dc01      	bgt.n	80074aa <_printf_float+0x3ca>
 80074a6:	07db      	lsls	r3, r3, #31
 80074a8:	d538      	bpl.n	800751c <_printf_float+0x43c>
 80074aa:	2301      	movs	r3, #1
 80074ac:	4642      	mov	r2, r8
 80074ae:	4631      	mov	r1, r6
 80074b0:	4628      	mov	r0, r5
 80074b2:	47b8      	blx	r7
 80074b4:	3001      	adds	r0, #1
 80074b6:	f43f ae74 	beq.w	80071a2 <_printf_float+0xc2>
 80074ba:	ee18 3a10 	vmov	r3, s16
 80074be:	4652      	mov	r2, sl
 80074c0:	4631      	mov	r1, r6
 80074c2:	4628      	mov	r0, r5
 80074c4:	47b8      	blx	r7
 80074c6:	3001      	adds	r0, #1
 80074c8:	f43f ae6b 	beq.w	80071a2 <_printf_float+0xc2>
 80074cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80074d0:	2200      	movs	r2, #0
 80074d2:	2300      	movs	r3, #0
 80074d4:	f7f9 fb18 	bl	8000b08 <__aeabi_dcmpeq>
 80074d8:	b9d8      	cbnz	r0, 8007512 <_printf_float+0x432>
 80074da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074dc:	f108 0201 	add.w	r2, r8, #1
 80074e0:	3b01      	subs	r3, #1
 80074e2:	4631      	mov	r1, r6
 80074e4:	4628      	mov	r0, r5
 80074e6:	47b8      	blx	r7
 80074e8:	3001      	adds	r0, #1
 80074ea:	d10e      	bne.n	800750a <_printf_float+0x42a>
 80074ec:	e659      	b.n	80071a2 <_printf_float+0xc2>
 80074ee:	2301      	movs	r3, #1
 80074f0:	4652      	mov	r2, sl
 80074f2:	4631      	mov	r1, r6
 80074f4:	4628      	mov	r0, r5
 80074f6:	47b8      	blx	r7
 80074f8:	3001      	adds	r0, #1
 80074fa:	f43f ae52 	beq.w	80071a2 <_printf_float+0xc2>
 80074fe:	f108 0801 	add.w	r8, r8, #1
 8007502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007504:	3b01      	subs	r3, #1
 8007506:	4543      	cmp	r3, r8
 8007508:	dcf1      	bgt.n	80074ee <_printf_float+0x40e>
 800750a:	464b      	mov	r3, r9
 800750c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007510:	e6dc      	b.n	80072cc <_printf_float+0x1ec>
 8007512:	f04f 0800 	mov.w	r8, #0
 8007516:	f104 0a1a 	add.w	sl, r4, #26
 800751a:	e7f2      	b.n	8007502 <_printf_float+0x422>
 800751c:	2301      	movs	r3, #1
 800751e:	4642      	mov	r2, r8
 8007520:	e7df      	b.n	80074e2 <_printf_float+0x402>
 8007522:	2301      	movs	r3, #1
 8007524:	464a      	mov	r2, r9
 8007526:	4631      	mov	r1, r6
 8007528:	4628      	mov	r0, r5
 800752a:	47b8      	blx	r7
 800752c:	3001      	adds	r0, #1
 800752e:	f43f ae38 	beq.w	80071a2 <_printf_float+0xc2>
 8007532:	f108 0801 	add.w	r8, r8, #1
 8007536:	68e3      	ldr	r3, [r4, #12]
 8007538:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800753a:	1a5b      	subs	r3, r3, r1
 800753c:	4543      	cmp	r3, r8
 800753e:	dcf0      	bgt.n	8007522 <_printf_float+0x442>
 8007540:	e6fa      	b.n	8007338 <_printf_float+0x258>
 8007542:	f04f 0800 	mov.w	r8, #0
 8007546:	f104 0919 	add.w	r9, r4, #25
 800754a:	e7f4      	b.n	8007536 <_printf_float+0x456>

0800754c <_printf_common>:
 800754c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007550:	4616      	mov	r6, r2
 8007552:	4699      	mov	r9, r3
 8007554:	688a      	ldr	r2, [r1, #8]
 8007556:	690b      	ldr	r3, [r1, #16]
 8007558:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800755c:	4293      	cmp	r3, r2
 800755e:	bfb8      	it	lt
 8007560:	4613      	movlt	r3, r2
 8007562:	6033      	str	r3, [r6, #0]
 8007564:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007568:	4607      	mov	r7, r0
 800756a:	460c      	mov	r4, r1
 800756c:	b10a      	cbz	r2, 8007572 <_printf_common+0x26>
 800756e:	3301      	adds	r3, #1
 8007570:	6033      	str	r3, [r6, #0]
 8007572:	6823      	ldr	r3, [r4, #0]
 8007574:	0699      	lsls	r1, r3, #26
 8007576:	bf42      	ittt	mi
 8007578:	6833      	ldrmi	r3, [r6, #0]
 800757a:	3302      	addmi	r3, #2
 800757c:	6033      	strmi	r3, [r6, #0]
 800757e:	6825      	ldr	r5, [r4, #0]
 8007580:	f015 0506 	ands.w	r5, r5, #6
 8007584:	d106      	bne.n	8007594 <_printf_common+0x48>
 8007586:	f104 0a19 	add.w	sl, r4, #25
 800758a:	68e3      	ldr	r3, [r4, #12]
 800758c:	6832      	ldr	r2, [r6, #0]
 800758e:	1a9b      	subs	r3, r3, r2
 8007590:	42ab      	cmp	r3, r5
 8007592:	dc26      	bgt.n	80075e2 <_printf_common+0x96>
 8007594:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007598:	1e13      	subs	r3, r2, #0
 800759a:	6822      	ldr	r2, [r4, #0]
 800759c:	bf18      	it	ne
 800759e:	2301      	movne	r3, #1
 80075a0:	0692      	lsls	r2, r2, #26
 80075a2:	d42b      	bmi.n	80075fc <_printf_common+0xb0>
 80075a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075a8:	4649      	mov	r1, r9
 80075aa:	4638      	mov	r0, r7
 80075ac:	47c0      	blx	r8
 80075ae:	3001      	adds	r0, #1
 80075b0:	d01e      	beq.n	80075f0 <_printf_common+0xa4>
 80075b2:	6823      	ldr	r3, [r4, #0]
 80075b4:	68e5      	ldr	r5, [r4, #12]
 80075b6:	6832      	ldr	r2, [r6, #0]
 80075b8:	f003 0306 	and.w	r3, r3, #6
 80075bc:	2b04      	cmp	r3, #4
 80075be:	bf08      	it	eq
 80075c0:	1aad      	subeq	r5, r5, r2
 80075c2:	68a3      	ldr	r3, [r4, #8]
 80075c4:	6922      	ldr	r2, [r4, #16]
 80075c6:	bf0c      	ite	eq
 80075c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075cc:	2500      	movne	r5, #0
 80075ce:	4293      	cmp	r3, r2
 80075d0:	bfc4      	itt	gt
 80075d2:	1a9b      	subgt	r3, r3, r2
 80075d4:	18ed      	addgt	r5, r5, r3
 80075d6:	2600      	movs	r6, #0
 80075d8:	341a      	adds	r4, #26
 80075da:	42b5      	cmp	r5, r6
 80075dc:	d11a      	bne.n	8007614 <_printf_common+0xc8>
 80075de:	2000      	movs	r0, #0
 80075e0:	e008      	b.n	80075f4 <_printf_common+0xa8>
 80075e2:	2301      	movs	r3, #1
 80075e4:	4652      	mov	r2, sl
 80075e6:	4649      	mov	r1, r9
 80075e8:	4638      	mov	r0, r7
 80075ea:	47c0      	blx	r8
 80075ec:	3001      	adds	r0, #1
 80075ee:	d103      	bne.n	80075f8 <_printf_common+0xac>
 80075f0:	f04f 30ff 	mov.w	r0, #4294967295
 80075f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075f8:	3501      	adds	r5, #1
 80075fa:	e7c6      	b.n	800758a <_printf_common+0x3e>
 80075fc:	18e1      	adds	r1, r4, r3
 80075fe:	1c5a      	adds	r2, r3, #1
 8007600:	2030      	movs	r0, #48	; 0x30
 8007602:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007606:	4422      	add	r2, r4
 8007608:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800760c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007610:	3302      	adds	r3, #2
 8007612:	e7c7      	b.n	80075a4 <_printf_common+0x58>
 8007614:	2301      	movs	r3, #1
 8007616:	4622      	mov	r2, r4
 8007618:	4649      	mov	r1, r9
 800761a:	4638      	mov	r0, r7
 800761c:	47c0      	blx	r8
 800761e:	3001      	adds	r0, #1
 8007620:	d0e6      	beq.n	80075f0 <_printf_common+0xa4>
 8007622:	3601      	adds	r6, #1
 8007624:	e7d9      	b.n	80075da <_printf_common+0x8e>
	...

08007628 <_printf_i>:
 8007628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800762c:	460c      	mov	r4, r1
 800762e:	4691      	mov	r9, r2
 8007630:	7e27      	ldrb	r7, [r4, #24]
 8007632:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007634:	2f78      	cmp	r7, #120	; 0x78
 8007636:	4680      	mov	r8, r0
 8007638:	469a      	mov	sl, r3
 800763a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800763e:	d807      	bhi.n	8007650 <_printf_i+0x28>
 8007640:	2f62      	cmp	r7, #98	; 0x62
 8007642:	d80a      	bhi.n	800765a <_printf_i+0x32>
 8007644:	2f00      	cmp	r7, #0
 8007646:	f000 80d8 	beq.w	80077fa <_printf_i+0x1d2>
 800764a:	2f58      	cmp	r7, #88	; 0x58
 800764c:	f000 80a3 	beq.w	8007796 <_printf_i+0x16e>
 8007650:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007654:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007658:	e03a      	b.n	80076d0 <_printf_i+0xa8>
 800765a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800765e:	2b15      	cmp	r3, #21
 8007660:	d8f6      	bhi.n	8007650 <_printf_i+0x28>
 8007662:	a001      	add	r0, pc, #4	; (adr r0, 8007668 <_printf_i+0x40>)
 8007664:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007668:	080076c1 	.word	0x080076c1
 800766c:	080076d5 	.word	0x080076d5
 8007670:	08007651 	.word	0x08007651
 8007674:	08007651 	.word	0x08007651
 8007678:	08007651 	.word	0x08007651
 800767c:	08007651 	.word	0x08007651
 8007680:	080076d5 	.word	0x080076d5
 8007684:	08007651 	.word	0x08007651
 8007688:	08007651 	.word	0x08007651
 800768c:	08007651 	.word	0x08007651
 8007690:	08007651 	.word	0x08007651
 8007694:	080077e1 	.word	0x080077e1
 8007698:	08007705 	.word	0x08007705
 800769c:	080077c3 	.word	0x080077c3
 80076a0:	08007651 	.word	0x08007651
 80076a4:	08007651 	.word	0x08007651
 80076a8:	08007803 	.word	0x08007803
 80076ac:	08007651 	.word	0x08007651
 80076b0:	08007705 	.word	0x08007705
 80076b4:	08007651 	.word	0x08007651
 80076b8:	08007651 	.word	0x08007651
 80076bc:	080077cb 	.word	0x080077cb
 80076c0:	680b      	ldr	r3, [r1, #0]
 80076c2:	1d1a      	adds	r2, r3, #4
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	600a      	str	r2, [r1, #0]
 80076c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80076cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076d0:	2301      	movs	r3, #1
 80076d2:	e0a3      	b.n	800781c <_printf_i+0x1f4>
 80076d4:	6825      	ldr	r5, [r4, #0]
 80076d6:	6808      	ldr	r0, [r1, #0]
 80076d8:	062e      	lsls	r6, r5, #24
 80076da:	f100 0304 	add.w	r3, r0, #4
 80076de:	d50a      	bpl.n	80076f6 <_printf_i+0xce>
 80076e0:	6805      	ldr	r5, [r0, #0]
 80076e2:	600b      	str	r3, [r1, #0]
 80076e4:	2d00      	cmp	r5, #0
 80076e6:	da03      	bge.n	80076f0 <_printf_i+0xc8>
 80076e8:	232d      	movs	r3, #45	; 0x2d
 80076ea:	426d      	negs	r5, r5
 80076ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076f0:	485e      	ldr	r0, [pc, #376]	; (800786c <_printf_i+0x244>)
 80076f2:	230a      	movs	r3, #10
 80076f4:	e019      	b.n	800772a <_printf_i+0x102>
 80076f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80076fa:	6805      	ldr	r5, [r0, #0]
 80076fc:	600b      	str	r3, [r1, #0]
 80076fe:	bf18      	it	ne
 8007700:	b22d      	sxthne	r5, r5
 8007702:	e7ef      	b.n	80076e4 <_printf_i+0xbc>
 8007704:	680b      	ldr	r3, [r1, #0]
 8007706:	6825      	ldr	r5, [r4, #0]
 8007708:	1d18      	adds	r0, r3, #4
 800770a:	6008      	str	r0, [r1, #0]
 800770c:	0628      	lsls	r0, r5, #24
 800770e:	d501      	bpl.n	8007714 <_printf_i+0xec>
 8007710:	681d      	ldr	r5, [r3, #0]
 8007712:	e002      	b.n	800771a <_printf_i+0xf2>
 8007714:	0669      	lsls	r1, r5, #25
 8007716:	d5fb      	bpl.n	8007710 <_printf_i+0xe8>
 8007718:	881d      	ldrh	r5, [r3, #0]
 800771a:	4854      	ldr	r0, [pc, #336]	; (800786c <_printf_i+0x244>)
 800771c:	2f6f      	cmp	r7, #111	; 0x6f
 800771e:	bf0c      	ite	eq
 8007720:	2308      	moveq	r3, #8
 8007722:	230a      	movne	r3, #10
 8007724:	2100      	movs	r1, #0
 8007726:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800772a:	6866      	ldr	r6, [r4, #4]
 800772c:	60a6      	str	r6, [r4, #8]
 800772e:	2e00      	cmp	r6, #0
 8007730:	bfa2      	ittt	ge
 8007732:	6821      	ldrge	r1, [r4, #0]
 8007734:	f021 0104 	bicge.w	r1, r1, #4
 8007738:	6021      	strge	r1, [r4, #0]
 800773a:	b90d      	cbnz	r5, 8007740 <_printf_i+0x118>
 800773c:	2e00      	cmp	r6, #0
 800773e:	d04d      	beq.n	80077dc <_printf_i+0x1b4>
 8007740:	4616      	mov	r6, r2
 8007742:	fbb5 f1f3 	udiv	r1, r5, r3
 8007746:	fb03 5711 	mls	r7, r3, r1, r5
 800774a:	5dc7      	ldrb	r7, [r0, r7]
 800774c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007750:	462f      	mov	r7, r5
 8007752:	42bb      	cmp	r3, r7
 8007754:	460d      	mov	r5, r1
 8007756:	d9f4      	bls.n	8007742 <_printf_i+0x11a>
 8007758:	2b08      	cmp	r3, #8
 800775a:	d10b      	bne.n	8007774 <_printf_i+0x14c>
 800775c:	6823      	ldr	r3, [r4, #0]
 800775e:	07df      	lsls	r7, r3, #31
 8007760:	d508      	bpl.n	8007774 <_printf_i+0x14c>
 8007762:	6923      	ldr	r3, [r4, #16]
 8007764:	6861      	ldr	r1, [r4, #4]
 8007766:	4299      	cmp	r1, r3
 8007768:	bfde      	ittt	le
 800776a:	2330      	movle	r3, #48	; 0x30
 800776c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007770:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007774:	1b92      	subs	r2, r2, r6
 8007776:	6122      	str	r2, [r4, #16]
 8007778:	f8cd a000 	str.w	sl, [sp]
 800777c:	464b      	mov	r3, r9
 800777e:	aa03      	add	r2, sp, #12
 8007780:	4621      	mov	r1, r4
 8007782:	4640      	mov	r0, r8
 8007784:	f7ff fee2 	bl	800754c <_printf_common>
 8007788:	3001      	adds	r0, #1
 800778a:	d14c      	bne.n	8007826 <_printf_i+0x1fe>
 800778c:	f04f 30ff 	mov.w	r0, #4294967295
 8007790:	b004      	add	sp, #16
 8007792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007796:	4835      	ldr	r0, [pc, #212]	; (800786c <_printf_i+0x244>)
 8007798:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800779c:	6823      	ldr	r3, [r4, #0]
 800779e:	680e      	ldr	r6, [r1, #0]
 80077a0:	061f      	lsls	r7, r3, #24
 80077a2:	f856 5b04 	ldr.w	r5, [r6], #4
 80077a6:	600e      	str	r6, [r1, #0]
 80077a8:	d514      	bpl.n	80077d4 <_printf_i+0x1ac>
 80077aa:	07d9      	lsls	r1, r3, #31
 80077ac:	bf44      	itt	mi
 80077ae:	f043 0320 	orrmi.w	r3, r3, #32
 80077b2:	6023      	strmi	r3, [r4, #0]
 80077b4:	b91d      	cbnz	r5, 80077be <_printf_i+0x196>
 80077b6:	6823      	ldr	r3, [r4, #0]
 80077b8:	f023 0320 	bic.w	r3, r3, #32
 80077bc:	6023      	str	r3, [r4, #0]
 80077be:	2310      	movs	r3, #16
 80077c0:	e7b0      	b.n	8007724 <_printf_i+0xfc>
 80077c2:	6823      	ldr	r3, [r4, #0]
 80077c4:	f043 0320 	orr.w	r3, r3, #32
 80077c8:	6023      	str	r3, [r4, #0]
 80077ca:	2378      	movs	r3, #120	; 0x78
 80077cc:	4828      	ldr	r0, [pc, #160]	; (8007870 <_printf_i+0x248>)
 80077ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80077d2:	e7e3      	b.n	800779c <_printf_i+0x174>
 80077d4:	065e      	lsls	r6, r3, #25
 80077d6:	bf48      	it	mi
 80077d8:	b2ad      	uxthmi	r5, r5
 80077da:	e7e6      	b.n	80077aa <_printf_i+0x182>
 80077dc:	4616      	mov	r6, r2
 80077de:	e7bb      	b.n	8007758 <_printf_i+0x130>
 80077e0:	680b      	ldr	r3, [r1, #0]
 80077e2:	6826      	ldr	r6, [r4, #0]
 80077e4:	6960      	ldr	r0, [r4, #20]
 80077e6:	1d1d      	adds	r5, r3, #4
 80077e8:	600d      	str	r5, [r1, #0]
 80077ea:	0635      	lsls	r5, r6, #24
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	d501      	bpl.n	80077f4 <_printf_i+0x1cc>
 80077f0:	6018      	str	r0, [r3, #0]
 80077f2:	e002      	b.n	80077fa <_printf_i+0x1d2>
 80077f4:	0671      	lsls	r1, r6, #25
 80077f6:	d5fb      	bpl.n	80077f0 <_printf_i+0x1c8>
 80077f8:	8018      	strh	r0, [r3, #0]
 80077fa:	2300      	movs	r3, #0
 80077fc:	6123      	str	r3, [r4, #16]
 80077fe:	4616      	mov	r6, r2
 8007800:	e7ba      	b.n	8007778 <_printf_i+0x150>
 8007802:	680b      	ldr	r3, [r1, #0]
 8007804:	1d1a      	adds	r2, r3, #4
 8007806:	600a      	str	r2, [r1, #0]
 8007808:	681e      	ldr	r6, [r3, #0]
 800780a:	6862      	ldr	r2, [r4, #4]
 800780c:	2100      	movs	r1, #0
 800780e:	4630      	mov	r0, r6
 8007810:	f7f8 fd06 	bl	8000220 <memchr>
 8007814:	b108      	cbz	r0, 800781a <_printf_i+0x1f2>
 8007816:	1b80      	subs	r0, r0, r6
 8007818:	6060      	str	r0, [r4, #4]
 800781a:	6863      	ldr	r3, [r4, #4]
 800781c:	6123      	str	r3, [r4, #16]
 800781e:	2300      	movs	r3, #0
 8007820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007824:	e7a8      	b.n	8007778 <_printf_i+0x150>
 8007826:	6923      	ldr	r3, [r4, #16]
 8007828:	4632      	mov	r2, r6
 800782a:	4649      	mov	r1, r9
 800782c:	4640      	mov	r0, r8
 800782e:	47d0      	blx	sl
 8007830:	3001      	adds	r0, #1
 8007832:	d0ab      	beq.n	800778c <_printf_i+0x164>
 8007834:	6823      	ldr	r3, [r4, #0]
 8007836:	079b      	lsls	r3, r3, #30
 8007838:	d413      	bmi.n	8007862 <_printf_i+0x23a>
 800783a:	68e0      	ldr	r0, [r4, #12]
 800783c:	9b03      	ldr	r3, [sp, #12]
 800783e:	4298      	cmp	r0, r3
 8007840:	bfb8      	it	lt
 8007842:	4618      	movlt	r0, r3
 8007844:	e7a4      	b.n	8007790 <_printf_i+0x168>
 8007846:	2301      	movs	r3, #1
 8007848:	4632      	mov	r2, r6
 800784a:	4649      	mov	r1, r9
 800784c:	4640      	mov	r0, r8
 800784e:	47d0      	blx	sl
 8007850:	3001      	adds	r0, #1
 8007852:	d09b      	beq.n	800778c <_printf_i+0x164>
 8007854:	3501      	adds	r5, #1
 8007856:	68e3      	ldr	r3, [r4, #12]
 8007858:	9903      	ldr	r1, [sp, #12]
 800785a:	1a5b      	subs	r3, r3, r1
 800785c:	42ab      	cmp	r3, r5
 800785e:	dcf2      	bgt.n	8007846 <_printf_i+0x21e>
 8007860:	e7eb      	b.n	800783a <_printf_i+0x212>
 8007862:	2500      	movs	r5, #0
 8007864:	f104 0619 	add.w	r6, r4, #25
 8007868:	e7f5      	b.n	8007856 <_printf_i+0x22e>
 800786a:	bf00      	nop
 800786c:	08009d8a 	.word	0x08009d8a
 8007870:	08009d9b 	.word	0x08009d9b

08007874 <sniprintf>:
 8007874:	b40c      	push	{r2, r3}
 8007876:	b530      	push	{r4, r5, lr}
 8007878:	4b17      	ldr	r3, [pc, #92]	; (80078d8 <sniprintf+0x64>)
 800787a:	1e0c      	subs	r4, r1, #0
 800787c:	681d      	ldr	r5, [r3, #0]
 800787e:	b09d      	sub	sp, #116	; 0x74
 8007880:	da08      	bge.n	8007894 <sniprintf+0x20>
 8007882:	238b      	movs	r3, #139	; 0x8b
 8007884:	602b      	str	r3, [r5, #0]
 8007886:	f04f 30ff 	mov.w	r0, #4294967295
 800788a:	b01d      	add	sp, #116	; 0x74
 800788c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007890:	b002      	add	sp, #8
 8007892:	4770      	bx	lr
 8007894:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007898:	f8ad 3014 	strh.w	r3, [sp, #20]
 800789c:	bf14      	ite	ne
 800789e:	f104 33ff 	addne.w	r3, r4, #4294967295
 80078a2:	4623      	moveq	r3, r4
 80078a4:	9304      	str	r3, [sp, #16]
 80078a6:	9307      	str	r3, [sp, #28]
 80078a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80078ac:	9002      	str	r0, [sp, #8]
 80078ae:	9006      	str	r0, [sp, #24]
 80078b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80078b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80078b6:	ab21      	add	r3, sp, #132	; 0x84
 80078b8:	a902      	add	r1, sp, #8
 80078ba:	4628      	mov	r0, r5
 80078bc:	9301      	str	r3, [sp, #4]
 80078be:	f001 fb35 	bl	8008f2c <_svfiprintf_r>
 80078c2:	1c43      	adds	r3, r0, #1
 80078c4:	bfbc      	itt	lt
 80078c6:	238b      	movlt	r3, #139	; 0x8b
 80078c8:	602b      	strlt	r3, [r5, #0]
 80078ca:	2c00      	cmp	r4, #0
 80078cc:	d0dd      	beq.n	800788a <sniprintf+0x16>
 80078ce:	9b02      	ldr	r3, [sp, #8]
 80078d0:	2200      	movs	r2, #0
 80078d2:	701a      	strb	r2, [r3, #0]
 80078d4:	e7d9      	b.n	800788a <sniprintf+0x16>
 80078d6:	bf00      	nop
 80078d8:	20000010 	.word	0x20000010

080078dc <quorem>:
 80078dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e0:	6903      	ldr	r3, [r0, #16]
 80078e2:	690c      	ldr	r4, [r1, #16]
 80078e4:	42a3      	cmp	r3, r4
 80078e6:	4607      	mov	r7, r0
 80078e8:	f2c0 8081 	blt.w	80079ee <quorem+0x112>
 80078ec:	3c01      	subs	r4, #1
 80078ee:	f101 0814 	add.w	r8, r1, #20
 80078f2:	f100 0514 	add.w	r5, r0, #20
 80078f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078fa:	9301      	str	r3, [sp, #4]
 80078fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007900:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007904:	3301      	adds	r3, #1
 8007906:	429a      	cmp	r2, r3
 8007908:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800790c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007910:	fbb2 f6f3 	udiv	r6, r2, r3
 8007914:	d331      	bcc.n	800797a <quorem+0x9e>
 8007916:	f04f 0e00 	mov.w	lr, #0
 800791a:	4640      	mov	r0, r8
 800791c:	46ac      	mov	ip, r5
 800791e:	46f2      	mov	sl, lr
 8007920:	f850 2b04 	ldr.w	r2, [r0], #4
 8007924:	b293      	uxth	r3, r2
 8007926:	fb06 e303 	mla	r3, r6, r3, lr
 800792a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800792e:	b29b      	uxth	r3, r3
 8007930:	ebaa 0303 	sub.w	r3, sl, r3
 8007934:	0c12      	lsrs	r2, r2, #16
 8007936:	f8dc a000 	ldr.w	sl, [ip]
 800793a:	fb06 e202 	mla	r2, r6, r2, lr
 800793e:	fa13 f38a 	uxtah	r3, r3, sl
 8007942:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007946:	fa1f fa82 	uxth.w	sl, r2
 800794a:	f8dc 2000 	ldr.w	r2, [ip]
 800794e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007952:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007956:	b29b      	uxth	r3, r3
 8007958:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800795c:	4581      	cmp	r9, r0
 800795e:	f84c 3b04 	str.w	r3, [ip], #4
 8007962:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007966:	d2db      	bcs.n	8007920 <quorem+0x44>
 8007968:	f855 300b 	ldr.w	r3, [r5, fp]
 800796c:	b92b      	cbnz	r3, 800797a <quorem+0x9e>
 800796e:	9b01      	ldr	r3, [sp, #4]
 8007970:	3b04      	subs	r3, #4
 8007972:	429d      	cmp	r5, r3
 8007974:	461a      	mov	r2, r3
 8007976:	d32e      	bcc.n	80079d6 <quorem+0xfa>
 8007978:	613c      	str	r4, [r7, #16]
 800797a:	4638      	mov	r0, r7
 800797c:	f001 f8c0 	bl	8008b00 <__mcmp>
 8007980:	2800      	cmp	r0, #0
 8007982:	db24      	blt.n	80079ce <quorem+0xf2>
 8007984:	3601      	adds	r6, #1
 8007986:	4628      	mov	r0, r5
 8007988:	f04f 0c00 	mov.w	ip, #0
 800798c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007990:	f8d0 e000 	ldr.w	lr, [r0]
 8007994:	b293      	uxth	r3, r2
 8007996:	ebac 0303 	sub.w	r3, ip, r3
 800799a:	0c12      	lsrs	r2, r2, #16
 800799c:	fa13 f38e 	uxtah	r3, r3, lr
 80079a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80079a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079ae:	45c1      	cmp	r9, r8
 80079b0:	f840 3b04 	str.w	r3, [r0], #4
 80079b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80079b8:	d2e8      	bcs.n	800798c <quorem+0xb0>
 80079ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079c2:	b922      	cbnz	r2, 80079ce <quorem+0xf2>
 80079c4:	3b04      	subs	r3, #4
 80079c6:	429d      	cmp	r5, r3
 80079c8:	461a      	mov	r2, r3
 80079ca:	d30a      	bcc.n	80079e2 <quorem+0x106>
 80079cc:	613c      	str	r4, [r7, #16]
 80079ce:	4630      	mov	r0, r6
 80079d0:	b003      	add	sp, #12
 80079d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079d6:	6812      	ldr	r2, [r2, #0]
 80079d8:	3b04      	subs	r3, #4
 80079da:	2a00      	cmp	r2, #0
 80079dc:	d1cc      	bne.n	8007978 <quorem+0x9c>
 80079de:	3c01      	subs	r4, #1
 80079e0:	e7c7      	b.n	8007972 <quorem+0x96>
 80079e2:	6812      	ldr	r2, [r2, #0]
 80079e4:	3b04      	subs	r3, #4
 80079e6:	2a00      	cmp	r2, #0
 80079e8:	d1f0      	bne.n	80079cc <quorem+0xf0>
 80079ea:	3c01      	subs	r4, #1
 80079ec:	e7eb      	b.n	80079c6 <quorem+0xea>
 80079ee:	2000      	movs	r0, #0
 80079f0:	e7ee      	b.n	80079d0 <quorem+0xf4>
 80079f2:	0000      	movs	r0, r0
 80079f4:	0000      	movs	r0, r0
	...

080079f8 <_dtoa_r>:
 80079f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079fc:	ed2d 8b02 	vpush	{d8}
 8007a00:	ec57 6b10 	vmov	r6, r7, d0
 8007a04:	b095      	sub	sp, #84	; 0x54
 8007a06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007a08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007a0c:	9105      	str	r1, [sp, #20]
 8007a0e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007a12:	4604      	mov	r4, r0
 8007a14:	9209      	str	r2, [sp, #36]	; 0x24
 8007a16:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a18:	b975      	cbnz	r5, 8007a38 <_dtoa_r+0x40>
 8007a1a:	2010      	movs	r0, #16
 8007a1c:	f000 fddc 	bl	80085d8 <malloc>
 8007a20:	4602      	mov	r2, r0
 8007a22:	6260      	str	r0, [r4, #36]	; 0x24
 8007a24:	b920      	cbnz	r0, 8007a30 <_dtoa_r+0x38>
 8007a26:	4bb2      	ldr	r3, [pc, #712]	; (8007cf0 <_dtoa_r+0x2f8>)
 8007a28:	21ea      	movs	r1, #234	; 0xea
 8007a2a:	48b2      	ldr	r0, [pc, #712]	; (8007cf4 <_dtoa_r+0x2fc>)
 8007a2c:	f001 fb8e 	bl	800914c <__assert_func>
 8007a30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007a34:	6005      	str	r5, [r0, #0]
 8007a36:	60c5      	str	r5, [r0, #12]
 8007a38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a3a:	6819      	ldr	r1, [r3, #0]
 8007a3c:	b151      	cbz	r1, 8007a54 <_dtoa_r+0x5c>
 8007a3e:	685a      	ldr	r2, [r3, #4]
 8007a40:	604a      	str	r2, [r1, #4]
 8007a42:	2301      	movs	r3, #1
 8007a44:	4093      	lsls	r3, r2
 8007a46:	608b      	str	r3, [r1, #8]
 8007a48:	4620      	mov	r0, r4
 8007a4a:	f000 fe1b 	bl	8008684 <_Bfree>
 8007a4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a50:	2200      	movs	r2, #0
 8007a52:	601a      	str	r2, [r3, #0]
 8007a54:	1e3b      	subs	r3, r7, #0
 8007a56:	bfb9      	ittee	lt
 8007a58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007a5c:	9303      	strlt	r3, [sp, #12]
 8007a5e:	2300      	movge	r3, #0
 8007a60:	f8c8 3000 	strge.w	r3, [r8]
 8007a64:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007a68:	4ba3      	ldr	r3, [pc, #652]	; (8007cf8 <_dtoa_r+0x300>)
 8007a6a:	bfbc      	itt	lt
 8007a6c:	2201      	movlt	r2, #1
 8007a6e:	f8c8 2000 	strlt.w	r2, [r8]
 8007a72:	ea33 0309 	bics.w	r3, r3, r9
 8007a76:	d11b      	bne.n	8007ab0 <_dtoa_r+0xb8>
 8007a78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a7a:	f242 730f 	movw	r3, #9999	; 0x270f
 8007a7e:	6013      	str	r3, [r2, #0]
 8007a80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a84:	4333      	orrs	r3, r6
 8007a86:	f000 857a 	beq.w	800857e <_dtoa_r+0xb86>
 8007a8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a8c:	b963      	cbnz	r3, 8007aa8 <_dtoa_r+0xb0>
 8007a8e:	4b9b      	ldr	r3, [pc, #620]	; (8007cfc <_dtoa_r+0x304>)
 8007a90:	e024      	b.n	8007adc <_dtoa_r+0xe4>
 8007a92:	4b9b      	ldr	r3, [pc, #620]	; (8007d00 <_dtoa_r+0x308>)
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	3308      	adds	r3, #8
 8007a98:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007a9a:	6013      	str	r3, [r2, #0]
 8007a9c:	9800      	ldr	r0, [sp, #0]
 8007a9e:	b015      	add	sp, #84	; 0x54
 8007aa0:	ecbd 8b02 	vpop	{d8}
 8007aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aa8:	4b94      	ldr	r3, [pc, #592]	; (8007cfc <_dtoa_r+0x304>)
 8007aaa:	9300      	str	r3, [sp, #0]
 8007aac:	3303      	adds	r3, #3
 8007aae:	e7f3      	b.n	8007a98 <_dtoa_r+0xa0>
 8007ab0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	ec51 0b17 	vmov	r0, r1, d7
 8007aba:	2300      	movs	r3, #0
 8007abc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007ac0:	f7f9 f822 	bl	8000b08 <__aeabi_dcmpeq>
 8007ac4:	4680      	mov	r8, r0
 8007ac6:	b158      	cbz	r0, 8007ae0 <_dtoa_r+0xe8>
 8007ac8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007aca:	2301      	movs	r3, #1
 8007acc:	6013      	str	r3, [r2, #0]
 8007ace:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f000 8551 	beq.w	8008578 <_dtoa_r+0xb80>
 8007ad6:	488b      	ldr	r0, [pc, #556]	; (8007d04 <_dtoa_r+0x30c>)
 8007ad8:	6018      	str	r0, [r3, #0]
 8007ada:	1e43      	subs	r3, r0, #1
 8007adc:	9300      	str	r3, [sp, #0]
 8007ade:	e7dd      	b.n	8007a9c <_dtoa_r+0xa4>
 8007ae0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007ae4:	aa12      	add	r2, sp, #72	; 0x48
 8007ae6:	a913      	add	r1, sp, #76	; 0x4c
 8007ae8:	4620      	mov	r0, r4
 8007aea:	f001 f8ad 	bl	8008c48 <__d2b>
 8007aee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007af2:	4683      	mov	fp, r0
 8007af4:	2d00      	cmp	r5, #0
 8007af6:	d07c      	beq.n	8007bf2 <_dtoa_r+0x1fa>
 8007af8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007afa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007afe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b02:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007b06:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007b0a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007b0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007b12:	4b7d      	ldr	r3, [pc, #500]	; (8007d08 <_dtoa_r+0x310>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	4630      	mov	r0, r6
 8007b18:	4639      	mov	r1, r7
 8007b1a:	f7f8 fbd5 	bl	80002c8 <__aeabi_dsub>
 8007b1e:	a36e      	add	r3, pc, #440	; (adr r3, 8007cd8 <_dtoa_r+0x2e0>)
 8007b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b24:	f7f8 fd88 	bl	8000638 <__aeabi_dmul>
 8007b28:	a36d      	add	r3, pc, #436	; (adr r3, 8007ce0 <_dtoa_r+0x2e8>)
 8007b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2e:	f7f8 fbcd 	bl	80002cc <__adddf3>
 8007b32:	4606      	mov	r6, r0
 8007b34:	4628      	mov	r0, r5
 8007b36:	460f      	mov	r7, r1
 8007b38:	f7f8 fd14 	bl	8000564 <__aeabi_i2d>
 8007b3c:	a36a      	add	r3, pc, #424	; (adr r3, 8007ce8 <_dtoa_r+0x2f0>)
 8007b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b42:	f7f8 fd79 	bl	8000638 <__aeabi_dmul>
 8007b46:	4602      	mov	r2, r0
 8007b48:	460b      	mov	r3, r1
 8007b4a:	4630      	mov	r0, r6
 8007b4c:	4639      	mov	r1, r7
 8007b4e:	f7f8 fbbd 	bl	80002cc <__adddf3>
 8007b52:	4606      	mov	r6, r0
 8007b54:	460f      	mov	r7, r1
 8007b56:	f7f9 f81f 	bl	8000b98 <__aeabi_d2iz>
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	4682      	mov	sl, r0
 8007b5e:	2300      	movs	r3, #0
 8007b60:	4630      	mov	r0, r6
 8007b62:	4639      	mov	r1, r7
 8007b64:	f7f8 ffda 	bl	8000b1c <__aeabi_dcmplt>
 8007b68:	b148      	cbz	r0, 8007b7e <_dtoa_r+0x186>
 8007b6a:	4650      	mov	r0, sl
 8007b6c:	f7f8 fcfa 	bl	8000564 <__aeabi_i2d>
 8007b70:	4632      	mov	r2, r6
 8007b72:	463b      	mov	r3, r7
 8007b74:	f7f8 ffc8 	bl	8000b08 <__aeabi_dcmpeq>
 8007b78:	b908      	cbnz	r0, 8007b7e <_dtoa_r+0x186>
 8007b7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b7e:	f1ba 0f16 	cmp.w	sl, #22
 8007b82:	d854      	bhi.n	8007c2e <_dtoa_r+0x236>
 8007b84:	4b61      	ldr	r3, [pc, #388]	; (8007d0c <_dtoa_r+0x314>)
 8007b86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007b92:	f7f8 ffc3 	bl	8000b1c <__aeabi_dcmplt>
 8007b96:	2800      	cmp	r0, #0
 8007b98:	d04b      	beq.n	8007c32 <_dtoa_r+0x23a>
 8007b9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	930e      	str	r3, [sp, #56]	; 0x38
 8007ba2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ba4:	1b5d      	subs	r5, r3, r5
 8007ba6:	1e6b      	subs	r3, r5, #1
 8007ba8:	9304      	str	r3, [sp, #16]
 8007baa:	bf43      	ittte	mi
 8007bac:	2300      	movmi	r3, #0
 8007bae:	f1c5 0801 	rsbmi	r8, r5, #1
 8007bb2:	9304      	strmi	r3, [sp, #16]
 8007bb4:	f04f 0800 	movpl.w	r8, #0
 8007bb8:	f1ba 0f00 	cmp.w	sl, #0
 8007bbc:	db3b      	blt.n	8007c36 <_dtoa_r+0x23e>
 8007bbe:	9b04      	ldr	r3, [sp, #16]
 8007bc0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007bc4:	4453      	add	r3, sl
 8007bc6:	9304      	str	r3, [sp, #16]
 8007bc8:	2300      	movs	r3, #0
 8007bca:	9306      	str	r3, [sp, #24]
 8007bcc:	9b05      	ldr	r3, [sp, #20]
 8007bce:	2b09      	cmp	r3, #9
 8007bd0:	d869      	bhi.n	8007ca6 <_dtoa_r+0x2ae>
 8007bd2:	2b05      	cmp	r3, #5
 8007bd4:	bfc4      	itt	gt
 8007bd6:	3b04      	subgt	r3, #4
 8007bd8:	9305      	strgt	r3, [sp, #20]
 8007bda:	9b05      	ldr	r3, [sp, #20]
 8007bdc:	f1a3 0302 	sub.w	r3, r3, #2
 8007be0:	bfcc      	ite	gt
 8007be2:	2500      	movgt	r5, #0
 8007be4:	2501      	movle	r5, #1
 8007be6:	2b03      	cmp	r3, #3
 8007be8:	d869      	bhi.n	8007cbe <_dtoa_r+0x2c6>
 8007bea:	e8df f003 	tbb	[pc, r3]
 8007bee:	4e2c      	.short	0x4e2c
 8007bf0:	5a4c      	.short	0x5a4c
 8007bf2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007bf6:	441d      	add	r5, r3
 8007bf8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007bfc:	2b20      	cmp	r3, #32
 8007bfe:	bfc1      	itttt	gt
 8007c00:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007c04:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007c08:	fa09 f303 	lslgt.w	r3, r9, r3
 8007c0c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007c10:	bfda      	itte	le
 8007c12:	f1c3 0320 	rsble	r3, r3, #32
 8007c16:	fa06 f003 	lslle.w	r0, r6, r3
 8007c1a:	4318      	orrgt	r0, r3
 8007c1c:	f7f8 fc92 	bl	8000544 <__aeabi_ui2d>
 8007c20:	2301      	movs	r3, #1
 8007c22:	4606      	mov	r6, r0
 8007c24:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007c28:	3d01      	subs	r5, #1
 8007c2a:	9310      	str	r3, [sp, #64]	; 0x40
 8007c2c:	e771      	b.n	8007b12 <_dtoa_r+0x11a>
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e7b6      	b.n	8007ba0 <_dtoa_r+0x1a8>
 8007c32:	900e      	str	r0, [sp, #56]	; 0x38
 8007c34:	e7b5      	b.n	8007ba2 <_dtoa_r+0x1aa>
 8007c36:	f1ca 0300 	rsb	r3, sl, #0
 8007c3a:	9306      	str	r3, [sp, #24]
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	eba8 080a 	sub.w	r8, r8, sl
 8007c42:	930d      	str	r3, [sp, #52]	; 0x34
 8007c44:	e7c2      	b.n	8007bcc <_dtoa_r+0x1d4>
 8007c46:	2300      	movs	r3, #0
 8007c48:	9308      	str	r3, [sp, #32]
 8007c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	dc39      	bgt.n	8007cc4 <_dtoa_r+0x2cc>
 8007c50:	f04f 0901 	mov.w	r9, #1
 8007c54:	f8cd 9004 	str.w	r9, [sp, #4]
 8007c58:	464b      	mov	r3, r9
 8007c5a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007c5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007c60:	2200      	movs	r2, #0
 8007c62:	6042      	str	r2, [r0, #4]
 8007c64:	2204      	movs	r2, #4
 8007c66:	f102 0614 	add.w	r6, r2, #20
 8007c6a:	429e      	cmp	r6, r3
 8007c6c:	6841      	ldr	r1, [r0, #4]
 8007c6e:	d92f      	bls.n	8007cd0 <_dtoa_r+0x2d8>
 8007c70:	4620      	mov	r0, r4
 8007c72:	f000 fcc7 	bl	8008604 <_Balloc>
 8007c76:	9000      	str	r0, [sp, #0]
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	d14b      	bne.n	8007d14 <_dtoa_r+0x31c>
 8007c7c:	4b24      	ldr	r3, [pc, #144]	; (8007d10 <_dtoa_r+0x318>)
 8007c7e:	4602      	mov	r2, r0
 8007c80:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007c84:	e6d1      	b.n	8007a2a <_dtoa_r+0x32>
 8007c86:	2301      	movs	r3, #1
 8007c88:	e7de      	b.n	8007c48 <_dtoa_r+0x250>
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	9308      	str	r3, [sp, #32]
 8007c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c90:	eb0a 0903 	add.w	r9, sl, r3
 8007c94:	f109 0301 	add.w	r3, r9, #1
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	9301      	str	r3, [sp, #4]
 8007c9c:	bfb8      	it	lt
 8007c9e:	2301      	movlt	r3, #1
 8007ca0:	e7dd      	b.n	8007c5e <_dtoa_r+0x266>
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e7f2      	b.n	8007c8c <_dtoa_r+0x294>
 8007ca6:	2501      	movs	r5, #1
 8007ca8:	2300      	movs	r3, #0
 8007caa:	9305      	str	r3, [sp, #20]
 8007cac:	9508      	str	r5, [sp, #32]
 8007cae:	f04f 39ff 	mov.w	r9, #4294967295
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f8cd 9004 	str.w	r9, [sp, #4]
 8007cb8:	2312      	movs	r3, #18
 8007cba:	9209      	str	r2, [sp, #36]	; 0x24
 8007cbc:	e7cf      	b.n	8007c5e <_dtoa_r+0x266>
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	9308      	str	r3, [sp, #32]
 8007cc2:	e7f4      	b.n	8007cae <_dtoa_r+0x2b6>
 8007cc4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007cc8:	f8cd 9004 	str.w	r9, [sp, #4]
 8007ccc:	464b      	mov	r3, r9
 8007cce:	e7c6      	b.n	8007c5e <_dtoa_r+0x266>
 8007cd0:	3101      	adds	r1, #1
 8007cd2:	6041      	str	r1, [r0, #4]
 8007cd4:	0052      	lsls	r2, r2, #1
 8007cd6:	e7c6      	b.n	8007c66 <_dtoa_r+0x26e>
 8007cd8:	636f4361 	.word	0x636f4361
 8007cdc:	3fd287a7 	.word	0x3fd287a7
 8007ce0:	8b60c8b3 	.word	0x8b60c8b3
 8007ce4:	3fc68a28 	.word	0x3fc68a28
 8007ce8:	509f79fb 	.word	0x509f79fb
 8007cec:	3fd34413 	.word	0x3fd34413
 8007cf0:	08009db9 	.word	0x08009db9
 8007cf4:	08009dd0 	.word	0x08009dd0
 8007cf8:	7ff00000 	.word	0x7ff00000
 8007cfc:	08009db5 	.word	0x08009db5
 8007d00:	08009dac 	.word	0x08009dac
 8007d04:	08009d89 	.word	0x08009d89
 8007d08:	3ff80000 	.word	0x3ff80000
 8007d0c:	08009ec8 	.word	0x08009ec8
 8007d10:	08009e2f 	.word	0x08009e2f
 8007d14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d16:	9a00      	ldr	r2, [sp, #0]
 8007d18:	601a      	str	r2, [r3, #0]
 8007d1a:	9b01      	ldr	r3, [sp, #4]
 8007d1c:	2b0e      	cmp	r3, #14
 8007d1e:	f200 80ad 	bhi.w	8007e7c <_dtoa_r+0x484>
 8007d22:	2d00      	cmp	r5, #0
 8007d24:	f000 80aa 	beq.w	8007e7c <_dtoa_r+0x484>
 8007d28:	f1ba 0f00 	cmp.w	sl, #0
 8007d2c:	dd36      	ble.n	8007d9c <_dtoa_r+0x3a4>
 8007d2e:	4ac3      	ldr	r2, [pc, #780]	; (800803c <_dtoa_r+0x644>)
 8007d30:	f00a 030f 	and.w	r3, sl, #15
 8007d34:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007d38:	ed93 7b00 	vldr	d7, [r3]
 8007d3c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007d40:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007d44:	eeb0 8a47 	vmov.f32	s16, s14
 8007d48:	eef0 8a67 	vmov.f32	s17, s15
 8007d4c:	d016      	beq.n	8007d7c <_dtoa_r+0x384>
 8007d4e:	4bbc      	ldr	r3, [pc, #752]	; (8008040 <_dtoa_r+0x648>)
 8007d50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007d54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d58:	f7f8 fd98 	bl	800088c <__aeabi_ddiv>
 8007d5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d60:	f007 070f 	and.w	r7, r7, #15
 8007d64:	2503      	movs	r5, #3
 8007d66:	4eb6      	ldr	r6, [pc, #728]	; (8008040 <_dtoa_r+0x648>)
 8007d68:	b957      	cbnz	r7, 8007d80 <_dtoa_r+0x388>
 8007d6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d6e:	ec53 2b18 	vmov	r2, r3, d8
 8007d72:	f7f8 fd8b 	bl	800088c <__aeabi_ddiv>
 8007d76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d7a:	e029      	b.n	8007dd0 <_dtoa_r+0x3d8>
 8007d7c:	2502      	movs	r5, #2
 8007d7e:	e7f2      	b.n	8007d66 <_dtoa_r+0x36e>
 8007d80:	07f9      	lsls	r1, r7, #31
 8007d82:	d508      	bpl.n	8007d96 <_dtoa_r+0x39e>
 8007d84:	ec51 0b18 	vmov	r0, r1, d8
 8007d88:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007d8c:	f7f8 fc54 	bl	8000638 <__aeabi_dmul>
 8007d90:	ec41 0b18 	vmov	d8, r0, r1
 8007d94:	3501      	adds	r5, #1
 8007d96:	107f      	asrs	r7, r7, #1
 8007d98:	3608      	adds	r6, #8
 8007d9a:	e7e5      	b.n	8007d68 <_dtoa_r+0x370>
 8007d9c:	f000 80a6 	beq.w	8007eec <_dtoa_r+0x4f4>
 8007da0:	f1ca 0600 	rsb	r6, sl, #0
 8007da4:	4ba5      	ldr	r3, [pc, #660]	; (800803c <_dtoa_r+0x644>)
 8007da6:	4fa6      	ldr	r7, [pc, #664]	; (8008040 <_dtoa_r+0x648>)
 8007da8:	f006 020f 	and.w	r2, r6, #15
 8007dac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007db8:	f7f8 fc3e 	bl	8000638 <__aeabi_dmul>
 8007dbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dc0:	1136      	asrs	r6, r6, #4
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	2502      	movs	r5, #2
 8007dc6:	2e00      	cmp	r6, #0
 8007dc8:	f040 8085 	bne.w	8007ed6 <_dtoa_r+0x4de>
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1d2      	bne.n	8007d76 <_dtoa_r+0x37e>
 8007dd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	f000 808c 	beq.w	8007ef0 <_dtoa_r+0x4f8>
 8007dd8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007ddc:	4b99      	ldr	r3, [pc, #612]	; (8008044 <_dtoa_r+0x64c>)
 8007dde:	2200      	movs	r2, #0
 8007de0:	4630      	mov	r0, r6
 8007de2:	4639      	mov	r1, r7
 8007de4:	f7f8 fe9a 	bl	8000b1c <__aeabi_dcmplt>
 8007de8:	2800      	cmp	r0, #0
 8007dea:	f000 8081 	beq.w	8007ef0 <_dtoa_r+0x4f8>
 8007dee:	9b01      	ldr	r3, [sp, #4]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d07d      	beq.n	8007ef0 <_dtoa_r+0x4f8>
 8007df4:	f1b9 0f00 	cmp.w	r9, #0
 8007df8:	dd3c      	ble.n	8007e74 <_dtoa_r+0x47c>
 8007dfa:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007dfe:	9307      	str	r3, [sp, #28]
 8007e00:	2200      	movs	r2, #0
 8007e02:	4b91      	ldr	r3, [pc, #580]	; (8008048 <_dtoa_r+0x650>)
 8007e04:	4630      	mov	r0, r6
 8007e06:	4639      	mov	r1, r7
 8007e08:	f7f8 fc16 	bl	8000638 <__aeabi_dmul>
 8007e0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e10:	3501      	adds	r5, #1
 8007e12:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007e16:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007e1a:	4628      	mov	r0, r5
 8007e1c:	f7f8 fba2 	bl	8000564 <__aeabi_i2d>
 8007e20:	4632      	mov	r2, r6
 8007e22:	463b      	mov	r3, r7
 8007e24:	f7f8 fc08 	bl	8000638 <__aeabi_dmul>
 8007e28:	4b88      	ldr	r3, [pc, #544]	; (800804c <_dtoa_r+0x654>)
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f7f8 fa4e 	bl	80002cc <__adddf3>
 8007e30:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007e34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e38:	9303      	str	r3, [sp, #12]
 8007e3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d15c      	bne.n	8007efa <_dtoa_r+0x502>
 8007e40:	4b83      	ldr	r3, [pc, #524]	; (8008050 <_dtoa_r+0x658>)
 8007e42:	2200      	movs	r2, #0
 8007e44:	4630      	mov	r0, r6
 8007e46:	4639      	mov	r1, r7
 8007e48:	f7f8 fa3e 	bl	80002c8 <__aeabi_dsub>
 8007e4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e50:	4606      	mov	r6, r0
 8007e52:	460f      	mov	r7, r1
 8007e54:	f7f8 fe80 	bl	8000b58 <__aeabi_dcmpgt>
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	f040 8296 	bne.w	800838a <_dtoa_r+0x992>
 8007e5e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007e62:	4630      	mov	r0, r6
 8007e64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e68:	4639      	mov	r1, r7
 8007e6a:	f7f8 fe57 	bl	8000b1c <__aeabi_dcmplt>
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	f040 8288 	bne.w	8008384 <_dtoa_r+0x98c>
 8007e74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007e78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	f2c0 8158 	blt.w	8008134 <_dtoa_r+0x73c>
 8007e84:	f1ba 0f0e 	cmp.w	sl, #14
 8007e88:	f300 8154 	bgt.w	8008134 <_dtoa_r+0x73c>
 8007e8c:	4b6b      	ldr	r3, [pc, #428]	; (800803c <_dtoa_r+0x644>)
 8007e8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007e92:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f280 80e3 	bge.w	8008064 <_dtoa_r+0x66c>
 8007e9e:	9b01      	ldr	r3, [sp, #4]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f300 80df 	bgt.w	8008064 <_dtoa_r+0x66c>
 8007ea6:	f040 826d 	bne.w	8008384 <_dtoa_r+0x98c>
 8007eaa:	4b69      	ldr	r3, [pc, #420]	; (8008050 <_dtoa_r+0x658>)
 8007eac:	2200      	movs	r2, #0
 8007eae:	4640      	mov	r0, r8
 8007eb0:	4649      	mov	r1, r9
 8007eb2:	f7f8 fbc1 	bl	8000638 <__aeabi_dmul>
 8007eb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007eba:	f7f8 fe43 	bl	8000b44 <__aeabi_dcmpge>
 8007ebe:	9e01      	ldr	r6, [sp, #4]
 8007ec0:	4637      	mov	r7, r6
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	f040 8243 	bne.w	800834e <_dtoa_r+0x956>
 8007ec8:	9d00      	ldr	r5, [sp, #0]
 8007eca:	2331      	movs	r3, #49	; 0x31
 8007ecc:	f805 3b01 	strb.w	r3, [r5], #1
 8007ed0:	f10a 0a01 	add.w	sl, sl, #1
 8007ed4:	e23f      	b.n	8008356 <_dtoa_r+0x95e>
 8007ed6:	07f2      	lsls	r2, r6, #31
 8007ed8:	d505      	bpl.n	8007ee6 <_dtoa_r+0x4ee>
 8007eda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ede:	f7f8 fbab 	bl	8000638 <__aeabi_dmul>
 8007ee2:	3501      	adds	r5, #1
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	1076      	asrs	r6, r6, #1
 8007ee8:	3708      	adds	r7, #8
 8007eea:	e76c      	b.n	8007dc6 <_dtoa_r+0x3ce>
 8007eec:	2502      	movs	r5, #2
 8007eee:	e76f      	b.n	8007dd0 <_dtoa_r+0x3d8>
 8007ef0:	9b01      	ldr	r3, [sp, #4]
 8007ef2:	f8cd a01c 	str.w	sl, [sp, #28]
 8007ef6:	930c      	str	r3, [sp, #48]	; 0x30
 8007ef8:	e78d      	b.n	8007e16 <_dtoa_r+0x41e>
 8007efa:	9900      	ldr	r1, [sp, #0]
 8007efc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007efe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f00:	4b4e      	ldr	r3, [pc, #312]	; (800803c <_dtoa_r+0x644>)
 8007f02:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f06:	4401      	add	r1, r0
 8007f08:	9102      	str	r1, [sp, #8]
 8007f0a:	9908      	ldr	r1, [sp, #32]
 8007f0c:	eeb0 8a47 	vmov.f32	s16, s14
 8007f10:	eef0 8a67 	vmov.f32	s17, s15
 8007f14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f1c:	2900      	cmp	r1, #0
 8007f1e:	d045      	beq.n	8007fac <_dtoa_r+0x5b4>
 8007f20:	494c      	ldr	r1, [pc, #304]	; (8008054 <_dtoa_r+0x65c>)
 8007f22:	2000      	movs	r0, #0
 8007f24:	f7f8 fcb2 	bl	800088c <__aeabi_ddiv>
 8007f28:	ec53 2b18 	vmov	r2, r3, d8
 8007f2c:	f7f8 f9cc 	bl	80002c8 <__aeabi_dsub>
 8007f30:	9d00      	ldr	r5, [sp, #0]
 8007f32:	ec41 0b18 	vmov	d8, r0, r1
 8007f36:	4639      	mov	r1, r7
 8007f38:	4630      	mov	r0, r6
 8007f3a:	f7f8 fe2d 	bl	8000b98 <__aeabi_d2iz>
 8007f3e:	900c      	str	r0, [sp, #48]	; 0x30
 8007f40:	f7f8 fb10 	bl	8000564 <__aeabi_i2d>
 8007f44:	4602      	mov	r2, r0
 8007f46:	460b      	mov	r3, r1
 8007f48:	4630      	mov	r0, r6
 8007f4a:	4639      	mov	r1, r7
 8007f4c:	f7f8 f9bc 	bl	80002c8 <__aeabi_dsub>
 8007f50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f52:	3330      	adds	r3, #48	; 0x30
 8007f54:	f805 3b01 	strb.w	r3, [r5], #1
 8007f58:	ec53 2b18 	vmov	r2, r3, d8
 8007f5c:	4606      	mov	r6, r0
 8007f5e:	460f      	mov	r7, r1
 8007f60:	f7f8 fddc 	bl	8000b1c <__aeabi_dcmplt>
 8007f64:	2800      	cmp	r0, #0
 8007f66:	d165      	bne.n	8008034 <_dtoa_r+0x63c>
 8007f68:	4632      	mov	r2, r6
 8007f6a:	463b      	mov	r3, r7
 8007f6c:	4935      	ldr	r1, [pc, #212]	; (8008044 <_dtoa_r+0x64c>)
 8007f6e:	2000      	movs	r0, #0
 8007f70:	f7f8 f9aa 	bl	80002c8 <__aeabi_dsub>
 8007f74:	ec53 2b18 	vmov	r2, r3, d8
 8007f78:	f7f8 fdd0 	bl	8000b1c <__aeabi_dcmplt>
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	f040 80b9 	bne.w	80080f4 <_dtoa_r+0x6fc>
 8007f82:	9b02      	ldr	r3, [sp, #8]
 8007f84:	429d      	cmp	r5, r3
 8007f86:	f43f af75 	beq.w	8007e74 <_dtoa_r+0x47c>
 8007f8a:	4b2f      	ldr	r3, [pc, #188]	; (8008048 <_dtoa_r+0x650>)
 8007f8c:	ec51 0b18 	vmov	r0, r1, d8
 8007f90:	2200      	movs	r2, #0
 8007f92:	f7f8 fb51 	bl	8000638 <__aeabi_dmul>
 8007f96:	4b2c      	ldr	r3, [pc, #176]	; (8008048 <_dtoa_r+0x650>)
 8007f98:	ec41 0b18 	vmov	d8, r0, r1
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	4630      	mov	r0, r6
 8007fa0:	4639      	mov	r1, r7
 8007fa2:	f7f8 fb49 	bl	8000638 <__aeabi_dmul>
 8007fa6:	4606      	mov	r6, r0
 8007fa8:	460f      	mov	r7, r1
 8007faa:	e7c4      	b.n	8007f36 <_dtoa_r+0x53e>
 8007fac:	ec51 0b17 	vmov	r0, r1, d7
 8007fb0:	f7f8 fb42 	bl	8000638 <__aeabi_dmul>
 8007fb4:	9b02      	ldr	r3, [sp, #8]
 8007fb6:	9d00      	ldr	r5, [sp, #0]
 8007fb8:	930c      	str	r3, [sp, #48]	; 0x30
 8007fba:	ec41 0b18 	vmov	d8, r0, r1
 8007fbe:	4639      	mov	r1, r7
 8007fc0:	4630      	mov	r0, r6
 8007fc2:	f7f8 fde9 	bl	8000b98 <__aeabi_d2iz>
 8007fc6:	9011      	str	r0, [sp, #68]	; 0x44
 8007fc8:	f7f8 facc 	bl	8000564 <__aeabi_i2d>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	4639      	mov	r1, r7
 8007fd4:	f7f8 f978 	bl	80002c8 <__aeabi_dsub>
 8007fd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fda:	3330      	adds	r3, #48	; 0x30
 8007fdc:	f805 3b01 	strb.w	r3, [r5], #1
 8007fe0:	9b02      	ldr	r3, [sp, #8]
 8007fe2:	429d      	cmp	r5, r3
 8007fe4:	4606      	mov	r6, r0
 8007fe6:	460f      	mov	r7, r1
 8007fe8:	f04f 0200 	mov.w	r2, #0
 8007fec:	d134      	bne.n	8008058 <_dtoa_r+0x660>
 8007fee:	4b19      	ldr	r3, [pc, #100]	; (8008054 <_dtoa_r+0x65c>)
 8007ff0:	ec51 0b18 	vmov	r0, r1, d8
 8007ff4:	f7f8 f96a 	bl	80002cc <__adddf3>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	4630      	mov	r0, r6
 8007ffe:	4639      	mov	r1, r7
 8008000:	f7f8 fdaa 	bl	8000b58 <__aeabi_dcmpgt>
 8008004:	2800      	cmp	r0, #0
 8008006:	d175      	bne.n	80080f4 <_dtoa_r+0x6fc>
 8008008:	ec53 2b18 	vmov	r2, r3, d8
 800800c:	4911      	ldr	r1, [pc, #68]	; (8008054 <_dtoa_r+0x65c>)
 800800e:	2000      	movs	r0, #0
 8008010:	f7f8 f95a 	bl	80002c8 <__aeabi_dsub>
 8008014:	4602      	mov	r2, r0
 8008016:	460b      	mov	r3, r1
 8008018:	4630      	mov	r0, r6
 800801a:	4639      	mov	r1, r7
 800801c:	f7f8 fd7e 	bl	8000b1c <__aeabi_dcmplt>
 8008020:	2800      	cmp	r0, #0
 8008022:	f43f af27 	beq.w	8007e74 <_dtoa_r+0x47c>
 8008026:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008028:	1e6b      	subs	r3, r5, #1
 800802a:	930c      	str	r3, [sp, #48]	; 0x30
 800802c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008030:	2b30      	cmp	r3, #48	; 0x30
 8008032:	d0f8      	beq.n	8008026 <_dtoa_r+0x62e>
 8008034:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008038:	e04a      	b.n	80080d0 <_dtoa_r+0x6d8>
 800803a:	bf00      	nop
 800803c:	08009ec8 	.word	0x08009ec8
 8008040:	08009ea0 	.word	0x08009ea0
 8008044:	3ff00000 	.word	0x3ff00000
 8008048:	40240000 	.word	0x40240000
 800804c:	401c0000 	.word	0x401c0000
 8008050:	40140000 	.word	0x40140000
 8008054:	3fe00000 	.word	0x3fe00000
 8008058:	4baf      	ldr	r3, [pc, #700]	; (8008318 <_dtoa_r+0x920>)
 800805a:	f7f8 faed 	bl	8000638 <__aeabi_dmul>
 800805e:	4606      	mov	r6, r0
 8008060:	460f      	mov	r7, r1
 8008062:	e7ac      	b.n	8007fbe <_dtoa_r+0x5c6>
 8008064:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008068:	9d00      	ldr	r5, [sp, #0]
 800806a:	4642      	mov	r2, r8
 800806c:	464b      	mov	r3, r9
 800806e:	4630      	mov	r0, r6
 8008070:	4639      	mov	r1, r7
 8008072:	f7f8 fc0b 	bl	800088c <__aeabi_ddiv>
 8008076:	f7f8 fd8f 	bl	8000b98 <__aeabi_d2iz>
 800807a:	9002      	str	r0, [sp, #8]
 800807c:	f7f8 fa72 	bl	8000564 <__aeabi_i2d>
 8008080:	4642      	mov	r2, r8
 8008082:	464b      	mov	r3, r9
 8008084:	f7f8 fad8 	bl	8000638 <__aeabi_dmul>
 8008088:	4602      	mov	r2, r0
 800808a:	460b      	mov	r3, r1
 800808c:	4630      	mov	r0, r6
 800808e:	4639      	mov	r1, r7
 8008090:	f7f8 f91a 	bl	80002c8 <__aeabi_dsub>
 8008094:	9e02      	ldr	r6, [sp, #8]
 8008096:	9f01      	ldr	r7, [sp, #4]
 8008098:	3630      	adds	r6, #48	; 0x30
 800809a:	f805 6b01 	strb.w	r6, [r5], #1
 800809e:	9e00      	ldr	r6, [sp, #0]
 80080a0:	1bae      	subs	r6, r5, r6
 80080a2:	42b7      	cmp	r7, r6
 80080a4:	4602      	mov	r2, r0
 80080a6:	460b      	mov	r3, r1
 80080a8:	d137      	bne.n	800811a <_dtoa_r+0x722>
 80080aa:	f7f8 f90f 	bl	80002cc <__adddf3>
 80080ae:	4642      	mov	r2, r8
 80080b0:	464b      	mov	r3, r9
 80080b2:	4606      	mov	r6, r0
 80080b4:	460f      	mov	r7, r1
 80080b6:	f7f8 fd4f 	bl	8000b58 <__aeabi_dcmpgt>
 80080ba:	b9c8      	cbnz	r0, 80080f0 <_dtoa_r+0x6f8>
 80080bc:	4642      	mov	r2, r8
 80080be:	464b      	mov	r3, r9
 80080c0:	4630      	mov	r0, r6
 80080c2:	4639      	mov	r1, r7
 80080c4:	f7f8 fd20 	bl	8000b08 <__aeabi_dcmpeq>
 80080c8:	b110      	cbz	r0, 80080d0 <_dtoa_r+0x6d8>
 80080ca:	9b02      	ldr	r3, [sp, #8]
 80080cc:	07d9      	lsls	r1, r3, #31
 80080ce:	d40f      	bmi.n	80080f0 <_dtoa_r+0x6f8>
 80080d0:	4620      	mov	r0, r4
 80080d2:	4659      	mov	r1, fp
 80080d4:	f000 fad6 	bl	8008684 <_Bfree>
 80080d8:	2300      	movs	r3, #0
 80080da:	702b      	strb	r3, [r5, #0]
 80080dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080de:	f10a 0001 	add.w	r0, sl, #1
 80080e2:	6018      	str	r0, [r3, #0]
 80080e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	f43f acd8 	beq.w	8007a9c <_dtoa_r+0xa4>
 80080ec:	601d      	str	r5, [r3, #0]
 80080ee:	e4d5      	b.n	8007a9c <_dtoa_r+0xa4>
 80080f0:	f8cd a01c 	str.w	sl, [sp, #28]
 80080f4:	462b      	mov	r3, r5
 80080f6:	461d      	mov	r5, r3
 80080f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080fc:	2a39      	cmp	r2, #57	; 0x39
 80080fe:	d108      	bne.n	8008112 <_dtoa_r+0x71a>
 8008100:	9a00      	ldr	r2, [sp, #0]
 8008102:	429a      	cmp	r2, r3
 8008104:	d1f7      	bne.n	80080f6 <_dtoa_r+0x6fe>
 8008106:	9a07      	ldr	r2, [sp, #28]
 8008108:	9900      	ldr	r1, [sp, #0]
 800810a:	3201      	adds	r2, #1
 800810c:	9207      	str	r2, [sp, #28]
 800810e:	2230      	movs	r2, #48	; 0x30
 8008110:	700a      	strb	r2, [r1, #0]
 8008112:	781a      	ldrb	r2, [r3, #0]
 8008114:	3201      	adds	r2, #1
 8008116:	701a      	strb	r2, [r3, #0]
 8008118:	e78c      	b.n	8008034 <_dtoa_r+0x63c>
 800811a:	4b7f      	ldr	r3, [pc, #508]	; (8008318 <_dtoa_r+0x920>)
 800811c:	2200      	movs	r2, #0
 800811e:	f7f8 fa8b 	bl	8000638 <__aeabi_dmul>
 8008122:	2200      	movs	r2, #0
 8008124:	2300      	movs	r3, #0
 8008126:	4606      	mov	r6, r0
 8008128:	460f      	mov	r7, r1
 800812a:	f7f8 fced 	bl	8000b08 <__aeabi_dcmpeq>
 800812e:	2800      	cmp	r0, #0
 8008130:	d09b      	beq.n	800806a <_dtoa_r+0x672>
 8008132:	e7cd      	b.n	80080d0 <_dtoa_r+0x6d8>
 8008134:	9a08      	ldr	r2, [sp, #32]
 8008136:	2a00      	cmp	r2, #0
 8008138:	f000 80c4 	beq.w	80082c4 <_dtoa_r+0x8cc>
 800813c:	9a05      	ldr	r2, [sp, #20]
 800813e:	2a01      	cmp	r2, #1
 8008140:	f300 80a8 	bgt.w	8008294 <_dtoa_r+0x89c>
 8008144:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008146:	2a00      	cmp	r2, #0
 8008148:	f000 80a0 	beq.w	800828c <_dtoa_r+0x894>
 800814c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008150:	9e06      	ldr	r6, [sp, #24]
 8008152:	4645      	mov	r5, r8
 8008154:	9a04      	ldr	r2, [sp, #16]
 8008156:	2101      	movs	r1, #1
 8008158:	441a      	add	r2, r3
 800815a:	4620      	mov	r0, r4
 800815c:	4498      	add	r8, r3
 800815e:	9204      	str	r2, [sp, #16]
 8008160:	f000 fb4c 	bl	80087fc <__i2b>
 8008164:	4607      	mov	r7, r0
 8008166:	2d00      	cmp	r5, #0
 8008168:	dd0b      	ble.n	8008182 <_dtoa_r+0x78a>
 800816a:	9b04      	ldr	r3, [sp, #16]
 800816c:	2b00      	cmp	r3, #0
 800816e:	dd08      	ble.n	8008182 <_dtoa_r+0x78a>
 8008170:	42ab      	cmp	r3, r5
 8008172:	9a04      	ldr	r2, [sp, #16]
 8008174:	bfa8      	it	ge
 8008176:	462b      	movge	r3, r5
 8008178:	eba8 0803 	sub.w	r8, r8, r3
 800817c:	1aed      	subs	r5, r5, r3
 800817e:	1ad3      	subs	r3, r2, r3
 8008180:	9304      	str	r3, [sp, #16]
 8008182:	9b06      	ldr	r3, [sp, #24]
 8008184:	b1fb      	cbz	r3, 80081c6 <_dtoa_r+0x7ce>
 8008186:	9b08      	ldr	r3, [sp, #32]
 8008188:	2b00      	cmp	r3, #0
 800818a:	f000 809f 	beq.w	80082cc <_dtoa_r+0x8d4>
 800818e:	2e00      	cmp	r6, #0
 8008190:	dd11      	ble.n	80081b6 <_dtoa_r+0x7be>
 8008192:	4639      	mov	r1, r7
 8008194:	4632      	mov	r2, r6
 8008196:	4620      	mov	r0, r4
 8008198:	f000 fbec 	bl	8008974 <__pow5mult>
 800819c:	465a      	mov	r2, fp
 800819e:	4601      	mov	r1, r0
 80081a0:	4607      	mov	r7, r0
 80081a2:	4620      	mov	r0, r4
 80081a4:	f000 fb40 	bl	8008828 <__multiply>
 80081a8:	4659      	mov	r1, fp
 80081aa:	9007      	str	r0, [sp, #28]
 80081ac:	4620      	mov	r0, r4
 80081ae:	f000 fa69 	bl	8008684 <_Bfree>
 80081b2:	9b07      	ldr	r3, [sp, #28]
 80081b4:	469b      	mov	fp, r3
 80081b6:	9b06      	ldr	r3, [sp, #24]
 80081b8:	1b9a      	subs	r2, r3, r6
 80081ba:	d004      	beq.n	80081c6 <_dtoa_r+0x7ce>
 80081bc:	4659      	mov	r1, fp
 80081be:	4620      	mov	r0, r4
 80081c0:	f000 fbd8 	bl	8008974 <__pow5mult>
 80081c4:	4683      	mov	fp, r0
 80081c6:	2101      	movs	r1, #1
 80081c8:	4620      	mov	r0, r4
 80081ca:	f000 fb17 	bl	80087fc <__i2b>
 80081ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	4606      	mov	r6, r0
 80081d4:	dd7c      	ble.n	80082d0 <_dtoa_r+0x8d8>
 80081d6:	461a      	mov	r2, r3
 80081d8:	4601      	mov	r1, r0
 80081da:	4620      	mov	r0, r4
 80081dc:	f000 fbca 	bl	8008974 <__pow5mult>
 80081e0:	9b05      	ldr	r3, [sp, #20]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	4606      	mov	r6, r0
 80081e6:	dd76      	ble.n	80082d6 <_dtoa_r+0x8de>
 80081e8:	2300      	movs	r3, #0
 80081ea:	9306      	str	r3, [sp, #24]
 80081ec:	6933      	ldr	r3, [r6, #16]
 80081ee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80081f2:	6918      	ldr	r0, [r3, #16]
 80081f4:	f000 fab2 	bl	800875c <__hi0bits>
 80081f8:	f1c0 0020 	rsb	r0, r0, #32
 80081fc:	9b04      	ldr	r3, [sp, #16]
 80081fe:	4418      	add	r0, r3
 8008200:	f010 001f 	ands.w	r0, r0, #31
 8008204:	f000 8086 	beq.w	8008314 <_dtoa_r+0x91c>
 8008208:	f1c0 0320 	rsb	r3, r0, #32
 800820c:	2b04      	cmp	r3, #4
 800820e:	dd7f      	ble.n	8008310 <_dtoa_r+0x918>
 8008210:	f1c0 001c 	rsb	r0, r0, #28
 8008214:	9b04      	ldr	r3, [sp, #16]
 8008216:	4403      	add	r3, r0
 8008218:	4480      	add	r8, r0
 800821a:	4405      	add	r5, r0
 800821c:	9304      	str	r3, [sp, #16]
 800821e:	f1b8 0f00 	cmp.w	r8, #0
 8008222:	dd05      	ble.n	8008230 <_dtoa_r+0x838>
 8008224:	4659      	mov	r1, fp
 8008226:	4642      	mov	r2, r8
 8008228:	4620      	mov	r0, r4
 800822a:	f000 fbfd 	bl	8008a28 <__lshift>
 800822e:	4683      	mov	fp, r0
 8008230:	9b04      	ldr	r3, [sp, #16]
 8008232:	2b00      	cmp	r3, #0
 8008234:	dd05      	ble.n	8008242 <_dtoa_r+0x84a>
 8008236:	4631      	mov	r1, r6
 8008238:	461a      	mov	r2, r3
 800823a:	4620      	mov	r0, r4
 800823c:	f000 fbf4 	bl	8008a28 <__lshift>
 8008240:	4606      	mov	r6, r0
 8008242:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008244:	2b00      	cmp	r3, #0
 8008246:	d069      	beq.n	800831c <_dtoa_r+0x924>
 8008248:	4631      	mov	r1, r6
 800824a:	4658      	mov	r0, fp
 800824c:	f000 fc58 	bl	8008b00 <__mcmp>
 8008250:	2800      	cmp	r0, #0
 8008252:	da63      	bge.n	800831c <_dtoa_r+0x924>
 8008254:	2300      	movs	r3, #0
 8008256:	4659      	mov	r1, fp
 8008258:	220a      	movs	r2, #10
 800825a:	4620      	mov	r0, r4
 800825c:	f000 fa34 	bl	80086c8 <__multadd>
 8008260:	9b08      	ldr	r3, [sp, #32]
 8008262:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008266:	4683      	mov	fp, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	f000 818f 	beq.w	800858c <_dtoa_r+0xb94>
 800826e:	4639      	mov	r1, r7
 8008270:	2300      	movs	r3, #0
 8008272:	220a      	movs	r2, #10
 8008274:	4620      	mov	r0, r4
 8008276:	f000 fa27 	bl	80086c8 <__multadd>
 800827a:	f1b9 0f00 	cmp.w	r9, #0
 800827e:	4607      	mov	r7, r0
 8008280:	f300 808e 	bgt.w	80083a0 <_dtoa_r+0x9a8>
 8008284:	9b05      	ldr	r3, [sp, #20]
 8008286:	2b02      	cmp	r3, #2
 8008288:	dc50      	bgt.n	800832c <_dtoa_r+0x934>
 800828a:	e089      	b.n	80083a0 <_dtoa_r+0x9a8>
 800828c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800828e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008292:	e75d      	b.n	8008150 <_dtoa_r+0x758>
 8008294:	9b01      	ldr	r3, [sp, #4]
 8008296:	1e5e      	subs	r6, r3, #1
 8008298:	9b06      	ldr	r3, [sp, #24]
 800829a:	42b3      	cmp	r3, r6
 800829c:	bfbf      	itttt	lt
 800829e:	9b06      	ldrlt	r3, [sp, #24]
 80082a0:	9606      	strlt	r6, [sp, #24]
 80082a2:	1af2      	sublt	r2, r6, r3
 80082a4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80082a6:	bfb6      	itet	lt
 80082a8:	189b      	addlt	r3, r3, r2
 80082aa:	1b9e      	subge	r6, r3, r6
 80082ac:	930d      	strlt	r3, [sp, #52]	; 0x34
 80082ae:	9b01      	ldr	r3, [sp, #4]
 80082b0:	bfb8      	it	lt
 80082b2:	2600      	movlt	r6, #0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	bfb5      	itete	lt
 80082b8:	eba8 0503 	sublt.w	r5, r8, r3
 80082bc:	9b01      	ldrge	r3, [sp, #4]
 80082be:	2300      	movlt	r3, #0
 80082c0:	4645      	movge	r5, r8
 80082c2:	e747      	b.n	8008154 <_dtoa_r+0x75c>
 80082c4:	9e06      	ldr	r6, [sp, #24]
 80082c6:	9f08      	ldr	r7, [sp, #32]
 80082c8:	4645      	mov	r5, r8
 80082ca:	e74c      	b.n	8008166 <_dtoa_r+0x76e>
 80082cc:	9a06      	ldr	r2, [sp, #24]
 80082ce:	e775      	b.n	80081bc <_dtoa_r+0x7c4>
 80082d0:	9b05      	ldr	r3, [sp, #20]
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	dc18      	bgt.n	8008308 <_dtoa_r+0x910>
 80082d6:	9b02      	ldr	r3, [sp, #8]
 80082d8:	b9b3      	cbnz	r3, 8008308 <_dtoa_r+0x910>
 80082da:	9b03      	ldr	r3, [sp, #12]
 80082dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082e0:	b9a3      	cbnz	r3, 800830c <_dtoa_r+0x914>
 80082e2:	9b03      	ldr	r3, [sp, #12]
 80082e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80082e8:	0d1b      	lsrs	r3, r3, #20
 80082ea:	051b      	lsls	r3, r3, #20
 80082ec:	b12b      	cbz	r3, 80082fa <_dtoa_r+0x902>
 80082ee:	9b04      	ldr	r3, [sp, #16]
 80082f0:	3301      	adds	r3, #1
 80082f2:	9304      	str	r3, [sp, #16]
 80082f4:	f108 0801 	add.w	r8, r8, #1
 80082f8:	2301      	movs	r3, #1
 80082fa:	9306      	str	r3, [sp, #24]
 80082fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f47f af74 	bne.w	80081ec <_dtoa_r+0x7f4>
 8008304:	2001      	movs	r0, #1
 8008306:	e779      	b.n	80081fc <_dtoa_r+0x804>
 8008308:	2300      	movs	r3, #0
 800830a:	e7f6      	b.n	80082fa <_dtoa_r+0x902>
 800830c:	9b02      	ldr	r3, [sp, #8]
 800830e:	e7f4      	b.n	80082fa <_dtoa_r+0x902>
 8008310:	d085      	beq.n	800821e <_dtoa_r+0x826>
 8008312:	4618      	mov	r0, r3
 8008314:	301c      	adds	r0, #28
 8008316:	e77d      	b.n	8008214 <_dtoa_r+0x81c>
 8008318:	40240000 	.word	0x40240000
 800831c:	9b01      	ldr	r3, [sp, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	dc38      	bgt.n	8008394 <_dtoa_r+0x99c>
 8008322:	9b05      	ldr	r3, [sp, #20]
 8008324:	2b02      	cmp	r3, #2
 8008326:	dd35      	ble.n	8008394 <_dtoa_r+0x99c>
 8008328:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800832c:	f1b9 0f00 	cmp.w	r9, #0
 8008330:	d10d      	bne.n	800834e <_dtoa_r+0x956>
 8008332:	4631      	mov	r1, r6
 8008334:	464b      	mov	r3, r9
 8008336:	2205      	movs	r2, #5
 8008338:	4620      	mov	r0, r4
 800833a:	f000 f9c5 	bl	80086c8 <__multadd>
 800833e:	4601      	mov	r1, r0
 8008340:	4606      	mov	r6, r0
 8008342:	4658      	mov	r0, fp
 8008344:	f000 fbdc 	bl	8008b00 <__mcmp>
 8008348:	2800      	cmp	r0, #0
 800834a:	f73f adbd 	bgt.w	8007ec8 <_dtoa_r+0x4d0>
 800834e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008350:	9d00      	ldr	r5, [sp, #0]
 8008352:	ea6f 0a03 	mvn.w	sl, r3
 8008356:	f04f 0800 	mov.w	r8, #0
 800835a:	4631      	mov	r1, r6
 800835c:	4620      	mov	r0, r4
 800835e:	f000 f991 	bl	8008684 <_Bfree>
 8008362:	2f00      	cmp	r7, #0
 8008364:	f43f aeb4 	beq.w	80080d0 <_dtoa_r+0x6d8>
 8008368:	f1b8 0f00 	cmp.w	r8, #0
 800836c:	d005      	beq.n	800837a <_dtoa_r+0x982>
 800836e:	45b8      	cmp	r8, r7
 8008370:	d003      	beq.n	800837a <_dtoa_r+0x982>
 8008372:	4641      	mov	r1, r8
 8008374:	4620      	mov	r0, r4
 8008376:	f000 f985 	bl	8008684 <_Bfree>
 800837a:	4639      	mov	r1, r7
 800837c:	4620      	mov	r0, r4
 800837e:	f000 f981 	bl	8008684 <_Bfree>
 8008382:	e6a5      	b.n	80080d0 <_dtoa_r+0x6d8>
 8008384:	2600      	movs	r6, #0
 8008386:	4637      	mov	r7, r6
 8008388:	e7e1      	b.n	800834e <_dtoa_r+0x956>
 800838a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800838c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008390:	4637      	mov	r7, r6
 8008392:	e599      	b.n	8007ec8 <_dtoa_r+0x4d0>
 8008394:	9b08      	ldr	r3, [sp, #32]
 8008396:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	f000 80fd 	beq.w	800859a <_dtoa_r+0xba2>
 80083a0:	2d00      	cmp	r5, #0
 80083a2:	dd05      	ble.n	80083b0 <_dtoa_r+0x9b8>
 80083a4:	4639      	mov	r1, r7
 80083a6:	462a      	mov	r2, r5
 80083a8:	4620      	mov	r0, r4
 80083aa:	f000 fb3d 	bl	8008a28 <__lshift>
 80083ae:	4607      	mov	r7, r0
 80083b0:	9b06      	ldr	r3, [sp, #24]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d05c      	beq.n	8008470 <_dtoa_r+0xa78>
 80083b6:	6879      	ldr	r1, [r7, #4]
 80083b8:	4620      	mov	r0, r4
 80083ba:	f000 f923 	bl	8008604 <_Balloc>
 80083be:	4605      	mov	r5, r0
 80083c0:	b928      	cbnz	r0, 80083ce <_dtoa_r+0x9d6>
 80083c2:	4b80      	ldr	r3, [pc, #512]	; (80085c4 <_dtoa_r+0xbcc>)
 80083c4:	4602      	mov	r2, r0
 80083c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80083ca:	f7ff bb2e 	b.w	8007a2a <_dtoa_r+0x32>
 80083ce:	693a      	ldr	r2, [r7, #16]
 80083d0:	3202      	adds	r2, #2
 80083d2:	0092      	lsls	r2, r2, #2
 80083d4:	f107 010c 	add.w	r1, r7, #12
 80083d8:	300c      	adds	r0, #12
 80083da:	f000 f905 	bl	80085e8 <memcpy>
 80083de:	2201      	movs	r2, #1
 80083e0:	4629      	mov	r1, r5
 80083e2:	4620      	mov	r0, r4
 80083e4:	f000 fb20 	bl	8008a28 <__lshift>
 80083e8:	9b00      	ldr	r3, [sp, #0]
 80083ea:	3301      	adds	r3, #1
 80083ec:	9301      	str	r3, [sp, #4]
 80083ee:	9b00      	ldr	r3, [sp, #0]
 80083f0:	444b      	add	r3, r9
 80083f2:	9307      	str	r3, [sp, #28]
 80083f4:	9b02      	ldr	r3, [sp, #8]
 80083f6:	f003 0301 	and.w	r3, r3, #1
 80083fa:	46b8      	mov	r8, r7
 80083fc:	9306      	str	r3, [sp, #24]
 80083fe:	4607      	mov	r7, r0
 8008400:	9b01      	ldr	r3, [sp, #4]
 8008402:	4631      	mov	r1, r6
 8008404:	3b01      	subs	r3, #1
 8008406:	4658      	mov	r0, fp
 8008408:	9302      	str	r3, [sp, #8]
 800840a:	f7ff fa67 	bl	80078dc <quorem>
 800840e:	4603      	mov	r3, r0
 8008410:	3330      	adds	r3, #48	; 0x30
 8008412:	9004      	str	r0, [sp, #16]
 8008414:	4641      	mov	r1, r8
 8008416:	4658      	mov	r0, fp
 8008418:	9308      	str	r3, [sp, #32]
 800841a:	f000 fb71 	bl	8008b00 <__mcmp>
 800841e:	463a      	mov	r2, r7
 8008420:	4681      	mov	r9, r0
 8008422:	4631      	mov	r1, r6
 8008424:	4620      	mov	r0, r4
 8008426:	f000 fb87 	bl	8008b38 <__mdiff>
 800842a:	68c2      	ldr	r2, [r0, #12]
 800842c:	9b08      	ldr	r3, [sp, #32]
 800842e:	4605      	mov	r5, r0
 8008430:	bb02      	cbnz	r2, 8008474 <_dtoa_r+0xa7c>
 8008432:	4601      	mov	r1, r0
 8008434:	4658      	mov	r0, fp
 8008436:	f000 fb63 	bl	8008b00 <__mcmp>
 800843a:	9b08      	ldr	r3, [sp, #32]
 800843c:	4602      	mov	r2, r0
 800843e:	4629      	mov	r1, r5
 8008440:	4620      	mov	r0, r4
 8008442:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008446:	f000 f91d 	bl	8008684 <_Bfree>
 800844a:	9b05      	ldr	r3, [sp, #20]
 800844c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800844e:	9d01      	ldr	r5, [sp, #4]
 8008450:	ea43 0102 	orr.w	r1, r3, r2
 8008454:	9b06      	ldr	r3, [sp, #24]
 8008456:	430b      	orrs	r3, r1
 8008458:	9b08      	ldr	r3, [sp, #32]
 800845a:	d10d      	bne.n	8008478 <_dtoa_r+0xa80>
 800845c:	2b39      	cmp	r3, #57	; 0x39
 800845e:	d029      	beq.n	80084b4 <_dtoa_r+0xabc>
 8008460:	f1b9 0f00 	cmp.w	r9, #0
 8008464:	dd01      	ble.n	800846a <_dtoa_r+0xa72>
 8008466:	9b04      	ldr	r3, [sp, #16]
 8008468:	3331      	adds	r3, #49	; 0x31
 800846a:	9a02      	ldr	r2, [sp, #8]
 800846c:	7013      	strb	r3, [r2, #0]
 800846e:	e774      	b.n	800835a <_dtoa_r+0x962>
 8008470:	4638      	mov	r0, r7
 8008472:	e7b9      	b.n	80083e8 <_dtoa_r+0x9f0>
 8008474:	2201      	movs	r2, #1
 8008476:	e7e2      	b.n	800843e <_dtoa_r+0xa46>
 8008478:	f1b9 0f00 	cmp.w	r9, #0
 800847c:	db06      	blt.n	800848c <_dtoa_r+0xa94>
 800847e:	9905      	ldr	r1, [sp, #20]
 8008480:	ea41 0909 	orr.w	r9, r1, r9
 8008484:	9906      	ldr	r1, [sp, #24]
 8008486:	ea59 0101 	orrs.w	r1, r9, r1
 800848a:	d120      	bne.n	80084ce <_dtoa_r+0xad6>
 800848c:	2a00      	cmp	r2, #0
 800848e:	ddec      	ble.n	800846a <_dtoa_r+0xa72>
 8008490:	4659      	mov	r1, fp
 8008492:	2201      	movs	r2, #1
 8008494:	4620      	mov	r0, r4
 8008496:	9301      	str	r3, [sp, #4]
 8008498:	f000 fac6 	bl	8008a28 <__lshift>
 800849c:	4631      	mov	r1, r6
 800849e:	4683      	mov	fp, r0
 80084a0:	f000 fb2e 	bl	8008b00 <__mcmp>
 80084a4:	2800      	cmp	r0, #0
 80084a6:	9b01      	ldr	r3, [sp, #4]
 80084a8:	dc02      	bgt.n	80084b0 <_dtoa_r+0xab8>
 80084aa:	d1de      	bne.n	800846a <_dtoa_r+0xa72>
 80084ac:	07da      	lsls	r2, r3, #31
 80084ae:	d5dc      	bpl.n	800846a <_dtoa_r+0xa72>
 80084b0:	2b39      	cmp	r3, #57	; 0x39
 80084b2:	d1d8      	bne.n	8008466 <_dtoa_r+0xa6e>
 80084b4:	9a02      	ldr	r2, [sp, #8]
 80084b6:	2339      	movs	r3, #57	; 0x39
 80084b8:	7013      	strb	r3, [r2, #0]
 80084ba:	462b      	mov	r3, r5
 80084bc:	461d      	mov	r5, r3
 80084be:	3b01      	subs	r3, #1
 80084c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80084c4:	2a39      	cmp	r2, #57	; 0x39
 80084c6:	d050      	beq.n	800856a <_dtoa_r+0xb72>
 80084c8:	3201      	adds	r2, #1
 80084ca:	701a      	strb	r2, [r3, #0]
 80084cc:	e745      	b.n	800835a <_dtoa_r+0x962>
 80084ce:	2a00      	cmp	r2, #0
 80084d0:	dd03      	ble.n	80084da <_dtoa_r+0xae2>
 80084d2:	2b39      	cmp	r3, #57	; 0x39
 80084d4:	d0ee      	beq.n	80084b4 <_dtoa_r+0xabc>
 80084d6:	3301      	adds	r3, #1
 80084d8:	e7c7      	b.n	800846a <_dtoa_r+0xa72>
 80084da:	9a01      	ldr	r2, [sp, #4]
 80084dc:	9907      	ldr	r1, [sp, #28]
 80084de:	f802 3c01 	strb.w	r3, [r2, #-1]
 80084e2:	428a      	cmp	r2, r1
 80084e4:	d02a      	beq.n	800853c <_dtoa_r+0xb44>
 80084e6:	4659      	mov	r1, fp
 80084e8:	2300      	movs	r3, #0
 80084ea:	220a      	movs	r2, #10
 80084ec:	4620      	mov	r0, r4
 80084ee:	f000 f8eb 	bl	80086c8 <__multadd>
 80084f2:	45b8      	cmp	r8, r7
 80084f4:	4683      	mov	fp, r0
 80084f6:	f04f 0300 	mov.w	r3, #0
 80084fa:	f04f 020a 	mov.w	r2, #10
 80084fe:	4641      	mov	r1, r8
 8008500:	4620      	mov	r0, r4
 8008502:	d107      	bne.n	8008514 <_dtoa_r+0xb1c>
 8008504:	f000 f8e0 	bl	80086c8 <__multadd>
 8008508:	4680      	mov	r8, r0
 800850a:	4607      	mov	r7, r0
 800850c:	9b01      	ldr	r3, [sp, #4]
 800850e:	3301      	adds	r3, #1
 8008510:	9301      	str	r3, [sp, #4]
 8008512:	e775      	b.n	8008400 <_dtoa_r+0xa08>
 8008514:	f000 f8d8 	bl	80086c8 <__multadd>
 8008518:	4639      	mov	r1, r7
 800851a:	4680      	mov	r8, r0
 800851c:	2300      	movs	r3, #0
 800851e:	220a      	movs	r2, #10
 8008520:	4620      	mov	r0, r4
 8008522:	f000 f8d1 	bl	80086c8 <__multadd>
 8008526:	4607      	mov	r7, r0
 8008528:	e7f0      	b.n	800850c <_dtoa_r+0xb14>
 800852a:	f1b9 0f00 	cmp.w	r9, #0
 800852e:	9a00      	ldr	r2, [sp, #0]
 8008530:	bfcc      	ite	gt
 8008532:	464d      	movgt	r5, r9
 8008534:	2501      	movle	r5, #1
 8008536:	4415      	add	r5, r2
 8008538:	f04f 0800 	mov.w	r8, #0
 800853c:	4659      	mov	r1, fp
 800853e:	2201      	movs	r2, #1
 8008540:	4620      	mov	r0, r4
 8008542:	9301      	str	r3, [sp, #4]
 8008544:	f000 fa70 	bl	8008a28 <__lshift>
 8008548:	4631      	mov	r1, r6
 800854a:	4683      	mov	fp, r0
 800854c:	f000 fad8 	bl	8008b00 <__mcmp>
 8008550:	2800      	cmp	r0, #0
 8008552:	dcb2      	bgt.n	80084ba <_dtoa_r+0xac2>
 8008554:	d102      	bne.n	800855c <_dtoa_r+0xb64>
 8008556:	9b01      	ldr	r3, [sp, #4]
 8008558:	07db      	lsls	r3, r3, #31
 800855a:	d4ae      	bmi.n	80084ba <_dtoa_r+0xac2>
 800855c:	462b      	mov	r3, r5
 800855e:	461d      	mov	r5, r3
 8008560:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008564:	2a30      	cmp	r2, #48	; 0x30
 8008566:	d0fa      	beq.n	800855e <_dtoa_r+0xb66>
 8008568:	e6f7      	b.n	800835a <_dtoa_r+0x962>
 800856a:	9a00      	ldr	r2, [sp, #0]
 800856c:	429a      	cmp	r2, r3
 800856e:	d1a5      	bne.n	80084bc <_dtoa_r+0xac4>
 8008570:	f10a 0a01 	add.w	sl, sl, #1
 8008574:	2331      	movs	r3, #49	; 0x31
 8008576:	e779      	b.n	800846c <_dtoa_r+0xa74>
 8008578:	4b13      	ldr	r3, [pc, #76]	; (80085c8 <_dtoa_r+0xbd0>)
 800857a:	f7ff baaf 	b.w	8007adc <_dtoa_r+0xe4>
 800857e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008580:	2b00      	cmp	r3, #0
 8008582:	f47f aa86 	bne.w	8007a92 <_dtoa_r+0x9a>
 8008586:	4b11      	ldr	r3, [pc, #68]	; (80085cc <_dtoa_r+0xbd4>)
 8008588:	f7ff baa8 	b.w	8007adc <_dtoa_r+0xe4>
 800858c:	f1b9 0f00 	cmp.w	r9, #0
 8008590:	dc03      	bgt.n	800859a <_dtoa_r+0xba2>
 8008592:	9b05      	ldr	r3, [sp, #20]
 8008594:	2b02      	cmp	r3, #2
 8008596:	f73f aec9 	bgt.w	800832c <_dtoa_r+0x934>
 800859a:	9d00      	ldr	r5, [sp, #0]
 800859c:	4631      	mov	r1, r6
 800859e:	4658      	mov	r0, fp
 80085a0:	f7ff f99c 	bl	80078dc <quorem>
 80085a4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80085a8:	f805 3b01 	strb.w	r3, [r5], #1
 80085ac:	9a00      	ldr	r2, [sp, #0]
 80085ae:	1aaa      	subs	r2, r5, r2
 80085b0:	4591      	cmp	r9, r2
 80085b2:	ddba      	ble.n	800852a <_dtoa_r+0xb32>
 80085b4:	4659      	mov	r1, fp
 80085b6:	2300      	movs	r3, #0
 80085b8:	220a      	movs	r2, #10
 80085ba:	4620      	mov	r0, r4
 80085bc:	f000 f884 	bl	80086c8 <__multadd>
 80085c0:	4683      	mov	fp, r0
 80085c2:	e7eb      	b.n	800859c <_dtoa_r+0xba4>
 80085c4:	08009e2f 	.word	0x08009e2f
 80085c8:	08009d88 	.word	0x08009d88
 80085cc:	08009dac 	.word	0x08009dac

080085d0 <_localeconv_r>:
 80085d0:	4800      	ldr	r0, [pc, #0]	; (80085d4 <_localeconv_r+0x4>)
 80085d2:	4770      	bx	lr
 80085d4:	20000164 	.word	0x20000164

080085d8 <malloc>:
 80085d8:	4b02      	ldr	r3, [pc, #8]	; (80085e4 <malloc+0xc>)
 80085da:	4601      	mov	r1, r0
 80085dc:	6818      	ldr	r0, [r3, #0]
 80085de:	f000 bbef 	b.w	8008dc0 <_malloc_r>
 80085e2:	bf00      	nop
 80085e4:	20000010 	.word	0x20000010

080085e8 <memcpy>:
 80085e8:	440a      	add	r2, r1
 80085ea:	4291      	cmp	r1, r2
 80085ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80085f0:	d100      	bne.n	80085f4 <memcpy+0xc>
 80085f2:	4770      	bx	lr
 80085f4:	b510      	push	{r4, lr}
 80085f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085fe:	4291      	cmp	r1, r2
 8008600:	d1f9      	bne.n	80085f6 <memcpy+0xe>
 8008602:	bd10      	pop	{r4, pc}

08008604 <_Balloc>:
 8008604:	b570      	push	{r4, r5, r6, lr}
 8008606:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008608:	4604      	mov	r4, r0
 800860a:	460d      	mov	r5, r1
 800860c:	b976      	cbnz	r6, 800862c <_Balloc+0x28>
 800860e:	2010      	movs	r0, #16
 8008610:	f7ff ffe2 	bl	80085d8 <malloc>
 8008614:	4602      	mov	r2, r0
 8008616:	6260      	str	r0, [r4, #36]	; 0x24
 8008618:	b920      	cbnz	r0, 8008624 <_Balloc+0x20>
 800861a:	4b18      	ldr	r3, [pc, #96]	; (800867c <_Balloc+0x78>)
 800861c:	4818      	ldr	r0, [pc, #96]	; (8008680 <_Balloc+0x7c>)
 800861e:	2166      	movs	r1, #102	; 0x66
 8008620:	f000 fd94 	bl	800914c <__assert_func>
 8008624:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008628:	6006      	str	r6, [r0, #0]
 800862a:	60c6      	str	r6, [r0, #12]
 800862c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800862e:	68f3      	ldr	r3, [r6, #12]
 8008630:	b183      	cbz	r3, 8008654 <_Balloc+0x50>
 8008632:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800863a:	b9b8      	cbnz	r0, 800866c <_Balloc+0x68>
 800863c:	2101      	movs	r1, #1
 800863e:	fa01 f605 	lsl.w	r6, r1, r5
 8008642:	1d72      	adds	r2, r6, #5
 8008644:	0092      	lsls	r2, r2, #2
 8008646:	4620      	mov	r0, r4
 8008648:	f000 fb5a 	bl	8008d00 <_calloc_r>
 800864c:	b160      	cbz	r0, 8008668 <_Balloc+0x64>
 800864e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008652:	e00e      	b.n	8008672 <_Balloc+0x6e>
 8008654:	2221      	movs	r2, #33	; 0x21
 8008656:	2104      	movs	r1, #4
 8008658:	4620      	mov	r0, r4
 800865a:	f000 fb51 	bl	8008d00 <_calloc_r>
 800865e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008660:	60f0      	str	r0, [r6, #12]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d1e4      	bne.n	8008632 <_Balloc+0x2e>
 8008668:	2000      	movs	r0, #0
 800866a:	bd70      	pop	{r4, r5, r6, pc}
 800866c:	6802      	ldr	r2, [r0, #0]
 800866e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008672:	2300      	movs	r3, #0
 8008674:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008678:	e7f7      	b.n	800866a <_Balloc+0x66>
 800867a:	bf00      	nop
 800867c:	08009db9 	.word	0x08009db9
 8008680:	08009e40 	.word	0x08009e40

08008684 <_Bfree>:
 8008684:	b570      	push	{r4, r5, r6, lr}
 8008686:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008688:	4605      	mov	r5, r0
 800868a:	460c      	mov	r4, r1
 800868c:	b976      	cbnz	r6, 80086ac <_Bfree+0x28>
 800868e:	2010      	movs	r0, #16
 8008690:	f7ff ffa2 	bl	80085d8 <malloc>
 8008694:	4602      	mov	r2, r0
 8008696:	6268      	str	r0, [r5, #36]	; 0x24
 8008698:	b920      	cbnz	r0, 80086a4 <_Bfree+0x20>
 800869a:	4b09      	ldr	r3, [pc, #36]	; (80086c0 <_Bfree+0x3c>)
 800869c:	4809      	ldr	r0, [pc, #36]	; (80086c4 <_Bfree+0x40>)
 800869e:	218a      	movs	r1, #138	; 0x8a
 80086a0:	f000 fd54 	bl	800914c <__assert_func>
 80086a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086a8:	6006      	str	r6, [r0, #0]
 80086aa:	60c6      	str	r6, [r0, #12]
 80086ac:	b13c      	cbz	r4, 80086be <_Bfree+0x3a>
 80086ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80086b0:	6862      	ldr	r2, [r4, #4]
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086b8:	6021      	str	r1, [r4, #0]
 80086ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80086be:	bd70      	pop	{r4, r5, r6, pc}
 80086c0:	08009db9 	.word	0x08009db9
 80086c4:	08009e40 	.word	0x08009e40

080086c8 <__multadd>:
 80086c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086cc:	690e      	ldr	r6, [r1, #16]
 80086ce:	4607      	mov	r7, r0
 80086d0:	4698      	mov	r8, r3
 80086d2:	460c      	mov	r4, r1
 80086d4:	f101 0014 	add.w	r0, r1, #20
 80086d8:	2300      	movs	r3, #0
 80086da:	6805      	ldr	r5, [r0, #0]
 80086dc:	b2a9      	uxth	r1, r5
 80086de:	fb02 8101 	mla	r1, r2, r1, r8
 80086e2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80086e6:	0c2d      	lsrs	r5, r5, #16
 80086e8:	fb02 c505 	mla	r5, r2, r5, ip
 80086ec:	b289      	uxth	r1, r1
 80086ee:	3301      	adds	r3, #1
 80086f0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80086f4:	429e      	cmp	r6, r3
 80086f6:	f840 1b04 	str.w	r1, [r0], #4
 80086fa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80086fe:	dcec      	bgt.n	80086da <__multadd+0x12>
 8008700:	f1b8 0f00 	cmp.w	r8, #0
 8008704:	d022      	beq.n	800874c <__multadd+0x84>
 8008706:	68a3      	ldr	r3, [r4, #8]
 8008708:	42b3      	cmp	r3, r6
 800870a:	dc19      	bgt.n	8008740 <__multadd+0x78>
 800870c:	6861      	ldr	r1, [r4, #4]
 800870e:	4638      	mov	r0, r7
 8008710:	3101      	adds	r1, #1
 8008712:	f7ff ff77 	bl	8008604 <_Balloc>
 8008716:	4605      	mov	r5, r0
 8008718:	b928      	cbnz	r0, 8008726 <__multadd+0x5e>
 800871a:	4602      	mov	r2, r0
 800871c:	4b0d      	ldr	r3, [pc, #52]	; (8008754 <__multadd+0x8c>)
 800871e:	480e      	ldr	r0, [pc, #56]	; (8008758 <__multadd+0x90>)
 8008720:	21b5      	movs	r1, #181	; 0xb5
 8008722:	f000 fd13 	bl	800914c <__assert_func>
 8008726:	6922      	ldr	r2, [r4, #16]
 8008728:	3202      	adds	r2, #2
 800872a:	f104 010c 	add.w	r1, r4, #12
 800872e:	0092      	lsls	r2, r2, #2
 8008730:	300c      	adds	r0, #12
 8008732:	f7ff ff59 	bl	80085e8 <memcpy>
 8008736:	4621      	mov	r1, r4
 8008738:	4638      	mov	r0, r7
 800873a:	f7ff ffa3 	bl	8008684 <_Bfree>
 800873e:	462c      	mov	r4, r5
 8008740:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008744:	3601      	adds	r6, #1
 8008746:	f8c3 8014 	str.w	r8, [r3, #20]
 800874a:	6126      	str	r6, [r4, #16]
 800874c:	4620      	mov	r0, r4
 800874e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008752:	bf00      	nop
 8008754:	08009e2f 	.word	0x08009e2f
 8008758:	08009e40 	.word	0x08009e40

0800875c <__hi0bits>:
 800875c:	0c03      	lsrs	r3, r0, #16
 800875e:	041b      	lsls	r3, r3, #16
 8008760:	b9d3      	cbnz	r3, 8008798 <__hi0bits+0x3c>
 8008762:	0400      	lsls	r0, r0, #16
 8008764:	2310      	movs	r3, #16
 8008766:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800876a:	bf04      	itt	eq
 800876c:	0200      	lsleq	r0, r0, #8
 800876e:	3308      	addeq	r3, #8
 8008770:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008774:	bf04      	itt	eq
 8008776:	0100      	lsleq	r0, r0, #4
 8008778:	3304      	addeq	r3, #4
 800877a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800877e:	bf04      	itt	eq
 8008780:	0080      	lsleq	r0, r0, #2
 8008782:	3302      	addeq	r3, #2
 8008784:	2800      	cmp	r0, #0
 8008786:	db05      	blt.n	8008794 <__hi0bits+0x38>
 8008788:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800878c:	f103 0301 	add.w	r3, r3, #1
 8008790:	bf08      	it	eq
 8008792:	2320      	moveq	r3, #32
 8008794:	4618      	mov	r0, r3
 8008796:	4770      	bx	lr
 8008798:	2300      	movs	r3, #0
 800879a:	e7e4      	b.n	8008766 <__hi0bits+0xa>

0800879c <__lo0bits>:
 800879c:	6803      	ldr	r3, [r0, #0]
 800879e:	f013 0207 	ands.w	r2, r3, #7
 80087a2:	4601      	mov	r1, r0
 80087a4:	d00b      	beq.n	80087be <__lo0bits+0x22>
 80087a6:	07da      	lsls	r2, r3, #31
 80087a8:	d424      	bmi.n	80087f4 <__lo0bits+0x58>
 80087aa:	0798      	lsls	r0, r3, #30
 80087ac:	bf49      	itett	mi
 80087ae:	085b      	lsrmi	r3, r3, #1
 80087b0:	089b      	lsrpl	r3, r3, #2
 80087b2:	2001      	movmi	r0, #1
 80087b4:	600b      	strmi	r3, [r1, #0]
 80087b6:	bf5c      	itt	pl
 80087b8:	600b      	strpl	r3, [r1, #0]
 80087ba:	2002      	movpl	r0, #2
 80087bc:	4770      	bx	lr
 80087be:	b298      	uxth	r0, r3
 80087c0:	b9b0      	cbnz	r0, 80087f0 <__lo0bits+0x54>
 80087c2:	0c1b      	lsrs	r3, r3, #16
 80087c4:	2010      	movs	r0, #16
 80087c6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80087ca:	bf04      	itt	eq
 80087cc:	0a1b      	lsreq	r3, r3, #8
 80087ce:	3008      	addeq	r0, #8
 80087d0:	071a      	lsls	r2, r3, #28
 80087d2:	bf04      	itt	eq
 80087d4:	091b      	lsreq	r3, r3, #4
 80087d6:	3004      	addeq	r0, #4
 80087d8:	079a      	lsls	r2, r3, #30
 80087da:	bf04      	itt	eq
 80087dc:	089b      	lsreq	r3, r3, #2
 80087de:	3002      	addeq	r0, #2
 80087e0:	07da      	lsls	r2, r3, #31
 80087e2:	d403      	bmi.n	80087ec <__lo0bits+0x50>
 80087e4:	085b      	lsrs	r3, r3, #1
 80087e6:	f100 0001 	add.w	r0, r0, #1
 80087ea:	d005      	beq.n	80087f8 <__lo0bits+0x5c>
 80087ec:	600b      	str	r3, [r1, #0]
 80087ee:	4770      	bx	lr
 80087f0:	4610      	mov	r0, r2
 80087f2:	e7e8      	b.n	80087c6 <__lo0bits+0x2a>
 80087f4:	2000      	movs	r0, #0
 80087f6:	4770      	bx	lr
 80087f8:	2020      	movs	r0, #32
 80087fa:	4770      	bx	lr

080087fc <__i2b>:
 80087fc:	b510      	push	{r4, lr}
 80087fe:	460c      	mov	r4, r1
 8008800:	2101      	movs	r1, #1
 8008802:	f7ff feff 	bl	8008604 <_Balloc>
 8008806:	4602      	mov	r2, r0
 8008808:	b928      	cbnz	r0, 8008816 <__i2b+0x1a>
 800880a:	4b05      	ldr	r3, [pc, #20]	; (8008820 <__i2b+0x24>)
 800880c:	4805      	ldr	r0, [pc, #20]	; (8008824 <__i2b+0x28>)
 800880e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008812:	f000 fc9b 	bl	800914c <__assert_func>
 8008816:	2301      	movs	r3, #1
 8008818:	6144      	str	r4, [r0, #20]
 800881a:	6103      	str	r3, [r0, #16]
 800881c:	bd10      	pop	{r4, pc}
 800881e:	bf00      	nop
 8008820:	08009e2f 	.word	0x08009e2f
 8008824:	08009e40 	.word	0x08009e40

08008828 <__multiply>:
 8008828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800882c:	4614      	mov	r4, r2
 800882e:	690a      	ldr	r2, [r1, #16]
 8008830:	6923      	ldr	r3, [r4, #16]
 8008832:	429a      	cmp	r2, r3
 8008834:	bfb8      	it	lt
 8008836:	460b      	movlt	r3, r1
 8008838:	460d      	mov	r5, r1
 800883a:	bfbc      	itt	lt
 800883c:	4625      	movlt	r5, r4
 800883e:	461c      	movlt	r4, r3
 8008840:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008844:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008848:	68ab      	ldr	r3, [r5, #8]
 800884a:	6869      	ldr	r1, [r5, #4]
 800884c:	eb0a 0709 	add.w	r7, sl, r9
 8008850:	42bb      	cmp	r3, r7
 8008852:	b085      	sub	sp, #20
 8008854:	bfb8      	it	lt
 8008856:	3101      	addlt	r1, #1
 8008858:	f7ff fed4 	bl	8008604 <_Balloc>
 800885c:	b930      	cbnz	r0, 800886c <__multiply+0x44>
 800885e:	4602      	mov	r2, r0
 8008860:	4b42      	ldr	r3, [pc, #264]	; (800896c <__multiply+0x144>)
 8008862:	4843      	ldr	r0, [pc, #268]	; (8008970 <__multiply+0x148>)
 8008864:	f240 115d 	movw	r1, #349	; 0x15d
 8008868:	f000 fc70 	bl	800914c <__assert_func>
 800886c:	f100 0614 	add.w	r6, r0, #20
 8008870:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008874:	4633      	mov	r3, r6
 8008876:	2200      	movs	r2, #0
 8008878:	4543      	cmp	r3, r8
 800887a:	d31e      	bcc.n	80088ba <__multiply+0x92>
 800887c:	f105 0c14 	add.w	ip, r5, #20
 8008880:	f104 0314 	add.w	r3, r4, #20
 8008884:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008888:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800888c:	9202      	str	r2, [sp, #8]
 800888e:	ebac 0205 	sub.w	r2, ip, r5
 8008892:	3a15      	subs	r2, #21
 8008894:	f022 0203 	bic.w	r2, r2, #3
 8008898:	3204      	adds	r2, #4
 800889a:	f105 0115 	add.w	r1, r5, #21
 800889e:	458c      	cmp	ip, r1
 80088a0:	bf38      	it	cc
 80088a2:	2204      	movcc	r2, #4
 80088a4:	9201      	str	r2, [sp, #4]
 80088a6:	9a02      	ldr	r2, [sp, #8]
 80088a8:	9303      	str	r3, [sp, #12]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d808      	bhi.n	80088c0 <__multiply+0x98>
 80088ae:	2f00      	cmp	r7, #0
 80088b0:	dc55      	bgt.n	800895e <__multiply+0x136>
 80088b2:	6107      	str	r7, [r0, #16]
 80088b4:	b005      	add	sp, #20
 80088b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ba:	f843 2b04 	str.w	r2, [r3], #4
 80088be:	e7db      	b.n	8008878 <__multiply+0x50>
 80088c0:	f8b3 a000 	ldrh.w	sl, [r3]
 80088c4:	f1ba 0f00 	cmp.w	sl, #0
 80088c8:	d020      	beq.n	800890c <__multiply+0xe4>
 80088ca:	f105 0e14 	add.w	lr, r5, #20
 80088ce:	46b1      	mov	r9, r6
 80088d0:	2200      	movs	r2, #0
 80088d2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80088d6:	f8d9 b000 	ldr.w	fp, [r9]
 80088da:	b2a1      	uxth	r1, r4
 80088dc:	fa1f fb8b 	uxth.w	fp, fp
 80088e0:	fb0a b101 	mla	r1, sl, r1, fp
 80088e4:	4411      	add	r1, r2
 80088e6:	f8d9 2000 	ldr.w	r2, [r9]
 80088ea:	0c24      	lsrs	r4, r4, #16
 80088ec:	0c12      	lsrs	r2, r2, #16
 80088ee:	fb0a 2404 	mla	r4, sl, r4, r2
 80088f2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80088f6:	b289      	uxth	r1, r1
 80088f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80088fc:	45f4      	cmp	ip, lr
 80088fe:	f849 1b04 	str.w	r1, [r9], #4
 8008902:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008906:	d8e4      	bhi.n	80088d2 <__multiply+0xaa>
 8008908:	9901      	ldr	r1, [sp, #4]
 800890a:	5072      	str	r2, [r6, r1]
 800890c:	9a03      	ldr	r2, [sp, #12]
 800890e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008912:	3304      	adds	r3, #4
 8008914:	f1b9 0f00 	cmp.w	r9, #0
 8008918:	d01f      	beq.n	800895a <__multiply+0x132>
 800891a:	6834      	ldr	r4, [r6, #0]
 800891c:	f105 0114 	add.w	r1, r5, #20
 8008920:	46b6      	mov	lr, r6
 8008922:	f04f 0a00 	mov.w	sl, #0
 8008926:	880a      	ldrh	r2, [r1, #0]
 8008928:	f8be b002 	ldrh.w	fp, [lr, #2]
 800892c:	fb09 b202 	mla	r2, r9, r2, fp
 8008930:	4492      	add	sl, r2
 8008932:	b2a4      	uxth	r4, r4
 8008934:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008938:	f84e 4b04 	str.w	r4, [lr], #4
 800893c:	f851 4b04 	ldr.w	r4, [r1], #4
 8008940:	f8be 2000 	ldrh.w	r2, [lr]
 8008944:	0c24      	lsrs	r4, r4, #16
 8008946:	fb09 2404 	mla	r4, r9, r4, r2
 800894a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800894e:	458c      	cmp	ip, r1
 8008950:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008954:	d8e7      	bhi.n	8008926 <__multiply+0xfe>
 8008956:	9a01      	ldr	r2, [sp, #4]
 8008958:	50b4      	str	r4, [r6, r2]
 800895a:	3604      	adds	r6, #4
 800895c:	e7a3      	b.n	80088a6 <__multiply+0x7e>
 800895e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008962:	2b00      	cmp	r3, #0
 8008964:	d1a5      	bne.n	80088b2 <__multiply+0x8a>
 8008966:	3f01      	subs	r7, #1
 8008968:	e7a1      	b.n	80088ae <__multiply+0x86>
 800896a:	bf00      	nop
 800896c:	08009e2f 	.word	0x08009e2f
 8008970:	08009e40 	.word	0x08009e40

08008974 <__pow5mult>:
 8008974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008978:	4615      	mov	r5, r2
 800897a:	f012 0203 	ands.w	r2, r2, #3
 800897e:	4606      	mov	r6, r0
 8008980:	460f      	mov	r7, r1
 8008982:	d007      	beq.n	8008994 <__pow5mult+0x20>
 8008984:	4c25      	ldr	r4, [pc, #148]	; (8008a1c <__pow5mult+0xa8>)
 8008986:	3a01      	subs	r2, #1
 8008988:	2300      	movs	r3, #0
 800898a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800898e:	f7ff fe9b 	bl	80086c8 <__multadd>
 8008992:	4607      	mov	r7, r0
 8008994:	10ad      	asrs	r5, r5, #2
 8008996:	d03d      	beq.n	8008a14 <__pow5mult+0xa0>
 8008998:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800899a:	b97c      	cbnz	r4, 80089bc <__pow5mult+0x48>
 800899c:	2010      	movs	r0, #16
 800899e:	f7ff fe1b 	bl	80085d8 <malloc>
 80089a2:	4602      	mov	r2, r0
 80089a4:	6270      	str	r0, [r6, #36]	; 0x24
 80089a6:	b928      	cbnz	r0, 80089b4 <__pow5mult+0x40>
 80089a8:	4b1d      	ldr	r3, [pc, #116]	; (8008a20 <__pow5mult+0xac>)
 80089aa:	481e      	ldr	r0, [pc, #120]	; (8008a24 <__pow5mult+0xb0>)
 80089ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80089b0:	f000 fbcc 	bl	800914c <__assert_func>
 80089b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089b8:	6004      	str	r4, [r0, #0]
 80089ba:	60c4      	str	r4, [r0, #12]
 80089bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80089c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80089c4:	b94c      	cbnz	r4, 80089da <__pow5mult+0x66>
 80089c6:	f240 2171 	movw	r1, #625	; 0x271
 80089ca:	4630      	mov	r0, r6
 80089cc:	f7ff ff16 	bl	80087fc <__i2b>
 80089d0:	2300      	movs	r3, #0
 80089d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80089d6:	4604      	mov	r4, r0
 80089d8:	6003      	str	r3, [r0, #0]
 80089da:	f04f 0900 	mov.w	r9, #0
 80089de:	07eb      	lsls	r3, r5, #31
 80089e0:	d50a      	bpl.n	80089f8 <__pow5mult+0x84>
 80089e2:	4639      	mov	r1, r7
 80089e4:	4622      	mov	r2, r4
 80089e6:	4630      	mov	r0, r6
 80089e8:	f7ff ff1e 	bl	8008828 <__multiply>
 80089ec:	4639      	mov	r1, r7
 80089ee:	4680      	mov	r8, r0
 80089f0:	4630      	mov	r0, r6
 80089f2:	f7ff fe47 	bl	8008684 <_Bfree>
 80089f6:	4647      	mov	r7, r8
 80089f8:	106d      	asrs	r5, r5, #1
 80089fa:	d00b      	beq.n	8008a14 <__pow5mult+0xa0>
 80089fc:	6820      	ldr	r0, [r4, #0]
 80089fe:	b938      	cbnz	r0, 8008a10 <__pow5mult+0x9c>
 8008a00:	4622      	mov	r2, r4
 8008a02:	4621      	mov	r1, r4
 8008a04:	4630      	mov	r0, r6
 8008a06:	f7ff ff0f 	bl	8008828 <__multiply>
 8008a0a:	6020      	str	r0, [r4, #0]
 8008a0c:	f8c0 9000 	str.w	r9, [r0]
 8008a10:	4604      	mov	r4, r0
 8008a12:	e7e4      	b.n	80089de <__pow5mult+0x6a>
 8008a14:	4638      	mov	r0, r7
 8008a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a1a:	bf00      	nop
 8008a1c:	08009f90 	.word	0x08009f90
 8008a20:	08009db9 	.word	0x08009db9
 8008a24:	08009e40 	.word	0x08009e40

08008a28 <__lshift>:
 8008a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a2c:	460c      	mov	r4, r1
 8008a2e:	6849      	ldr	r1, [r1, #4]
 8008a30:	6923      	ldr	r3, [r4, #16]
 8008a32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a36:	68a3      	ldr	r3, [r4, #8]
 8008a38:	4607      	mov	r7, r0
 8008a3a:	4691      	mov	r9, r2
 8008a3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a40:	f108 0601 	add.w	r6, r8, #1
 8008a44:	42b3      	cmp	r3, r6
 8008a46:	db0b      	blt.n	8008a60 <__lshift+0x38>
 8008a48:	4638      	mov	r0, r7
 8008a4a:	f7ff fddb 	bl	8008604 <_Balloc>
 8008a4e:	4605      	mov	r5, r0
 8008a50:	b948      	cbnz	r0, 8008a66 <__lshift+0x3e>
 8008a52:	4602      	mov	r2, r0
 8008a54:	4b28      	ldr	r3, [pc, #160]	; (8008af8 <__lshift+0xd0>)
 8008a56:	4829      	ldr	r0, [pc, #164]	; (8008afc <__lshift+0xd4>)
 8008a58:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008a5c:	f000 fb76 	bl	800914c <__assert_func>
 8008a60:	3101      	adds	r1, #1
 8008a62:	005b      	lsls	r3, r3, #1
 8008a64:	e7ee      	b.n	8008a44 <__lshift+0x1c>
 8008a66:	2300      	movs	r3, #0
 8008a68:	f100 0114 	add.w	r1, r0, #20
 8008a6c:	f100 0210 	add.w	r2, r0, #16
 8008a70:	4618      	mov	r0, r3
 8008a72:	4553      	cmp	r3, sl
 8008a74:	db33      	blt.n	8008ade <__lshift+0xb6>
 8008a76:	6920      	ldr	r0, [r4, #16]
 8008a78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a7c:	f104 0314 	add.w	r3, r4, #20
 8008a80:	f019 091f 	ands.w	r9, r9, #31
 8008a84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a8c:	d02b      	beq.n	8008ae6 <__lshift+0xbe>
 8008a8e:	f1c9 0e20 	rsb	lr, r9, #32
 8008a92:	468a      	mov	sl, r1
 8008a94:	2200      	movs	r2, #0
 8008a96:	6818      	ldr	r0, [r3, #0]
 8008a98:	fa00 f009 	lsl.w	r0, r0, r9
 8008a9c:	4302      	orrs	r2, r0
 8008a9e:	f84a 2b04 	str.w	r2, [sl], #4
 8008aa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008aa6:	459c      	cmp	ip, r3
 8008aa8:	fa22 f20e 	lsr.w	r2, r2, lr
 8008aac:	d8f3      	bhi.n	8008a96 <__lshift+0x6e>
 8008aae:	ebac 0304 	sub.w	r3, ip, r4
 8008ab2:	3b15      	subs	r3, #21
 8008ab4:	f023 0303 	bic.w	r3, r3, #3
 8008ab8:	3304      	adds	r3, #4
 8008aba:	f104 0015 	add.w	r0, r4, #21
 8008abe:	4584      	cmp	ip, r0
 8008ac0:	bf38      	it	cc
 8008ac2:	2304      	movcc	r3, #4
 8008ac4:	50ca      	str	r2, [r1, r3]
 8008ac6:	b10a      	cbz	r2, 8008acc <__lshift+0xa4>
 8008ac8:	f108 0602 	add.w	r6, r8, #2
 8008acc:	3e01      	subs	r6, #1
 8008ace:	4638      	mov	r0, r7
 8008ad0:	612e      	str	r6, [r5, #16]
 8008ad2:	4621      	mov	r1, r4
 8008ad4:	f7ff fdd6 	bl	8008684 <_Bfree>
 8008ad8:	4628      	mov	r0, r5
 8008ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ade:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	e7c5      	b.n	8008a72 <__lshift+0x4a>
 8008ae6:	3904      	subs	r1, #4
 8008ae8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008aec:	f841 2f04 	str.w	r2, [r1, #4]!
 8008af0:	459c      	cmp	ip, r3
 8008af2:	d8f9      	bhi.n	8008ae8 <__lshift+0xc0>
 8008af4:	e7ea      	b.n	8008acc <__lshift+0xa4>
 8008af6:	bf00      	nop
 8008af8:	08009e2f 	.word	0x08009e2f
 8008afc:	08009e40 	.word	0x08009e40

08008b00 <__mcmp>:
 8008b00:	b530      	push	{r4, r5, lr}
 8008b02:	6902      	ldr	r2, [r0, #16]
 8008b04:	690c      	ldr	r4, [r1, #16]
 8008b06:	1b12      	subs	r2, r2, r4
 8008b08:	d10e      	bne.n	8008b28 <__mcmp+0x28>
 8008b0a:	f100 0314 	add.w	r3, r0, #20
 8008b0e:	3114      	adds	r1, #20
 8008b10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008b14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008b18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008b1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008b20:	42a5      	cmp	r5, r4
 8008b22:	d003      	beq.n	8008b2c <__mcmp+0x2c>
 8008b24:	d305      	bcc.n	8008b32 <__mcmp+0x32>
 8008b26:	2201      	movs	r2, #1
 8008b28:	4610      	mov	r0, r2
 8008b2a:	bd30      	pop	{r4, r5, pc}
 8008b2c:	4283      	cmp	r3, r0
 8008b2e:	d3f3      	bcc.n	8008b18 <__mcmp+0x18>
 8008b30:	e7fa      	b.n	8008b28 <__mcmp+0x28>
 8008b32:	f04f 32ff 	mov.w	r2, #4294967295
 8008b36:	e7f7      	b.n	8008b28 <__mcmp+0x28>

08008b38 <__mdiff>:
 8008b38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b3c:	460c      	mov	r4, r1
 8008b3e:	4606      	mov	r6, r0
 8008b40:	4611      	mov	r1, r2
 8008b42:	4620      	mov	r0, r4
 8008b44:	4617      	mov	r7, r2
 8008b46:	f7ff ffdb 	bl	8008b00 <__mcmp>
 8008b4a:	1e05      	subs	r5, r0, #0
 8008b4c:	d110      	bne.n	8008b70 <__mdiff+0x38>
 8008b4e:	4629      	mov	r1, r5
 8008b50:	4630      	mov	r0, r6
 8008b52:	f7ff fd57 	bl	8008604 <_Balloc>
 8008b56:	b930      	cbnz	r0, 8008b66 <__mdiff+0x2e>
 8008b58:	4b39      	ldr	r3, [pc, #228]	; (8008c40 <__mdiff+0x108>)
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	f240 2132 	movw	r1, #562	; 0x232
 8008b60:	4838      	ldr	r0, [pc, #224]	; (8008c44 <__mdiff+0x10c>)
 8008b62:	f000 faf3 	bl	800914c <__assert_func>
 8008b66:	2301      	movs	r3, #1
 8008b68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b70:	bfa4      	itt	ge
 8008b72:	463b      	movge	r3, r7
 8008b74:	4627      	movge	r7, r4
 8008b76:	4630      	mov	r0, r6
 8008b78:	6879      	ldr	r1, [r7, #4]
 8008b7a:	bfa6      	itte	ge
 8008b7c:	461c      	movge	r4, r3
 8008b7e:	2500      	movge	r5, #0
 8008b80:	2501      	movlt	r5, #1
 8008b82:	f7ff fd3f 	bl	8008604 <_Balloc>
 8008b86:	b920      	cbnz	r0, 8008b92 <__mdiff+0x5a>
 8008b88:	4b2d      	ldr	r3, [pc, #180]	; (8008c40 <__mdiff+0x108>)
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008b90:	e7e6      	b.n	8008b60 <__mdiff+0x28>
 8008b92:	693e      	ldr	r6, [r7, #16]
 8008b94:	60c5      	str	r5, [r0, #12]
 8008b96:	6925      	ldr	r5, [r4, #16]
 8008b98:	f107 0114 	add.w	r1, r7, #20
 8008b9c:	f104 0914 	add.w	r9, r4, #20
 8008ba0:	f100 0e14 	add.w	lr, r0, #20
 8008ba4:	f107 0210 	add.w	r2, r7, #16
 8008ba8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008bac:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008bb0:	46f2      	mov	sl, lr
 8008bb2:	2700      	movs	r7, #0
 8008bb4:	f859 3b04 	ldr.w	r3, [r9], #4
 8008bb8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008bbc:	fa1f f883 	uxth.w	r8, r3
 8008bc0:	fa17 f78b 	uxtah	r7, r7, fp
 8008bc4:	0c1b      	lsrs	r3, r3, #16
 8008bc6:	eba7 0808 	sub.w	r8, r7, r8
 8008bca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008bce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008bd2:	fa1f f888 	uxth.w	r8, r8
 8008bd6:	141f      	asrs	r7, r3, #16
 8008bd8:	454d      	cmp	r5, r9
 8008bda:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008bde:	f84a 3b04 	str.w	r3, [sl], #4
 8008be2:	d8e7      	bhi.n	8008bb4 <__mdiff+0x7c>
 8008be4:	1b2b      	subs	r3, r5, r4
 8008be6:	3b15      	subs	r3, #21
 8008be8:	f023 0303 	bic.w	r3, r3, #3
 8008bec:	3304      	adds	r3, #4
 8008bee:	3415      	adds	r4, #21
 8008bf0:	42a5      	cmp	r5, r4
 8008bf2:	bf38      	it	cc
 8008bf4:	2304      	movcc	r3, #4
 8008bf6:	4419      	add	r1, r3
 8008bf8:	4473      	add	r3, lr
 8008bfa:	469e      	mov	lr, r3
 8008bfc:	460d      	mov	r5, r1
 8008bfe:	4565      	cmp	r5, ip
 8008c00:	d30e      	bcc.n	8008c20 <__mdiff+0xe8>
 8008c02:	f10c 0203 	add.w	r2, ip, #3
 8008c06:	1a52      	subs	r2, r2, r1
 8008c08:	f022 0203 	bic.w	r2, r2, #3
 8008c0c:	3903      	subs	r1, #3
 8008c0e:	458c      	cmp	ip, r1
 8008c10:	bf38      	it	cc
 8008c12:	2200      	movcc	r2, #0
 8008c14:	441a      	add	r2, r3
 8008c16:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008c1a:	b17b      	cbz	r3, 8008c3c <__mdiff+0x104>
 8008c1c:	6106      	str	r6, [r0, #16]
 8008c1e:	e7a5      	b.n	8008b6c <__mdiff+0x34>
 8008c20:	f855 8b04 	ldr.w	r8, [r5], #4
 8008c24:	fa17 f488 	uxtah	r4, r7, r8
 8008c28:	1422      	asrs	r2, r4, #16
 8008c2a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008c2e:	b2a4      	uxth	r4, r4
 8008c30:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008c34:	f84e 4b04 	str.w	r4, [lr], #4
 8008c38:	1417      	asrs	r7, r2, #16
 8008c3a:	e7e0      	b.n	8008bfe <__mdiff+0xc6>
 8008c3c:	3e01      	subs	r6, #1
 8008c3e:	e7ea      	b.n	8008c16 <__mdiff+0xde>
 8008c40:	08009e2f 	.word	0x08009e2f
 8008c44:	08009e40 	.word	0x08009e40

08008c48 <__d2b>:
 8008c48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c4c:	4689      	mov	r9, r1
 8008c4e:	2101      	movs	r1, #1
 8008c50:	ec57 6b10 	vmov	r6, r7, d0
 8008c54:	4690      	mov	r8, r2
 8008c56:	f7ff fcd5 	bl	8008604 <_Balloc>
 8008c5a:	4604      	mov	r4, r0
 8008c5c:	b930      	cbnz	r0, 8008c6c <__d2b+0x24>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	4b25      	ldr	r3, [pc, #148]	; (8008cf8 <__d2b+0xb0>)
 8008c62:	4826      	ldr	r0, [pc, #152]	; (8008cfc <__d2b+0xb4>)
 8008c64:	f240 310a 	movw	r1, #778	; 0x30a
 8008c68:	f000 fa70 	bl	800914c <__assert_func>
 8008c6c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008c70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008c74:	bb35      	cbnz	r5, 8008cc4 <__d2b+0x7c>
 8008c76:	2e00      	cmp	r6, #0
 8008c78:	9301      	str	r3, [sp, #4]
 8008c7a:	d028      	beq.n	8008cce <__d2b+0x86>
 8008c7c:	4668      	mov	r0, sp
 8008c7e:	9600      	str	r6, [sp, #0]
 8008c80:	f7ff fd8c 	bl	800879c <__lo0bits>
 8008c84:	9900      	ldr	r1, [sp, #0]
 8008c86:	b300      	cbz	r0, 8008cca <__d2b+0x82>
 8008c88:	9a01      	ldr	r2, [sp, #4]
 8008c8a:	f1c0 0320 	rsb	r3, r0, #32
 8008c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c92:	430b      	orrs	r3, r1
 8008c94:	40c2      	lsrs	r2, r0
 8008c96:	6163      	str	r3, [r4, #20]
 8008c98:	9201      	str	r2, [sp, #4]
 8008c9a:	9b01      	ldr	r3, [sp, #4]
 8008c9c:	61a3      	str	r3, [r4, #24]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	bf14      	ite	ne
 8008ca2:	2202      	movne	r2, #2
 8008ca4:	2201      	moveq	r2, #1
 8008ca6:	6122      	str	r2, [r4, #16]
 8008ca8:	b1d5      	cbz	r5, 8008ce0 <__d2b+0x98>
 8008caa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008cae:	4405      	add	r5, r0
 8008cb0:	f8c9 5000 	str.w	r5, [r9]
 8008cb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008cb8:	f8c8 0000 	str.w	r0, [r8]
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	b003      	add	sp, #12
 8008cc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008cc8:	e7d5      	b.n	8008c76 <__d2b+0x2e>
 8008cca:	6161      	str	r1, [r4, #20]
 8008ccc:	e7e5      	b.n	8008c9a <__d2b+0x52>
 8008cce:	a801      	add	r0, sp, #4
 8008cd0:	f7ff fd64 	bl	800879c <__lo0bits>
 8008cd4:	9b01      	ldr	r3, [sp, #4]
 8008cd6:	6163      	str	r3, [r4, #20]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	6122      	str	r2, [r4, #16]
 8008cdc:	3020      	adds	r0, #32
 8008cde:	e7e3      	b.n	8008ca8 <__d2b+0x60>
 8008ce0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008ce4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008ce8:	f8c9 0000 	str.w	r0, [r9]
 8008cec:	6918      	ldr	r0, [r3, #16]
 8008cee:	f7ff fd35 	bl	800875c <__hi0bits>
 8008cf2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008cf6:	e7df      	b.n	8008cb8 <__d2b+0x70>
 8008cf8:	08009e2f 	.word	0x08009e2f
 8008cfc:	08009e40 	.word	0x08009e40

08008d00 <_calloc_r>:
 8008d00:	b513      	push	{r0, r1, r4, lr}
 8008d02:	434a      	muls	r2, r1
 8008d04:	4611      	mov	r1, r2
 8008d06:	9201      	str	r2, [sp, #4]
 8008d08:	f000 f85a 	bl	8008dc0 <_malloc_r>
 8008d0c:	4604      	mov	r4, r0
 8008d0e:	b118      	cbz	r0, 8008d18 <_calloc_r+0x18>
 8008d10:	9a01      	ldr	r2, [sp, #4]
 8008d12:	2100      	movs	r1, #0
 8008d14:	f7fe f93c 	bl	8006f90 <memset>
 8008d18:	4620      	mov	r0, r4
 8008d1a:	b002      	add	sp, #8
 8008d1c:	bd10      	pop	{r4, pc}
	...

08008d20 <_free_r>:
 8008d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d22:	2900      	cmp	r1, #0
 8008d24:	d048      	beq.n	8008db8 <_free_r+0x98>
 8008d26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d2a:	9001      	str	r0, [sp, #4]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f1a1 0404 	sub.w	r4, r1, #4
 8008d32:	bfb8      	it	lt
 8008d34:	18e4      	addlt	r4, r4, r3
 8008d36:	f000 fa65 	bl	8009204 <__malloc_lock>
 8008d3a:	4a20      	ldr	r2, [pc, #128]	; (8008dbc <_free_r+0x9c>)
 8008d3c:	9801      	ldr	r0, [sp, #4]
 8008d3e:	6813      	ldr	r3, [r2, #0]
 8008d40:	4615      	mov	r5, r2
 8008d42:	b933      	cbnz	r3, 8008d52 <_free_r+0x32>
 8008d44:	6063      	str	r3, [r4, #4]
 8008d46:	6014      	str	r4, [r2, #0]
 8008d48:	b003      	add	sp, #12
 8008d4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d4e:	f000 ba5f 	b.w	8009210 <__malloc_unlock>
 8008d52:	42a3      	cmp	r3, r4
 8008d54:	d90b      	bls.n	8008d6e <_free_r+0x4e>
 8008d56:	6821      	ldr	r1, [r4, #0]
 8008d58:	1862      	adds	r2, r4, r1
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	bf04      	itt	eq
 8008d5e:	681a      	ldreq	r2, [r3, #0]
 8008d60:	685b      	ldreq	r3, [r3, #4]
 8008d62:	6063      	str	r3, [r4, #4]
 8008d64:	bf04      	itt	eq
 8008d66:	1852      	addeq	r2, r2, r1
 8008d68:	6022      	streq	r2, [r4, #0]
 8008d6a:	602c      	str	r4, [r5, #0]
 8008d6c:	e7ec      	b.n	8008d48 <_free_r+0x28>
 8008d6e:	461a      	mov	r2, r3
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	b10b      	cbz	r3, 8008d78 <_free_r+0x58>
 8008d74:	42a3      	cmp	r3, r4
 8008d76:	d9fa      	bls.n	8008d6e <_free_r+0x4e>
 8008d78:	6811      	ldr	r1, [r2, #0]
 8008d7a:	1855      	adds	r5, r2, r1
 8008d7c:	42a5      	cmp	r5, r4
 8008d7e:	d10b      	bne.n	8008d98 <_free_r+0x78>
 8008d80:	6824      	ldr	r4, [r4, #0]
 8008d82:	4421      	add	r1, r4
 8008d84:	1854      	adds	r4, r2, r1
 8008d86:	42a3      	cmp	r3, r4
 8008d88:	6011      	str	r1, [r2, #0]
 8008d8a:	d1dd      	bne.n	8008d48 <_free_r+0x28>
 8008d8c:	681c      	ldr	r4, [r3, #0]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	6053      	str	r3, [r2, #4]
 8008d92:	4421      	add	r1, r4
 8008d94:	6011      	str	r1, [r2, #0]
 8008d96:	e7d7      	b.n	8008d48 <_free_r+0x28>
 8008d98:	d902      	bls.n	8008da0 <_free_r+0x80>
 8008d9a:	230c      	movs	r3, #12
 8008d9c:	6003      	str	r3, [r0, #0]
 8008d9e:	e7d3      	b.n	8008d48 <_free_r+0x28>
 8008da0:	6825      	ldr	r5, [r4, #0]
 8008da2:	1961      	adds	r1, r4, r5
 8008da4:	428b      	cmp	r3, r1
 8008da6:	bf04      	itt	eq
 8008da8:	6819      	ldreq	r1, [r3, #0]
 8008daa:	685b      	ldreq	r3, [r3, #4]
 8008dac:	6063      	str	r3, [r4, #4]
 8008dae:	bf04      	itt	eq
 8008db0:	1949      	addeq	r1, r1, r5
 8008db2:	6021      	streq	r1, [r4, #0]
 8008db4:	6054      	str	r4, [r2, #4]
 8008db6:	e7c7      	b.n	8008d48 <_free_r+0x28>
 8008db8:	b003      	add	sp, #12
 8008dba:	bd30      	pop	{r4, r5, pc}
 8008dbc:	2000026c 	.word	0x2000026c

08008dc0 <_malloc_r>:
 8008dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dc2:	1ccd      	adds	r5, r1, #3
 8008dc4:	f025 0503 	bic.w	r5, r5, #3
 8008dc8:	3508      	adds	r5, #8
 8008dca:	2d0c      	cmp	r5, #12
 8008dcc:	bf38      	it	cc
 8008dce:	250c      	movcc	r5, #12
 8008dd0:	2d00      	cmp	r5, #0
 8008dd2:	4606      	mov	r6, r0
 8008dd4:	db01      	blt.n	8008dda <_malloc_r+0x1a>
 8008dd6:	42a9      	cmp	r1, r5
 8008dd8:	d903      	bls.n	8008de2 <_malloc_r+0x22>
 8008dda:	230c      	movs	r3, #12
 8008ddc:	6033      	str	r3, [r6, #0]
 8008dde:	2000      	movs	r0, #0
 8008de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008de2:	f000 fa0f 	bl	8009204 <__malloc_lock>
 8008de6:	4921      	ldr	r1, [pc, #132]	; (8008e6c <_malloc_r+0xac>)
 8008de8:	680a      	ldr	r2, [r1, #0]
 8008dea:	4614      	mov	r4, r2
 8008dec:	b99c      	cbnz	r4, 8008e16 <_malloc_r+0x56>
 8008dee:	4f20      	ldr	r7, [pc, #128]	; (8008e70 <_malloc_r+0xb0>)
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	b923      	cbnz	r3, 8008dfe <_malloc_r+0x3e>
 8008df4:	4621      	mov	r1, r4
 8008df6:	4630      	mov	r0, r6
 8008df8:	f000 f998 	bl	800912c <_sbrk_r>
 8008dfc:	6038      	str	r0, [r7, #0]
 8008dfe:	4629      	mov	r1, r5
 8008e00:	4630      	mov	r0, r6
 8008e02:	f000 f993 	bl	800912c <_sbrk_r>
 8008e06:	1c43      	adds	r3, r0, #1
 8008e08:	d123      	bne.n	8008e52 <_malloc_r+0x92>
 8008e0a:	230c      	movs	r3, #12
 8008e0c:	6033      	str	r3, [r6, #0]
 8008e0e:	4630      	mov	r0, r6
 8008e10:	f000 f9fe 	bl	8009210 <__malloc_unlock>
 8008e14:	e7e3      	b.n	8008dde <_malloc_r+0x1e>
 8008e16:	6823      	ldr	r3, [r4, #0]
 8008e18:	1b5b      	subs	r3, r3, r5
 8008e1a:	d417      	bmi.n	8008e4c <_malloc_r+0x8c>
 8008e1c:	2b0b      	cmp	r3, #11
 8008e1e:	d903      	bls.n	8008e28 <_malloc_r+0x68>
 8008e20:	6023      	str	r3, [r4, #0]
 8008e22:	441c      	add	r4, r3
 8008e24:	6025      	str	r5, [r4, #0]
 8008e26:	e004      	b.n	8008e32 <_malloc_r+0x72>
 8008e28:	6863      	ldr	r3, [r4, #4]
 8008e2a:	42a2      	cmp	r2, r4
 8008e2c:	bf0c      	ite	eq
 8008e2e:	600b      	streq	r3, [r1, #0]
 8008e30:	6053      	strne	r3, [r2, #4]
 8008e32:	4630      	mov	r0, r6
 8008e34:	f000 f9ec 	bl	8009210 <__malloc_unlock>
 8008e38:	f104 000b 	add.w	r0, r4, #11
 8008e3c:	1d23      	adds	r3, r4, #4
 8008e3e:	f020 0007 	bic.w	r0, r0, #7
 8008e42:	1ac2      	subs	r2, r0, r3
 8008e44:	d0cc      	beq.n	8008de0 <_malloc_r+0x20>
 8008e46:	1a1b      	subs	r3, r3, r0
 8008e48:	50a3      	str	r3, [r4, r2]
 8008e4a:	e7c9      	b.n	8008de0 <_malloc_r+0x20>
 8008e4c:	4622      	mov	r2, r4
 8008e4e:	6864      	ldr	r4, [r4, #4]
 8008e50:	e7cc      	b.n	8008dec <_malloc_r+0x2c>
 8008e52:	1cc4      	adds	r4, r0, #3
 8008e54:	f024 0403 	bic.w	r4, r4, #3
 8008e58:	42a0      	cmp	r0, r4
 8008e5a:	d0e3      	beq.n	8008e24 <_malloc_r+0x64>
 8008e5c:	1a21      	subs	r1, r4, r0
 8008e5e:	4630      	mov	r0, r6
 8008e60:	f000 f964 	bl	800912c <_sbrk_r>
 8008e64:	3001      	adds	r0, #1
 8008e66:	d1dd      	bne.n	8008e24 <_malloc_r+0x64>
 8008e68:	e7cf      	b.n	8008e0a <_malloc_r+0x4a>
 8008e6a:	bf00      	nop
 8008e6c:	2000026c 	.word	0x2000026c
 8008e70:	20000270 	.word	0x20000270

08008e74 <__ssputs_r>:
 8008e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e78:	688e      	ldr	r6, [r1, #8]
 8008e7a:	429e      	cmp	r6, r3
 8008e7c:	4682      	mov	sl, r0
 8008e7e:	460c      	mov	r4, r1
 8008e80:	4690      	mov	r8, r2
 8008e82:	461f      	mov	r7, r3
 8008e84:	d838      	bhi.n	8008ef8 <__ssputs_r+0x84>
 8008e86:	898a      	ldrh	r2, [r1, #12]
 8008e88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e8c:	d032      	beq.n	8008ef4 <__ssputs_r+0x80>
 8008e8e:	6825      	ldr	r5, [r4, #0]
 8008e90:	6909      	ldr	r1, [r1, #16]
 8008e92:	eba5 0901 	sub.w	r9, r5, r1
 8008e96:	6965      	ldr	r5, [r4, #20]
 8008e98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	444b      	add	r3, r9
 8008ea4:	106d      	asrs	r5, r5, #1
 8008ea6:	429d      	cmp	r5, r3
 8008ea8:	bf38      	it	cc
 8008eaa:	461d      	movcc	r5, r3
 8008eac:	0553      	lsls	r3, r2, #21
 8008eae:	d531      	bpl.n	8008f14 <__ssputs_r+0xa0>
 8008eb0:	4629      	mov	r1, r5
 8008eb2:	f7ff ff85 	bl	8008dc0 <_malloc_r>
 8008eb6:	4606      	mov	r6, r0
 8008eb8:	b950      	cbnz	r0, 8008ed0 <__ssputs_r+0x5c>
 8008eba:	230c      	movs	r3, #12
 8008ebc:	f8ca 3000 	str.w	r3, [sl]
 8008ec0:	89a3      	ldrh	r3, [r4, #12]
 8008ec2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ec6:	81a3      	strh	r3, [r4, #12]
 8008ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ed0:	6921      	ldr	r1, [r4, #16]
 8008ed2:	464a      	mov	r2, r9
 8008ed4:	f7ff fb88 	bl	80085e8 <memcpy>
 8008ed8:	89a3      	ldrh	r3, [r4, #12]
 8008eda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ee2:	81a3      	strh	r3, [r4, #12]
 8008ee4:	6126      	str	r6, [r4, #16]
 8008ee6:	6165      	str	r5, [r4, #20]
 8008ee8:	444e      	add	r6, r9
 8008eea:	eba5 0509 	sub.w	r5, r5, r9
 8008eee:	6026      	str	r6, [r4, #0]
 8008ef0:	60a5      	str	r5, [r4, #8]
 8008ef2:	463e      	mov	r6, r7
 8008ef4:	42be      	cmp	r6, r7
 8008ef6:	d900      	bls.n	8008efa <__ssputs_r+0x86>
 8008ef8:	463e      	mov	r6, r7
 8008efa:	4632      	mov	r2, r6
 8008efc:	6820      	ldr	r0, [r4, #0]
 8008efe:	4641      	mov	r1, r8
 8008f00:	f000 f966 	bl	80091d0 <memmove>
 8008f04:	68a3      	ldr	r3, [r4, #8]
 8008f06:	6822      	ldr	r2, [r4, #0]
 8008f08:	1b9b      	subs	r3, r3, r6
 8008f0a:	4432      	add	r2, r6
 8008f0c:	60a3      	str	r3, [r4, #8]
 8008f0e:	6022      	str	r2, [r4, #0]
 8008f10:	2000      	movs	r0, #0
 8008f12:	e7db      	b.n	8008ecc <__ssputs_r+0x58>
 8008f14:	462a      	mov	r2, r5
 8008f16:	f000 f981 	bl	800921c <_realloc_r>
 8008f1a:	4606      	mov	r6, r0
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	d1e1      	bne.n	8008ee4 <__ssputs_r+0x70>
 8008f20:	6921      	ldr	r1, [r4, #16]
 8008f22:	4650      	mov	r0, sl
 8008f24:	f7ff fefc 	bl	8008d20 <_free_r>
 8008f28:	e7c7      	b.n	8008eba <__ssputs_r+0x46>
	...

08008f2c <_svfiprintf_r>:
 8008f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f30:	4698      	mov	r8, r3
 8008f32:	898b      	ldrh	r3, [r1, #12]
 8008f34:	061b      	lsls	r3, r3, #24
 8008f36:	b09d      	sub	sp, #116	; 0x74
 8008f38:	4607      	mov	r7, r0
 8008f3a:	460d      	mov	r5, r1
 8008f3c:	4614      	mov	r4, r2
 8008f3e:	d50e      	bpl.n	8008f5e <_svfiprintf_r+0x32>
 8008f40:	690b      	ldr	r3, [r1, #16]
 8008f42:	b963      	cbnz	r3, 8008f5e <_svfiprintf_r+0x32>
 8008f44:	2140      	movs	r1, #64	; 0x40
 8008f46:	f7ff ff3b 	bl	8008dc0 <_malloc_r>
 8008f4a:	6028      	str	r0, [r5, #0]
 8008f4c:	6128      	str	r0, [r5, #16]
 8008f4e:	b920      	cbnz	r0, 8008f5a <_svfiprintf_r+0x2e>
 8008f50:	230c      	movs	r3, #12
 8008f52:	603b      	str	r3, [r7, #0]
 8008f54:	f04f 30ff 	mov.w	r0, #4294967295
 8008f58:	e0d1      	b.n	80090fe <_svfiprintf_r+0x1d2>
 8008f5a:	2340      	movs	r3, #64	; 0x40
 8008f5c:	616b      	str	r3, [r5, #20]
 8008f5e:	2300      	movs	r3, #0
 8008f60:	9309      	str	r3, [sp, #36]	; 0x24
 8008f62:	2320      	movs	r3, #32
 8008f64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f68:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f6c:	2330      	movs	r3, #48	; 0x30
 8008f6e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009118 <_svfiprintf_r+0x1ec>
 8008f72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f76:	f04f 0901 	mov.w	r9, #1
 8008f7a:	4623      	mov	r3, r4
 8008f7c:	469a      	mov	sl, r3
 8008f7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f82:	b10a      	cbz	r2, 8008f88 <_svfiprintf_r+0x5c>
 8008f84:	2a25      	cmp	r2, #37	; 0x25
 8008f86:	d1f9      	bne.n	8008f7c <_svfiprintf_r+0x50>
 8008f88:	ebba 0b04 	subs.w	fp, sl, r4
 8008f8c:	d00b      	beq.n	8008fa6 <_svfiprintf_r+0x7a>
 8008f8e:	465b      	mov	r3, fp
 8008f90:	4622      	mov	r2, r4
 8008f92:	4629      	mov	r1, r5
 8008f94:	4638      	mov	r0, r7
 8008f96:	f7ff ff6d 	bl	8008e74 <__ssputs_r>
 8008f9a:	3001      	adds	r0, #1
 8008f9c:	f000 80aa 	beq.w	80090f4 <_svfiprintf_r+0x1c8>
 8008fa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fa2:	445a      	add	r2, fp
 8008fa4:	9209      	str	r2, [sp, #36]	; 0x24
 8008fa6:	f89a 3000 	ldrb.w	r3, [sl]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	f000 80a2 	beq.w	80090f4 <_svfiprintf_r+0x1c8>
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8008fb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fba:	f10a 0a01 	add.w	sl, sl, #1
 8008fbe:	9304      	str	r3, [sp, #16]
 8008fc0:	9307      	str	r3, [sp, #28]
 8008fc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fc6:	931a      	str	r3, [sp, #104]	; 0x68
 8008fc8:	4654      	mov	r4, sl
 8008fca:	2205      	movs	r2, #5
 8008fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fd0:	4851      	ldr	r0, [pc, #324]	; (8009118 <_svfiprintf_r+0x1ec>)
 8008fd2:	f7f7 f925 	bl	8000220 <memchr>
 8008fd6:	9a04      	ldr	r2, [sp, #16]
 8008fd8:	b9d8      	cbnz	r0, 8009012 <_svfiprintf_r+0xe6>
 8008fda:	06d0      	lsls	r0, r2, #27
 8008fdc:	bf44      	itt	mi
 8008fde:	2320      	movmi	r3, #32
 8008fe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fe4:	0711      	lsls	r1, r2, #28
 8008fe6:	bf44      	itt	mi
 8008fe8:	232b      	movmi	r3, #43	; 0x2b
 8008fea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fee:	f89a 3000 	ldrb.w	r3, [sl]
 8008ff2:	2b2a      	cmp	r3, #42	; 0x2a
 8008ff4:	d015      	beq.n	8009022 <_svfiprintf_r+0xf6>
 8008ff6:	9a07      	ldr	r2, [sp, #28]
 8008ff8:	4654      	mov	r4, sl
 8008ffa:	2000      	movs	r0, #0
 8008ffc:	f04f 0c0a 	mov.w	ip, #10
 8009000:	4621      	mov	r1, r4
 8009002:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009006:	3b30      	subs	r3, #48	; 0x30
 8009008:	2b09      	cmp	r3, #9
 800900a:	d94e      	bls.n	80090aa <_svfiprintf_r+0x17e>
 800900c:	b1b0      	cbz	r0, 800903c <_svfiprintf_r+0x110>
 800900e:	9207      	str	r2, [sp, #28]
 8009010:	e014      	b.n	800903c <_svfiprintf_r+0x110>
 8009012:	eba0 0308 	sub.w	r3, r0, r8
 8009016:	fa09 f303 	lsl.w	r3, r9, r3
 800901a:	4313      	orrs	r3, r2
 800901c:	9304      	str	r3, [sp, #16]
 800901e:	46a2      	mov	sl, r4
 8009020:	e7d2      	b.n	8008fc8 <_svfiprintf_r+0x9c>
 8009022:	9b03      	ldr	r3, [sp, #12]
 8009024:	1d19      	adds	r1, r3, #4
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	9103      	str	r1, [sp, #12]
 800902a:	2b00      	cmp	r3, #0
 800902c:	bfbb      	ittet	lt
 800902e:	425b      	neglt	r3, r3
 8009030:	f042 0202 	orrlt.w	r2, r2, #2
 8009034:	9307      	strge	r3, [sp, #28]
 8009036:	9307      	strlt	r3, [sp, #28]
 8009038:	bfb8      	it	lt
 800903a:	9204      	strlt	r2, [sp, #16]
 800903c:	7823      	ldrb	r3, [r4, #0]
 800903e:	2b2e      	cmp	r3, #46	; 0x2e
 8009040:	d10c      	bne.n	800905c <_svfiprintf_r+0x130>
 8009042:	7863      	ldrb	r3, [r4, #1]
 8009044:	2b2a      	cmp	r3, #42	; 0x2a
 8009046:	d135      	bne.n	80090b4 <_svfiprintf_r+0x188>
 8009048:	9b03      	ldr	r3, [sp, #12]
 800904a:	1d1a      	adds	r2, r3, #4
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	9203      	str	r2, [sp, #12]
 8009050:	2b00      	cmp	r3, #0
 8009052:	bfb8      	it	lt
 8009054:	f04f 33ff 	movlt.w	r3, #4294967295
 8009058:	3402      	adds	r4, #2
 800905a:	9305      	str	r3, [sp, #20]
 800905c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009128 <_svfiprintf_r+0x1fc>
 8009060:	7821      	ldrb	r1, [r4, #0]
 8009062:	2203      	movs	r2, #3
 8009064:	4650      	mov	r0, sl
 8009066:	f7f7 f8db 	bl	8000220 <memchr>
 800906a:	b140      	cbz	r0, 800907e <_svfiprintf_r+0x152>
 800906c:	2340      	movs	r3, #64	; 0x40
 800906e:	eba0 000a 	sub.w	r0, r0, sl
 8009072:	fa03 f000 	lsl.w	r0, r3, r0
 8009076:	9b04      	ldr	r3, [sp, #16]
 8009078:	4303      	orrs	r3, r0
 800907a:	3401      	adds	r4, #1
 800907c:	9304      	str	r3, [sp, #16]
 800907e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009082:	4826      	ldr	r0, [pc, #152]	; (800911c <_svfiprintf_r+0x1f0>)
 8009084:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009088:	2206      	movs	r2, #6
 800908a:	f7f7 f8c9 	bl	8000220 <memchr>
 800908e:	2800      	cmp	r0, #0
 8009090:	d038      	beq.n	8009104 <_svfiprintf_r+0x1d8>
 8009092:	4b23      	ldr	r3, [pc, #140]	; (8009120 <_svfiprintf_r+0x1f4>)
 8009094:	bb1b      	cbnz	r3, 80090de <_svfiprintf_r+0x1b2>
 8009096:	9b03      	ldr	r3, [sp, #12]
 8009098:	3307      	adds	r3, #7
 800909a:	f023 0307 	bic.w	r3, r3, #7
 800909e:	3308      	adds	r3, #8
 80090a0:	9303      	str	r3, [sp, #12]
 80090a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090a4:	4433      	add	r3, r6
 80090a6:	9309      	str	r3, [sp, #36]	; 0x24
 80090a8:	e767      	b.n	8008f7a <_svfiprintf_r+0x4e>
 80090aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80090ae:	460c      	mov	r4, r1
 80090b0:	2001      	movs	r0, #1
 80090b2:	e7a5      	b.n	8009000 <_svfiprintf_r+0xd4>
 80090b4:	2300      	movs	r3, #0
 80090b6:	3401      	adds	r4, #1
 80090b8:	9305      	str	r3, [sp, #20]
 80090ba:	4619      	mov	r1, r3
 80090bc:	f04f 0c0a 	mov.w	ip, #10
 80090c0:	4620      	mov	r0, r4
 80090c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090c6:	3a30      	subs	r2, #48	; 0x30
 80090c8:	2a09      	cmp	r2, #9
 80090ca:	d903      	bls.n	80090d4 <_svfiprintf_r+0x1a8>
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d0c5      	beq.n	800905c <_svfiprintf_r+0x130>
 80090d0:	9105      	str	r1, [sp, #20]
 80090d2:	e7c3      	b.n	800905c <_svfiprintf_r+0x130>
 80090d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80090d8:	4604      	mov	r4, r0
 80090da:	2301      	movs	r3, #1
 80090dc:	e7f0      	b.n	80090c0 <_svfiprintf_r+0x194>
 80090de:	ab03      	add	r3, sp, #12
 80090e0:	9300      	str	r3, [sp, #0]
 80090e2:	462a      	mov	r2, r5
 80090e4:	4b0f      	ldr	r3, [pc, #60]	; (8009124 <_svfiprintf_r+0x1f8>)
 80090e6:	a904      	add	r1, sp, #16
 80090e8:	4638      	mov	r0, r7
 80090ea:	f7fd fff9 	bl	80070e0 <_printf_float>
 80090ee:	1c42      	adds	r2, r0, #1
 80090f0:	4606      	mov	r6, r0
 80090f2:	d1d6      	bne.n	80090a2 <_svfiprintf_r+0x176>
 80090f4:	89ab      	ldrh	r3, [r5, #12]
 80090f6:	065b      	lsls	r3, r3, #25
 80090f8:	f53f af2c 	bmi.w	8008f54 <_svfiprintf_r+0x28>
 80090fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090fe:	b01d      	add	sp, #116	; 0x74
 8009100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009104:	ab03      	add	r3, sp, #12
 8009106:	9300      	str	r3, [sp, #0]
 8009108:	462a      	mov	r2, r5
 800910a:	4b06      	ldr	r3, [pc, #24]	; (8009124 <_svfiprintf_r+0x1f8>)
 800910c:	a904      	add	r1, sp, #16
 800910e:	4638      	mov	r0, r7
 8009110:	f7fe fa8a 	bl	8007628 <_printf_i>
 8009114:	e7eb      	b.n	80090ee <_svfiprintf_r+0x1c2>
 8009116:	bf00      	nop
 8009118:	08009f9c 	.word	0x08009f9c
 800911c:	08009fa6 	.word	0x08009fa6
 8009120:	080070e1 	.word	0x080070e1
 8009124:	08008e75 	.word	0x08008e75
 8009128:	08009fa2 	.word	0x08009fa2

0800912c <_sbrk_r>:
 800912c:	b538      	push	{r3, r4, r5, lr}
 800912e:	4d06      	ldr	r5, [pc, #24]	; (8009148 <_sbrk_r+0x1c>)
 8009130:	2300      	movs	r3, #0
 8009132:	4604      	mov	r4, r0
 8009134:	4608      	mov	r0, r1
 8009136:	602b      	str	r3, [r5, #0]
 8009138:	f7f9 fa78 	bl	800262c <_sbrk>
 800913c:	1c43      	adds	r3, r0, #1
 800913e:	d102      	bne.n	8009146 <_sbrk_r+0x1a>
 8009140:	682b      	ldr	r3, [r5, #0]
 8009142:	b103      	cbz	r3, 8009146 <_sbrk_r+0x1a>
 8009144:	6023      	str	r3, [r4, #0]
 8009146:	bd38      	pop	{r3, r4, r5, pc}
 8009148:	20000838 	.word	0x20000838

0800914c <__assert_func>:
 800914c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800914e:	4614      	mov	r4, r2
 8009150:	461a      	mov	r2, r3
 8009152:	4b09      	ldr	r3, [pc, #36]	; (8009178 <__assert_func+0x2c>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4605      	mov	r5, r0
 8009158:	68d8      	ldr	r0, [r3, #12]
 800915a:	b14c      	cbz	r4, 8009170 <__assert_func+0x24>
 800915c:	4b07      	ldr	r3, [pc, #28]	; (800917c <__assert_func+0x30>)
 800915e:	9100      	str	r1, [sp, #0]
 8009160:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009164:	4906      	ldr	r1, [pc, #24]	; (8009180 <__assert_func+0x34>)
 8009166:	462b      	mov	r3, r5
 8009168:	f000 f80e 	bl	8009188 <fiprintf>
 800916c:	f000 faa4 	bl	80096b8 <abort>
 8009170:	4b04      	ldr	r3, [pc, #16]	; (8009184 <__assert_func+0x38>)
 8009172:	461c      	mov	r4, r3
 8009174:	e7f3      	b.n	800915e <__assert_func+0x12>
 8009176:	bf00      	nop
 8009178:	20000010 	.word	0x20000010
 800917c:	08009fad 	.word	0x08009fad
 8009180:	08009fba 	.word	0x08009fba
 8009184:	08009fe8 	.word	0x08009fe8

08009188 <fiprintf>:
 8009188:	b40e      	push	{r1, r2, r3}
 800918a:	b503      	push	{r0, r1, lr}
 800918c:	4601      	mov	r1, r0
 800918e:	ab03      	add	r3, sp, #12
 8009190:	4805      	ldr	r0, [pc, #20]	; (80091a8 <fiprintf+0x20>)
 8009192:	f853 2b04 	ldr.w	r2, [r3], #4
 8009196:	6800      	ldr	r0, [r0, #0]
 8009198:	9301      	str	r3, [sp, #4]
 800919a:	f000 f88f 	bl	80092bc <_vfiprintf_r>
 800919e:	b002      	add	sp, #8
 80091a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80091a4:	b003      	add	sp, #12
 80091a6:	4770      	bx	lr
 80091a8:	20000010 	.word	0x20000010

080091ac <__ascii_mbtowc>:
 80091ac:	b082      	sub	sp, #8
 80091ae:	b901      	cbnz	r1, 80091b2 <__ascii_mbtowc+0x6>
 80091b0:	a901      	add	r1, sp, #4
 80091b2:	b142      	cbz	r2, 80091c6 <__ascii_mbtowc+0x1a>
 80091b4:	b14b      	cbz	r3, 80091ca <__ascii_mbtowc+0x1e>
 80091b6:	7813      	ldrb	r3, [r2, #0]
 80091b8:	600b      	str	r3, [r1, #0]
 80091ba:	7812      	ldrb	r2, [r2, #0]
 80091bc:	1e10      	subs	r0, r2, #0
 80091be:	bf18      	it	ne
 80091c0:	2001      	movne	r0, #1
 80091c2:	b002      	add	sp, #8
 80091c4:	4770      	bx	lr
 80091c6:	4610      	mov	r0, r2
 80091c8:	e7fb      	b.n	80091c2 <__ascii_mbtowc+0x16>
 80091ca:	f06f 0001 	mvn.w	r0, #1
 80091ce:	e7f8      	b.n	80091c2 <__ascii_mbtowc+0x16>

080091d0 <memmove>:
 80091d0:	4288      	cmp	r0, r1
 80091d2:	b510      	push	{r4, lr}
 80091d4:	eb01 0402 	add.w	r4, r1, r2
 80091d8:	d902      	bls.n	80091e0 <memmove+0x10>
 80091da:	4284      	cmp	r4, r0
 80091dc:	4623      	mov	r3, r4
 80091de:	d807      	bhi.n	80091f0 <memmove+0x20>
 80091e0:	1e43      	subs	r3, r0, #1
 80091e2:	42a1      	cmp	r1, r4
 80091e4:	d008      	beq.n	80091f8 <memmove+0x28>
 80091e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091ee:	e7f8      	b.n	80091e2 <memmove+0x12>
 80091f0:	4402      	add	r2, r0
 80091f2:	4601      	mov	r1, r0
 80091f4:	428a      	cmp	r2, r1
 80091f6:	d100      	bne.n	80091fa <memmove+0x2a>
 80091f8:	bd10      	pop	{r4, pc}
 80091fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009202:	e7f7      	b.n	80091f4 <memmove+0x24>

08009204 <__malloc_lock>:
 8009204:	4801      	ldr	r0, [pc, #4]	; (800920c <__malloc_lock+0x8>)
 8009206:	f000 bc17 	b.w	8009a38 <__retarget_lock_acquire_recursive>
 800920a:	bf00      	nop
 800920c:	20000840 	.word	0x20000840

08009210 <__malloc_unlock>:
 8009210:	4801      	ldr	r0, [pc, #4]	; (8009218 <__malloc_unlock+0x8>)
 8009212:	f000 bc12 	b.w	8009a3a <__retarget_lock_release_recursive>
 8009216:	bf00      	nop
 8009218:	20000840 	.word	0x20000840

0800921c <_realloc_r>:
 800921c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800921e:	4607      	mov	r7, r0
 8009220:	4614      	mov	r4, r2
 8009222:	460e      	mov	r6, r1
 8009224:	b921      	cbnz	r1, 8009230 <_realloc_r+0x14>
 8009226:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800922a:	4611      	mov	r1, r2
 800922c:	f7ff bdc8 	b.w	8008dc0 <_malloc_r>
 8009230:	b922      	cbnz	r2, 800923c <_realloc_r+0x20>
 8009232:	f7ff fd75 	bl	8008d20 <_free_r>
 8009236:	4625      	mov	r5, r4
 8009238:	4628      	mov	r0, r5
 800923a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800923c:	f000 fc62 	bl	8009b04 <_malloc_usable_size_r>
 8009240:	42a0      	cmp	r0, r4
 8009242:	d20f      	bcs.n	8009264 <_realloc_r+0x48>
 8009244:	4621      	mov	r1, r4
 8009246:	4638      	mov	r0, r7
 8009248:	f7ff fdba 	bl	8008dc0 <_malloc_r>
 800924c:	4605      	mov	r5, r0
 800924e:	2800      	cmp	r0, #0
 8009250:	d0f2      	beq.n	8009238 <_realloc_r+0x1c>
 8009252:	4631      	mov	r1, r6
 8009254:	4622      	mov	r2, r4
 8009256:	f7ff f9c7 	bl	80085e8 <memcpy>
 800925a:	4631      	mov	r1, r6
 800925c:	4638      	mov	r0, r7
 800925e:	f7ff fd5f 	bl	8008d20 <_free_r>
 8009262:	e7e9      	b.n	8009238 <_realloc_r+0x1c>
 8009264:	4635      	mov	r5, r6
 8009266:	e7e7      	b.n	8009238 <_realloc_r+0x1c>

08009268 <__sfputc_r>:
 8009268:	6893      	ldr	r3, [r2, #8]
 800926a:	3b01      	subs	r3, #1
 800926c:	2b00      	cmp	r3, #0
 800926e:	b410      	push	{r4}
 8009270:	6093      	str	r3, [r2, #8]
 8009272:	da08      	bge.n	8009286 <__sfputc_r+0x1e>
 8009274:	6994      	ldr	r4, [r2, #24]
 8009276:	42a3      	cmp	r3, r4
 8009278:	db01      	blt.n	800927e <__sfputc_r+0x16>
 800927a:	290a      	cmp	r1, #10
 800927c:	d103      	bne.n	8009286 <__sfputc_r+0x1e>
 800927e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009282:	f000 b94b 	b.w	800951c <__swbuf_r>
 8009286:	6813      	ldr	r3, [r2, #0]
 8009288:	1c58      	adds	r0, r3, #1
 800928a:	6010      	str	r0, [r2, #0]
 800928c:	7019      	strb	r1, [r3, #0]
 800928e:	4608      	mov	r0, r1
 8009290:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009294:	4770      	bx	lr

08009296 <__sfputs_r>:
 8009296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009298:	4606      	mov	r6, r0
 800929a:	460f      	mov	r7, r1
 800929c:	4614      	mov	r4, r2
 800929e:	18d5      	adds	r5, r2, r3
 80092a0:	42ac      	cmp	r4, r5
 80092a2:	d101      	bne.n	80092a8 <__sfputs_r+0x12>
 80092a4:	2000      	movs	r0, #0
 80092a6:	e007      	b.n	80092b8 <__sfputs_r+0x22>
 80092a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092ac:	463a      	mov	r2, r7
 80092ae:	4630      	mov	r0, r6
 80092b0:	f7ff ffda 	bl	8009268 <__sfputc_r>
 80092b4:	1c43      	adds	r3, r0, #1
 80092b6:	d1f3      	bne.n	80092a0 <__sfputs_r+0xa>
 80092b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080092bc <_vfiprintf_r>:
 80092bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c0:	460d      	mov	r5, r1
 80092c2:	b09d      	sub	sp, #116	; 0x74
 80092c4:	4614      	mov	r4, r2
 80092c6:	4698      	mov	r8, r3
 80092c8:	4606      	mov	r6, r0
 80092ca:	b118      	cbz	r0, 80092d4 <_vfiprintf_r+0x18>
 80092cc:	6983      	ldr	r3, [r0, #24]
 80092ce:	b90b      	cbnz	r3, 80092d4 <_vfiprintf_r+0x18>
 80092d0:	f000 fb14 	bl	80098fc <__sinit>
 80092d4:	4b89      	ldr	r3, [pc, #548]	; (80094fc <_vfiprintf_r+0x240>)
 80092d6:	429d      	cmp	r5, r3
 80092d8:	d11b      	bne.n	8009312 <_vfiprintf_r+0x56>
 80092da:	6875      	ldr	r5, [r6, #4]
 80092dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092de:	07d9      	lsls	r1, r3, #31
 80092e0:	d405      	bmi.n	80092ee <_vfiprintf_r+0x32>
 80092e2:	89ab      	ldrh	r3, [r5, #12]
 80092e4:	059a      	lsls	r2, r3, #22
 80092e6:	d402      	bmi.n	80092ee <_vfiprintf_r+0x32>
 80092e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092ea:	f000 fba5 	bl	8009a38 <__retarget_lock_acquire_recursive>
 80092ee:	89ab      	ldrh	r3, [r5, #12]
 80092f0:	071b      	lsls	r3, r3, #28
 80092f2:	d501      	bpl.n	80092f8 <_vfiprintf_r+0x3c>
 80092f4:	692b      	ldr	r3, [r5, #16]
 80092f6:	b9eb      	cbnz	r3, 8009334 <_vfiprintf_r+0x78>
 80092f8:	4629      	mov	r1, r5
 80092fa:	4630      	mov	r0, r6
 80092fc:	f000 f96e 	bl	80095dc <__swsetup_r>
 8009300:	b1c0      	cbz	r0, 8009334 <_vfiprintf_r+0x78>
 8009302:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009304:	07dc      	lsls	r4, r3, #31
 8009306:	d50e      	bpl.n	8009326 <_vfiprintf_r+0x6a>
 8009308:	f04f 30ff 	mov.w	r0, #4294967295
 800930c:	b01d      	add	sp, #116	; 0x74
 800930e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009312:	4b7b      	ldr	r3, [pc, #492]	; (8009500 <_vfiprintf_r+0x244>)
 8009314:	429d      	cmp	r5, r3
 8009316:	d101      	bne.n	800931c <_vfiprintf_r+0x60>
 8009318:	68b5      	ldr	r5, [r6, #8]
 800931a:	e7df      	b.n	80092dc <_vfiprintf_r+0x20>
 800931c:	4b79      	ldr	r3, [pc, #484]	; (8009504 <_vfiprintf_r+0x248>)
 800931e:	429d      	cmp	r5, r3
 8009320:	bf08      	it	eq
 8009322:	68f5      	ldreq	r5, [r6, #12]
 8009324:	e7da      	b.n	80092dc <_vfiprintf_r+0x20>
 8009326:	89ab      	ldrh	r3, [r5, #12]
 8009328:	0598      	lsls	r0, r3, #22
 800932a:	d4ed      	bmi.n	8009308 <_vfiprintf_r+0x4c>
 800932c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800932e:	f000 fb84 	bl	8009a3a <__retarget_lock_release_recursive>
 8009332:	e7e9      	b.n	8009308 <_vfiprintf_r+0x4c>
 8009334:	2300      	movs	r3, #0
 8009336:	9309      	str	r3, [sp, #36]	; 0x24
 8009338:	2320      	movs	r3, #32
 800933a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800933e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009342:	2330      	movs	r3, #48	; 0x30
 8009344:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009508 <_vfiprintf_r+0x24c>
 8009348:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800934c:	f04f 0901 	mov.w	r9, #1
 8009350:	4623      	mov	r3, r4
 8009352:	469a      	mov	sl, r3
 8009354:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009358:	b10a      	cbz	r2, 800935e <_vfiprintf_r+0xa2>
 800935a:	2a25      	cmp	r2, #37	; 0x25
 800935c:	d1f9      	bne.n	8009352 <_vfiprintf_r+0x96>
 800935e:	ebba 0b04 	subs.w	fp, sl, r4
 8009362:	d00b      	beq.n	800937c <_vfiprintf_r+0xc0>
 8009364:	465b      	mov	r3, fp
 8009366:	4622      	mov	r2, r4
 8009368:	4629      	mov	r1, r5
 800936a:	4630      	mov	r0, r6
 800936c:	f7ff ff93 	bl	8009296 <__sfputs_r>
 8009370:	3001      	adds	r0, #1
 8009372:	f000 80aa 	beq.w	80094ca <_vfiprintf_r+0x20e>
 8009376:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009378:	445a      	add	r2, fp
 800937a:	9209      	str	r2, [sp, #36]	; 0x24
 800937c:	f89a 3000 	ldrb.w	r3, [sl]
 8009380:	2b00      	cmp	r3, #0
 8009382:	f000 80a2 	beq.w	80094ca <_vfiprintf_r+0x20e>
 8009386:	2300      	movs	r3, #0
 8009388:	f04f 32ff 	mov.w	r2, #4294967295
 800938c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009390:	f10a 0a01 	add.w	sl, sl, #1
 8009394:	9304      	str	r3, [sp, #16]
 8009396:	9307      	str	r3, [sp, #28]
 8009398:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800939c:	931a      	str	r3, [sp, #104]	; 0x68
 800939e:	4654      	mov	r4, sl
 80093a0:	2205      	movs	r2, #5
 80093a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093a6:	4858      	ldr	r0, [pc, #352]	; (8009508 <_vfiprintf_r+0x24c>)
 80093a8:	f7f6 ff3a 	bl	8000220 <memchr>
 80093ac:	9a04      	ldr	r2, [sp, #16]
 80093ae:	b9d8      	cbnz	r0, 80093e8 <_vfiprintf_r+0x12c>
 80093b0:	06d1      	lsls	r1, r2, #27
 80093b2:	bf44      	itt	mi
 80093b4:	2320      	movmi	r3, #32
 80093b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093ba:	0713      	lsls	r3, r2, #28
 80093bc:	bf44      	itt	mi
 80093be:	232b      	movmi	r3, #43	; 0x2b
 80093c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093c4:	f89a 3000 	ldrb.w	r3, [sl]
 80093c8:	2b2a      	cmp	r3, #42	; 0x2a
 80093ca:	d015      	beq.n	80093f8 <_vfiprintf_r+0x13c>
 80093cc:	9a07      	ldr	r2, [sp, #28]
 80093ce:	4654      	mov	r4, sl
 80093d0:	2000      	movs	r0, #0
 80093d2:	f04f 0c0a 	mov.w	ip, #10
 80093d6:	4621      	mov	r1, r4
 80093d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093dc:	3b30      	subs	r3, #48	; 0x30
 80093de:	2b09      	cmp	r3, #9
 80093e0:	d94e      	bls.n	8009480 <_vfiprintf_r+0x1c4>
 80093e2:	b1b0      	cbz	r0, 8009412 <_vfiprintf_r+0x156>
 80093e4:	9207      	str	r2, [sp, #28]
 80093e6:	e014      	b.n	8009412 <_vfiprintf_r+0x156>
 80093e8:	eba0 0308 	sub.w	r3, r0, r8
 80093ec:	fa09 f303 	lsl.w	r3, r9, r3
 80093f0:	4313      	orrs	r3, r2
 80093f2:	9304      	str	r3, [sp, #16]
 80093f4:	46a2      	mov	sl, r4
 80093f6:	e7d2      	b.n	800939e <_vfiprintf_r+0xe2>
 80093f8:	9b03      	ldr	r3, [sp, #12]
 80093fa:	1d19      	adds	r1, r3, #4
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	9103      	str	r1, [sp, #12]
 8009400:	2b00      	cmp	r3, #0
 8009402:	bfbb      	ittet	lt
 8009404:	425b      	neglt	r3, r3
 8009406:	f042 0202 	orrlt.w	r2, r2, #2
 800940a:	9307      	strge	r3, [sp, #28]
 800940c:	9307      	strlt	r3, [sp, #28]
 800940e:	bfb8      	it	lt
 8009410:	9204      	strlt	r2, [sp, #16]
 8009412:	7823      	ldrb	r3, [r4, #0]
 8009414:	2b2e      	cmp	r3, #46	; 0x2e
 8009416:	d10c      	bne.n	8009432 <_vfiprintf_r+0x176>
 8009418:	7863      	ldrb	r3, [r4, #1]
 800941a:	2b2a      	cmp	r3, #42	; 0x2a
 800941c:	d135      	bne.n	800948a <_vfiprintf_r+0x1ce>
 800941e:	9b03      	ldr	r3, [sp, #12]
 8009420:	1d1a      	adds	r2, r3, #4
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	9203      	str	r2, [sp, #12]
 8009426:	2b00      	cmp	r3, #0
 8009428:	bfb8      	it	lt
 800942a:	f04f 33ff 	movlt.w	r3, #4294967295
 800942e:	3402      	adds	r4, #2
 8009430:	9305      	str	r3, [sp, #20]
 8009432:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009518 <_vfiprintf_r+0x25c>
 8009436:	7821      	ldrb	r1, [r4, #0]
 8009438:	2203      	movs	r2, #3
 800943a:	4650      	mov	r0, sl
 800943c:	f7f6 fef0 	bl	8000220 <memchr>
 8009440:	b140      	cbz	r0, 8009454 <_vfiprintf_r+0x198>
 8009442:	2340      	movs	r3, #64	; 0x40
 8009444:	eba0 000a 	sub.w	r0, r0, sl
 8009448:	fa03 f000 	lsl.w	r0, r3, r0
 800944c:	9b04      	ldr	r3, [sp, #16]
 800944e:	4303      	orrs	r3, r0
 8009450:	3401      	adds	r4, #1
 8009452:	9304      	str	r3, [sp, #16]
 8009454:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009458:	482c      	ldr	r0, [pc, #176]	; (800950c <_vfiprintf_r+0x250>)
 800945a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800945e:	2206      	movs	r2, #6
 8009460:	f7f6 fede 	bl	8000220 <memchr>
 8009464:	2800      	cmp	r0, #0
 8009466:	d03f      	beq.n	80094e8 <_vfiprintf_r+0x22c>
 8009468:	4b29      	ldr	r3, [pc, #164]	; (8009510 <_vfiprintf_r+0x254>)
 800946a:	bb1b      	cbnz	r3, 80094b4 <_vfiprintf_r+0x1f8>
 800946c:	9b03      	ldr	r3, [sp, #12]
 800946e:	3307      	adds	r3, #7
 8009470:	f023 0307 	bic.w	r3, r3, #7
 8009474:	3308      	adds	r3, #8
 8009476:	9303      	str	r3, [sp, #12]
 8009478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800947a:	443b      	add	r3, r7
 800947c:	9309      	str	r3, [sp, #36]	; 0x24
 800947e:	e767      	b.n	8009350 <_vfiprintf_r+0x94>
 8009480:	fb0c 3202 	mla	r2, ip, r2, r3
 8009484:	460c      	mov	r4, r1
 8009486:	2001      	movs	r0, #1
 8009488:	e7a5      	b.n	80093d6 <_vfiprintf_r+0x11a>
 800948a:	2300      	movs	r3, #0
 800948c:	3401      	adds	r4, #1
 800948e:	9305      	str	r3, [sp, #20]
 8009490:	4619      	mov	r1, r3
 8009492:	f04f 0c0a 	mov.w	ip, #10
 8009496:	4620      	mov	r0, r4
 8009498:	f810 2b01 	ldrb.w	r2, [r0], #1
 800949c:	3a30      	subs	r2, #48	; 0x30
 800949e:	2a09      	cmp	r2, #9
 80094a0:	d903      	bls.n	80094aa <_vfiprintf_r+0x1ee>
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d0c5      	beq.n	8009432 <_vfiprintf_r+0x176>
 80094a6:	9105      	str	r1, [sp, #20]
 80094a8:	e7c3      	b.n	8009432 <_vfiprintf_r+0x176>
 80094aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80094ae:	4604      	mov	r4, r0
 80094b0:	2301      	movs	r3, #1
 80094b2:	e7f0      	b.n	8009496 <_vfiprintf_r+0x1da>
 80094b4:	ab03      	add	r3, sp, #12
 80094b6:	9300      	str	r3, [sp, #0]
 80094b8:	462a      	mov	r2, r5
 80094ba:	4b16      	ldr	r3, [pc, #88]	; (8009514 <_vfiprintf_r+0x258>)
 80094bc:	a904      	add	r1, sp, #16
 80094be:	4630      	mov	r0, r6
 80094c0:	f7fd fe0e 	bl	80070e0 <_printf_float>
 80094c4:	4607      	mov	r7, r0
 80094c6:	1c78      	adds	r0, r7, #1
 80094c8:	d1d6      	bne.n	8009478 <_vfiprintf_r+0x1bc>
 80094ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094cc:	07d9      	lsls	r1, r3, #31
 80094ce:	d405      	bmi.n	80094dc <_vfiprintf_r+0x220>
 80094d0:	89ab      	ldrh	r3, [r5, #12]
 80094d2:	059a      	lsls	r2, r3, #22
 80094d4:	d402      	bmi.n	80094dc <_vfiprintf_r+0x220>
 80094d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094d8:	f000 faaf 	bl	8009a3a <__retarget_lock_release_recursive>
 80094dc:	89ab      	ldrh	r3, [r5, #12]
 80094de:	065b      	lsls	r3, r3, #25
 80094e0:	f53f af12 	bmi.w	8009308 <_vfiprintf_r+0x4c>
 80094e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094e6:	e711      	b.n	800930c <_vfiprintf_r+0x50>
 80094e8:	ab03      	add	r3, sp, #12
 80094ea:	9300      	str	r3, [sp, #0]
 80094ec:	462a      	mov	r2, r5
 80094ee:	4b09      	ldr	r3, [pc, #36]	; (8009514 <_vfiprintf_r+0x258>)
 80094f0:	a904      	add	r1, sp, #16
 80094f2:	4630      	mov	r0, r6
 80094f4:	f7fe f898 	bl	8007628 <_printf_i>
 80094f8:	e7e4      	b.n	80094c4 <_vfiprintf_r+0x208>
 80094fa:	bf00      	nop
 80094fc:	0800a114 	.word	0x0800a114
 8009500:	0800a134 	.word	0x0800a134
 8009504:	0800a0f4 	.word	0x0800a0f4
 8009508:	08009f9c 	.word	0x08009f9c
 800950c:	08009fa6 	.word	0x08009fa6
 8009510:	080070e1 	.word	0x080070e1
 8009514:	08009297 	.word	0x08009297
 8009518:	08009fa2 	.word	0x08009fa2

0800951c <__swbuf_r>:
 800951c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800951e:	460e      	mov	r6, r1
 8009520:	4614      	mov	r4, r2
 8009522:	4605      	mov	r5, r0
 8009524:	b118      	cbz	r0, 800952e <__swbuf_r+0x12>
 8009526:	6983      	ldr	r3, [r0, #24]
 8009528:	b90b      	cbnz	r3, 800952e <__swbuf_r+0x12>
 800952a:	f000 f9e7 	bl	80098fc <__sinit>
 800952e:	4b21      	ldr	r3, [pc, #132]	; (80095b4 <__swbuf_r+0x98>)
 8009530:	429c      	cmp	r4, r3
 8009532:	d12b      	bne.n	800958c <__swbuf_r+0x70>
 8009534:	686c      	ldr	r4, [r5, #4]
 8009536:	69a3      	ldr	r3, [r4, #24]
 8009538:	60a3      	str	r3, [r4, #8]
 800953a:	89a3      	ldrh	r3, [r4, #12]
 800953c:	071a      	lsls	r2, r3, #28
 800953e:	d52f      	bpl.n	80095a0 <__swbuf_r+0x84>
 8009540:	6923      	ldr	r3, [r4, #16]
 8009542:	b36b      	cbz	r3, 80095a0 <__swbuf_r+0x84>
 8009544:	6923      	ldr	r3, [r4, #16]
 8009546:	6820      	ldr	r0, [r4, #0]
 8009548:	1ac0      	subs	r0, r0, r3
 800954a:	6963      	ldr	r3, [r4, #20]
 800954c:	b2f6      	uxtb	r6, r6
 800954e:	4283      	cmp	r3, r0
 8009550:	4637      	mov	r7, r6
 8009552:	dc04      	bgt.n	800955e <__swbuf_r+0x42>
 8009554:	4621      	mov	r1, r4
 8009556:	4628      	mov	r0, r5
 8009558:	f000 f93c 	bl	80097d4 <_fflush_r>
 800955c:	bb30      	cbnz	r0, 80095ac <__swbuf_r+0x90>
 800955e:	68a3      	ldr	r3, [r4, #8]
 8009560:	3b01      	subs	r3, #1
 8009562:	60a3      	str	r3, [r4, #8]
 8009564:	6823      	ldr	r3, [r4, #0]
 8009566:	1c5a      	adds	r2, r3, #1
 8009568:	6022      	str	r2, [r4, #0]
 800956a:	701e      	strb	r6, [r3, #0]
 800956c:	6963      	ldr	r3, [r4, #20]
 800956e:	3001      	adds	r0, #1
 8009570:	4283      	cmp	r3, r0
 8009572:	d004      	beq.n	800957e <__swbuf_r+0x62>
 8009574:	89a3      	ldrh	r3, [r4, #12]
 8009576:	07db      	lsls	r3, r3, #31
 8009578:	d506      	bpl.n	8009588 <__swbuf_r+0x6c>
 800957a:	2e0a      	cmp	r6, #10
 800957c:	d104      	bne.n	8009588 <__swbuf_r+0x6c>
 800957e:	4621      	mov	r1, r4
 8009580:	4628      	mov	r0, r5
 8009582:	f000 f927 	bl	80097d4 <_fflush_r>
 8009586:	b988      	cbnz	r0, 80095ac <__swbuf_r+0x90>
 8009588:	4638      	mov	r0, r7
 800958a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800958c:	4b0a      	ldr	r3, [pc, #40]	; (80095b8 <__swbuf_r+0x9c>)
 800958e:	429c      	cmp	r4, r3
 8009590:	d101      	bne.n	8009596 <__swbuf_r+0x7a>
 8009592:	68ac      	ldr	r4, [r5, #8]
 8009594:	e7cf      	b.n	8009536 <__swbuf_r+0x1a>
 8009596:	4b09      	ldr	r3, [pc, #36]	; (80095bc <__swbuf_r+0xa0>)
 8009598:	429c      	cmp	r4, r3
 800959a:	bf08      	it	eq
 800959c:	68ec      	ldreq	r4, [r5, #12]
 800959e:	e7ca      	b.n	8009536 <__swbuf_r+0x1a>
 80095a0:	4621      	mov	r1, r4
 80095a2:	4628      	mov	r0, r5
 80095a4:	f000 f81a 	bl	80095dc <__swsetup_r>
 80095a8:	2800      	cmp	r0, #0
 80095aa:	d0cb      	beq.n	8009544 <__swbuf_r+0x28>
 80095ac:	f04f 37ff 	mov.w	r7, #4294967295
 80095b0:	e7ea      	b.n	8009588 <__swbuf_r+0x6c>
 80095b2:	bf00      	nop
 80095b4:	0800a114 	.word	0x0800a114
 80095b8:	0800a134 	.word	0x0800a134
 80095bc:	0800a0f4 	.word	0x0800a0f4

080095c0 <__ascii_wctomb>:
 80095c0:	b149      	cbz	r1, 80095d6 <__ascii_wctomb+0x16>
 80095c2:	2aff      	cmp	r2, #255	; 0xff
 80095c4:	bf85      	ittet	hi
 80095c6:	238a      	movhi	r3, #138	; 0x8a
 80095c8:	6003      	strhi	r3, [r0, #0]
 80095ca:	700a      	strbls	r2, [r1, #0]
 80095cc:	f04f 30ff 	movhi.w	r0, #4294967295
 80095d0:	bf98      	it	ls
 80095d2:	2001      	movls	r0, #1
 80095d4:	4770      	bx	lr
 80095d6:	4608      	mov	r0, r1
 80095d8:	4770      	bx	lr
	...

080095dc <__swsetup_r>:
 80095dc:	4b32      	ldr	r3, [pc, #200]	; (80096a8 <__swsetup_r+0xcc>)
 80095de:	b570      	push	{r4, r5, r6, lr}
 80095e0:	681d      	ldr	r5, [r3, #0]
 80095e2:	4606      	mov	r6, r0
 80095e4:	460c      	mov	r4, r1
 80095e6:	b125      	cbz	r5, 80095f2 <__swsetup_r+0x16>
 80095e8:	69ab      	ldr	r3, [r5, #24]
 80095ea:	b913      	cbnz	r3, 80095f2 <__swsetup_r+0x16>
 80095ec:	4628      	mov	r0, r5
 80095ee:	f000 f985 	bl	80098fc <__sinit>
 80095f2:	4b2e      	ldr	r3, [pc, #184]	; (80096ac <__swsetup_r+0xd0>)
 80095f4:	429c      	cmp	r4, r3
 80095f6:	d10f      	bne.n	8009618 <__swsetup_r+0x3c>
 80095f8:	686c      	ldr	r4, [r5, #4]
 80095fa:	89a3      	ldrh	r3, [r4, #12]
 80095fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009600:	0719      	lsls	r1, r3, #28
 8009602:	d42c      	bmi.n	800965e <__swsetup_r+0x82>
 8009604:	06dd      	lsls	r5, r3, #27
 8009606:	d411      	bmi.n	800962c <__swsetup_r+0x50>
 8009608:	2309      	movs	r3, #9
 800960a:	6033      	str	r3, [r6, #0]
 800960c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009610:	81a3      	strh	r3, [r4, #12]
 8009612:	f04f 30ff 	mov.w	r0, #4294967295
 8009616:	e03e      	b.n	8009696 <__swsetup_r+0xba>
 8009618:	4b25      	ldr	r3, [pc, #148]	; (80096b0 <__swsetup_r+0xd4>)
 800961a:	429c      	cmp	r4, r3
 800961c:	d101      	bne.n	8009622 <__swsetup_r+0x46>
 800961e:	68ac      	ldr	r4, [r5, #8]
 8009620:	e7eb      	b.n	80095fa <__swsetup_r+0x1e>
 8009622:	4b24      	ldr	r3, [pc, #144]	; (80096b4 <__swsetup_r+0xd8>)
 8009624:	429c      	cmp	r4, r3
 8009626:	bf08      	it	eq
 8009628:	68ec      	ldreq	r4, [r5, #12]
 800962a:	e7e6      	b.n	80095fa <__swsetup_r+0x1e>
 800962c:	0758      	lsls	r0, r3, #29
 800962e:	d512      	bpl.n	8009656 <__swsetup_r+0x7a>
 8009630:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009632:	b141      	cbz	r1, 8009646 <__swsetup_r+0x6a>
 8009634:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009638:	4299      	cmp	r1, r3
 800963a:	d002      	beq.n	8009642 <__swsetup_r+0x66>
 800963c:	4630      	mov	r0, r6
 800963e:	f7ff fb6f 	bl	8008d20 <_free_r>
 8009642:	2300      	movs	r3, #0
 8009644:	6363      	str	r3, [r4, #52]	; 0x34
 8009646:	89a3      	ldrh	r3, [r4, #12]
 8009648:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800964c:	81a3      	strh	r3, [r4, #12]
 800964e:	2300      	movs	r3, #0
 8009650:	6063      	str	r3, [r4, #4]
 8009652:	6923      	ldr	r3, [r4, #16]
 8009654:	6023      	str	r3, [r4, #0]
 8009656:	89a3      	ldrh	r3, [r4, #12]
 8009658:	f043 0308 	orr.w	r3, r3, #8
 800965c:	81a3      	strh	r3, [r4, #12]
 800965e:	6923      	ldr	r3, [r4, #16]
 8009660:	b94b      	cbnz	r3, 8009676 <__swsetup_r+0x9a>
 8009662:	89a3      	ldrh	r3, [r4, #12]
 8009664:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800966c:	d003      	beq.n	8009676 <__swsetup_r+0x9a>
 800966e:	4621      	mov	r1, r4
 8009670:	4630      	mov	r0, r6
 8009672:	f000 fa07 	bl	8009a84 <__smakebuf_r>
 8009676:	89a0      	ldrh	r0, [r4, #12]
 8009678:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800967c:	f010 0301 	ands.w	r3, r0, #1
 8009680:	d00a      	beq.n	8009698 <__swsetup_r+0xbc>
 8009682:	2300      	movs	r3, #0
 8009684:	60a3      	str	r3, [r4, #8]
 8009686:	6963      	ldr	r3, [r4, #20]
 8009688:	425b      	negs	r3, r3
 800968a:	61a3      	str	r3, [r4, #24]
 800968c:	6923      	ldr	r3, [r4, #16]
 800968e:	b943      	cbnz	r3, 80096a2 <__swsetup_r+0xc6>
 8009690:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009694:	d1ba      	bne.n	800960c <__swsetup_r+0x30>
 8009696:	bd70      	pop	{r4, r5, r6, pc}
 8009698:	0781      	lsls	r1, r0, #30
 800969a:	bf58      	it	pl
 800969c:	6963      	ldrpl	r3, [r4, #20]
 800969e:	60a3      	str	r3, [r4, #8]
 80096a0:	e7f4      	b.n	800968c <__swsetup_r+0xb0>
 80096a2:	2000      	movs	r0, #0
 80096a4:	e7f7      	b.n	8009696 <__swsetup_r+0xba>
 80096a6:	bf00      	nop
 80096a8:	20000010 	.word	0x20000010
 80096ac:	0800a114 	.word	0x0800a114
 80096b0:	0800a134 	.word	0x0800a134
 80096b4:	0800a0f4 	.word	0x0800a0f4

080096b8 <abort>:
 80096b8:	b508      	push	{r3, lr}
 80096ba:	2006      	movs	r0, #6
 80096bc:	f000 fa52 	bl	8009b64 <raise>
 80096c0:	2001      	movs	r0, #1
 80096c2:	f7f8 ff3b 	bl	800253c <_exit>
	...

080096c8 <__sflush_r>:
 80096c8:	898a      	ldrh	r2, [r1, #12]
 80096ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096ce:	4605      	mov	r5, r0
 80096d0:	0710      	lsls	r0, r2, #28
 80096d2:	460c      	mov	r4, r1
 80096d4:	d458      	bmi.n	8009788 <__sflush_r+0xc0>
 80096d6:	684b      	ldr	r3, [r1, #4]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	dc05      	bgt.n	80096e8 <__sflush_r+0x20>
 80096dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80096de:	2b00      	cmp	r3, #0
 80096e0:	dc02      	bgt.n	80096e8 <__sflush_r+0x20>
 80096e2:	2000      	movs	r0, #0
 80096e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096ea:	2e00      	cmp	r6, #0
 80096ec:	d0f9      	beq.n	80096e2 <__sflush_r+0x1a>
 80096ee:	2300      	movs	r3, #0
 80096f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80096f4:	682f      	ldr	r7, [r5, #0]
 80096f6:	602b      	str	r3, [r5, #0]
 80096f8:	d032      	beq.n	8009760 <__sflush_r+0x98>
 80096fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80096fc:	89a3      	ldrh	r3, [r4, #12]
 80096fe:	075a      	lsls	r2, r3, #29
 8009700:	d505      	bpl.n	800970e <__sflush_r+0x46>
 8009702:	6863      	ldr	r3, [r4, #4]
 8009704:	1ac0      	subs	r0, r0, r3
 8009706:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009708:	b10b      	cbz	r3, 800970e <__sflush_r+0x46>
 800970a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800970c:	1ac0      	subs	r0, r0, r3
 800970e:	2300      	movs	r3, #0
 8009710:	4602      	mov	r2, r0
 8009712:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009714:	6a21      	ldr	r1, [r4, #32]
 8009716:	4628      	mov	r0, r5
 8009718:	47b0      	blx	r6
 800971a:	1c43      	adds	r3, r0, #1
 800971c:	89a3      	ldrh	r3, [r4, #12]
 800971e:	d106      	bne.n	800972e <__sflush_r+0x66>
 8009720:	6829      	ldr	r1, [r5, #0]
 8009722:	291d      	cmp	r1, #29
 8009724:	d82c      	bhi.n	8009780 <__sflush_r+0xb8>
 8009726:	4a2a      	ldr	r2, [pc, #168]	; (80097d0 <__sflush_r+0x108>)
 8009728:	40ca      	lsrs	r2, r1
 800972a:	07d6      	lsls	r6, r2, #31
 800972c:	d528      	bpl.n	8009780 <__sflush_r+0xb8>
 800972e:	2200      	movs	r2, #0
 8009730:	6062      	str	r2, [r4, #4]
 8009732:	04d9      	lsls	r1, r3, #19
 8009734:	6922      	ldr	r2, [r4, #16]
 8009736:	6022      	str	r2, [r4, #0]
 8009738:	d504      	bpl.n	8009744 <__sflush_r+0x7c>
 800973a:	1c42      	adds	r2, r0, #1
 800973c:	d101      	bne.n	8009742 <__sflush_r+0x7a>
 800973e:	682b      	ldr	r3, [r5, #0]
 8009740:	b903      	cbnz	r3, 8009744 <__sflush_r+0x7c>
 8009742:	6560      	str	r0, [r4, #84]	; 0x54
 8009744:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009746:	602f      	str	r7, [r5, #0]
 8009748:	2900      	cmp	r1, #0
 800974a:	d0ca      	beq.n	80096e2 <__sflush_r+0x1a>
 800974c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009750:	4299      	cmp	r1, r3
 8009752:	d002      	beq.n	800975a <__sflush_r+0x92>
 8009754:	4628      	mov	r0, r5
 8009756:	f7ff fae3 	bl	8008d20 <_free_r>
 800975a:	2000      	movs	r0, #0
 800975c:	6360      	str	r0, [r4, #52]	; 0x34
 800975e:	e7c1      	b.n	80096e4 <__sflush_r+0x1c>
 8009760:	6a21      	ldr	r1, [r4, #32]
 8009762:	2301      	movs	r3, #1
 8009764:	4628      	mov	r0, r5
 8009766:	47b0      	blx	r6
 8009768:	1c41      	adds	r1, r0, #1
 800976a:	d1c7      	bne.n	80096fc <__sflush_r+0x34>
 800976c:	682b      	ldr	r3, [r5, #0]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d0c4      	beq.n	80096fc <__sflush_r+0x34>
 8009772:	2b1d      	cmp	r3, #29
 8009774:	d001      	beq.n	800977a <__sflush_r+0xb2>
 8009776:	2b16      	cmp	r3, #22
 8009778:	d101      	bne.n	800977e <__sflush_r+0xb6>
 800977a:	602f      	str	r7, [r5, #0]
 800977c:	e7b1      	b.n	80096e2 <__sflush_r+0x1a>
 800977e:	89a3      	ldrh	r3, [r4, #12]
 8009780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009784:	81a3      	strh	r3, [r4, #12]
 8009786:	e7ad      	b.n	80096e4 <__sflush_r+0x1c>
 8009788:	690f      	ldr	r7, [r1, #16]
 800978a:	2f00      	cmp	r7, #0
 800978c:	d0a9      	beq.n	80096e2 <__sflush_r+0x1a>
 800978e:	0793      	lsls	r3, r2, #30
 8009790:	680e      	ldr	r6, [r1, #0]
 8009792:	bf08      	it	eq
 8009794:	694b      	ldreq	r3, [r1, #20]
 8009796:	600f      	str	r7, [r1, #0]
 8009798:	bf18      	it	ne
 800979a:	2300      	movne	r3, #0
 800979c:	eba6 0807 	sub.w	r8, r6, r7
 80097a0:	608b      	str	r3, [r1, #8]
 80097a2:	f1b8 0f00 	cmp.w	r8, #0
 80097a6:	dd9c      	ble.n	80096e2 <__sflush_r+0x1a>
 80097a8:	6a21      	ldr	r1, [r4, #32]
 80097aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80097ac:	4643      	mov	r3, r8
 80097ae:	463a      	mov	r2, r7
 80097b0:	4628      	mov	r0, r5
 80097b2:	47b0      	blx	r6
 80097b4:	2800      	cmp	r0, #0
 80097b6:	dc06      	bgt.n	80097c6 <__sflush_r+0xfe>
 80097b8:	89a3      	ldrh	r3, [r4, #12]
 80097ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097be:	81a3      	strh	r3, [r4, #12]
 80097c0:	f04f 30ff 	mov.w	r0, #4294967295
 80097c4:	e78e      	b.n	80096e4 <__sflush_r+0x1c>
 80097c6:	4407      	add	r7, r0
 80097c8:	eba8 0800 	sub.w	r8, r8, r0
 80097cc:	e7e9      	b.n	80097a2 <__sflush_r+0xda>
 80097ce:	bf00      	nop
 80097d0:	20400001 	.word	0x20400001

080097d4 <_fflush_r>:
 80097d4:	b538      	push	{r3, r4, r5, lr}
 80097d6:	690b      	ldr	r3, [r1, #16]
 80097d8:	4605      	mov	r5, r0
 80097da:	460c      	mov	r4, r1
 80097dc:	b913      	cbnz	r3, 80097e4 <_fflush_r+0x10>
 80097de:	2500      	movs	r5, #0
 80097e0:	4628      	mov	r0, r5
 80097e2:	bd38      	pop	{r3, r4, r5, pc}
 80097e4:	b118      	cbz	r0, 80097ee <_fflush_r+0x1a>
 80097e6:	6983      	ldr	r3, [r0, #24]
 80097e8:	b90b      	cbnz	r3, 80097ee <_fflush_r+0x1a>
 80097ea:	f000 f887 	bl	80098fc <__sinit>
 80097ee:	4b14      	ldr	r3, [pc, #80]	; (8009840 <_fflush_r+0x6c>)
 80097f0:	429c      	cmp	r4, r3
 80097f2:	d11b      	bne.n	800982c <_fflush_r+0x58>
 80097f4:	686c      	ldr	r4, [r5, #4]
 80097f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d0ef      	beq.n	80097de <_fflush_r+0xa>
 80097fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009800:	07d0      	lsls	r0, r2, #31
 8009802:	d404      	bmi.n	800980e <_fflush_r+0x3a>
 8009804:	0599      	lsls	r1, r3, #22
 8009806:	d402      	bmi.n	800980e <_fflush_r+0x3a>
 8009808:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800980a:	f000 f915 	bl	8009a38 <__retarget_lock_acquire_recursive>
 800980e:	4628      	mov	r0, r5
 8009810:	4621      	mov	r1, r4
 8009812:	f7ff ff59 	bl	80096c8 <__sflush_r>
 8009816:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009818:	07da      	lsls	r2, r3, #31
 800981a:	4605      	mov	r5, r0
 800981c:	d4e0      	bmi.n	80097e0 <_fflush_r+0xc>
 800981e:	89a3      	ldrh	r3, [r4, #12]
 8009820:	059b      	lsls	r3, r3, #22
 8009822:	d4dd      	bmi.n	80097e0 <_fflush_r+0xc>
 8009824:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009826:	f000 f908 	bl	8009a3a <__retarget_lock_release_recursive>
 800982a:	e7d9      	b.n	80097e0 <_fflush_r+0xc>
 800982c:	4b05      	ldr	r3, [pc, #20]	; (8009844 <_fflush_r+0x70>)
 800982e:	429c      	cmp	r4, r3
 8009830:	d101      	bne.n	8009836 <_fflush_r+0x62>
 8009832:	68ac      	ldr	r4, [r5, #8]
 8009834:	e7df      	b.n	80097f6 <_fflush_r+0x22>
 8009836:	4b04      	ldr	r3, [pc, #16]	; (8009848 <_fflush_r+0x74>)
 8009838:	429c      	cmp	r4, r3
 800983a:	bf08      	it	eq
 800983c:	68ec      	ldreq	r4, [r5, #12]
 800983e:	e7da      	b.n	80097f6 <_fflush_r+0x22>
 8009840:	0800a114 	.word	0x0800a114
 8009844:	0800a134 	.word	0x0800a134
 8009848:	0800a0f4 	.word	0x0800a0f4

0800984c <std>:
 800984c:	2300      	movs	r3, #0
 800984e:	b510      	push	{r4, lr}
 8009850:	4604      	mov	r4, r0
 8009852:	e9c0 3300 	strd	r3, r3, [r0]
 8009856:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800985a:	6083      	str	r3, [r0, #8]
 800985c:	8181      	strh	r1, [r0, #12]
 800985e:	6643      	str	r3, [r0, #100]	; 0x64
 8009860:	81c2      	strh	r2, [r0, #14]
 8009862:	6183      	str	r3, [r0, #24]
 8009864:	4619      	mov	r1, r3
 8009866:	2208      	movs	r2, #8
 8009868:	305c      	adds	r0, #92	; 0x5c
 800986a:	f7fd fb91 	bl	8006f90 <memset>
 800986e:	4b05      	ldr	r3, [pc, #20]	; (8009884 <std+0x38>)
 8009870:	6263      	str	r3, [r4, #36]	; 0x24
 8009872:	4b05      	ldr	r3, [pc, #20]	; (8009888 <std+0x3c>)
 8009874:	62a3      	str	r3, [r4, #40]	; 0x28
 8009876:	4b05      	ldr	r3, [pc, #20]	; (800988c <std+0x40>)
 8009878:	62e3      	str	r3, [r4, #44]	; 0x2c
 800987a:	4b05      	ldr	r3, [pc, #20]	; (8009890 <std+0x44>)
 800987c:	6224      	str	r4, [r4, #32]
 800987e:	6323      	str	r3, [r4, #48]	; 0x30
 8009880:	bd10      	pop	{r4, pc}
 8009882:	bf00      	nop
 8009884:	08009b9d 	.word	0x08009b9d
 8009888:	08009bbf 	.word	0x08009bbf
 800988c:	08009bf7 	.word	0x08009bf7
 8009890:	08009c1b 	.word	0x08009c1b

08009894 <_cleanup_r>:
 8009894:	4901      	ldr	r1, [pc, #4]	; (800989c <_cleanup_r+0x8>)
 8009896:	f000 b8af 	b.w	80099f8 <_fwalk_reent>
 800989a:	bf00      	nop
 800989c:	080097d5 	.word	0x080097d5

080098a0 <__sfmoreglue>:
 80098a0:	b570      	push	{r4, r5, r6, lr}
 80098a2:	1e4a      	subs	r2, r1, #1
 80098a4:	2568      	movs	r5, #104	; 0x68
 80098a6:	4355      	muls	r5, r2
 80098a8:	460e      	mov	r6, r1
 80098aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80098ae:	f7ff fa87 	bl	8008dc0 <_malloc_r>
 80098b2:	4604      	mov	r4, r0
 80098b4:	b140      	cbz	r0, 80098c8 <__sfmoreglue+0x28>
 80098b6:	2100      	movs	r1, #0
 80098b8:	e9c0 1600 	strd	r1, r6, [r0]
 80098bc:	300c      	adds	r0, #12
 80098be:	60a0      	str	r0, [r4, #8]
 80098c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80098c4:	f7fd fb64 	bl	8006f90 <memset>
 80098c8:	4620      	mov	r0, r4
 80098ca:	bd70      	pop	{r4, r5, r6, pc}

080098cc <__sfp_lock_acquire>:
 80098cc:	4801      	ldr	r0, [pc, #4]	; (80098d4 <__sfp_lock_acquire+0x8>)
 80098ce:	f000 b8b3 	b.w	8009a38 <__retarget_lock_acquire_recursive>
 80098d2:	bf00      	nop
 80098d4:	20000844 	.word	0x20000844

080098d8 <__sfp_lock_release>:
 80098d8:	4801      	ldr	r0, [pc, #4]	; (80098e0 <__sfp_lock_release+0x8>)
 80098da:	f000 b8ae 	b.w	8009a3a <__retarget_lock_release_recursive>
 80098de:	bf00      	nop
 80098e0:	20000844 	.word	0x20000844

080098e4 <__sinit_lock_acquire>:
 80098e4:	4801      	ldr	r0, [pc, #4]	; (80098ec <__sinit_lock_acquire+0x8>)
 80098e6:	f000 b8a7 	b.w	8009a38 <__retarget_lock_acquire_recursive>
 80098ea:	bf00      	nop
 80098ec:	2000083f 	.word	0x2000083f

080098f0 <__sinit_lock_release>:
 80098f0:	4801      	ldr	r0, [pc, #4]	; (80098f8 <__sinit_lock_release+0x8>)
 80098f2:	f000 b8a2 	b.w	8009a3a <__retarget_lock_release_recursive>
 80098f6:	bf00      	nop
 80098f8:	2000083f 	.word	0x2000083f

080098fc <__sinit>:
 80098fc:	b510      	push	{r4, lr}
 80098fe:	4604      	mov	r4, r0
 8009900:	f7ff fff0 	bl	80098e4 <__sinit_lock_acquire>
 8009904:	69a3      	ldr	r3, [r4, #24]
 8009906:	b11b      	cbz	r3, 8009910 <__sinit+0x14>
 8009908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800990c:	f7ff bff0 	b.w	80098f0 <__sinit_lock_release>
 8009910:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009914:	6523      	str	r3, [r4, #80]	; 0x50
 8009916:	4b13      	ldr	r3, [pc, #76]	; (8009964 <__sinit+0x68>)
 8009918:	4a13      	ldr	r2, [pc, #76]	; (8009968 <__sinit+0x6c>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	62a2      	str	r2, [r4, #40]	; 0x28
 800991e:	42a3      	cmp	r3, r4
 8009920:	bf04      	itt	eq
 8009922:	2301      	moveq	r3, #1
 8009924:	61a3      	streq	r3, [r4, #24]
 8009926:	4620      	mov	r0, r4
 8009928:	f000 f820 	bl	800996c <__sfp>
 800992c:	6060      	str	r0, [r4, #4]
 800992e:	4620      	mov	r0, r4
 8009930:	f000 f81c 	bl	800996c <__sfp>
 8009934:	60a0      	str	r0, [r4, #8]
 8009936:	4620      	mov	r0, r4
 8009938:	f000 f818 	bl	800996c <__sfp>
 800993c:	2200      	movs	r2, #0
 800993e:	60e0      	str	r0, [r4, #12]
 8009940:	2104      	movs	r1, #4
 8009942:	6860      	ldr	r0, [r4, #4]
 8009944:	f7ff ff82 	bl	800984c <std>
 8009948:	68a0      	ldr	r0, [r4, #8]
 800994a:	2201      	movs	r2, #1
 800994c:	2109      	movs	r1, #9
 800994e:	f7ff ff7d 	bl	800984c <std>
 8009952:	68e0      	ldr	r0, [r4, #12]
 8009954:	2202      	movs	r2, #2
 8009956:	2112      	movs	r1, #18
 8009958:	f7ff ff78 	bl	800984c <std>
 800995c:	2301      	movs	r3, #1
 800995e:	61a3      	str	r3, [r4, #24]
 8009960:	e7d2      	b.n	8009908 <__sinit+0xc>
 8009962:	bf00      	nop
 8009964:	08009d74 	.word	0x08009d74
 8009968:	08009895 	.word	0x08009895

0800996c <__sfp>:
 800996c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800996e:	4607      	mov	r7, r0
 8009970:	f7ff ffac 	bl	80098cc <__sfp_lock_acquire>
 8009974:	4b1e      	ldr	r3, [pc, #120]	; (80099f0 <__sfp+0x84>)
 8009976:	681e      	ldr	r6, [r3, #0]
 8009978:	69b3      	ldr	r3, [r6, #24]
 800997a:	b913      	cbnz	r3, 8009982 <__sfp+0x16>
 800997c:	4630      	mov	r0, r6
 800997e:	f7ff ffbd 	bl	80098fc <__sinit>
 8009982:	3648      	adds	r6, #72	; 0x48
 8009984:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009988:	3b01      	subs	r3, #1
 800998a:	d503      	bpl.n	8009994 <__sfp+0x28>
 800998c:	6833      	ldr	r3, [r6, #0]
 800998e:	b30b      	cbz	r3, 80099d4 <__sfp+0x68>
 8009990:	6836      	ldr	r6, [r6, #0]
 8009992:	e7f7      	b.n	8009984 <__sfp+0x18>
 8009994:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009998:	b9d5      	cbnz	r5, 80099d0 <__sfp+0x64>
 800999a:	4b16      	ldr	r3, [pc, #88]	; (80099f4 <__sfp+0x88>)
 800999c:	60e3      	str	r3, [r4, #12]
 800999e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80099a2:	6665      	str	r5, [r4, #100]	; 0x64
 80099a4:	f000 f847 	bl	8009a36 <__retarget_lock_init_recursive>
 80099a8:	f7ff ff96 	bl	80098d8 <__sfp_lock_release>
 80099ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80099b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80099b4:	6025      	str	r5, [r4, #0]
 80099b6:	61a5      	str	r5, [r4, #24]
 80099b8:	2208      	movs	r2, #8
 80099ba:	4629      	mov	r1, r5
 80099bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80099c0:	f7fd fae6 	bl	8006f90 <memset>
 80099c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80099c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80099cc:	4620      	mov	r0, r4
 80099ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099d0:	3468      	adds	r4, #104	; 0x68
 80099d2:	e7d9      	b.n	8009988 <__sfp+0x1c>
 80099d4:	2104      	movs	r1, #4
 80099d6:	4638      	mov	r0, r7
 80099d8:	f7ff ff62 	bl	80098a0 <__sfmoreglue>
 80099dc:	4604      	mov	r4, r0
 80099de:	6030      	str	r0, [r6, #0]
 80099e0:	2800      	cmp	r0, #0
 80099e2:	d1d5      	bne.n	8009990 <__sfp+0x24>
 80099e4:	f7ff ff78 	bl	80098d8 <__sfp_lock_release>
 80099e8:	230c      	movs	r3, #12
 80099ea:	603b      	str	r3, [r7, #0]
 80099ec:	e7ee      	b.n	80099cc <__sfp+0x60>
 80099ee:	bf00      	nop
 80099f0:	08009d74 	.word	0x08009d74
 80099f4:	ffff0001 	.word	0xffff0001

080099f8 <_fwalk_reent>:
 80099f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099fc:	4606      	mov	r6, r0
 80099fe:	4688      	mov	r8, r1
 8009a00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009a04:	2700      	movs	r7, #0
 8009a06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a0a:	f1b9 0901 	subs.w	r9, r9, #1
 8009a0e:	d505      	bpl.n	8009a1c <_fwalk_reent+0x24>
 8009a10:	6824      	ldr	r4, [r4, #0]
 8009a12:	2c00      	cmp	r4, #0
 8009a14:	d1f7      	bne.n	8009a06 <_fwalk_reent+0xe>
 8009a16:	4638      	mov	r0, r7
 8009a18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a1c:	89ab      	ldrh	r3, [r5, #12]
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d907      	bls.n	8009a32 <_fwalk_reent+0x3a>
 8009a22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a26:	3301      	adds	r3, #1
 8009a28:	d003      	beq.n	8009a32 <_fwalk_reent+0x3a>
 8009a2a:	4629      	mov	r1, r5
 8009a2c:	4630      	mov	r0, r6
 8009a2e:	47c0      	blx	r8
 8009a30:	4307      	orrs	r7, r0
 8009a32:	3568      	adds	r5, #104	; 0x68
 8009a34:	e7e9      	b.n	8009a0a <_fwalk_reent+0x12>

08009a36 <__retarget_lock_init_recursive>:
 8009a36:	4770      	bx	lr

08009a38 <__retarget_lock_acquire_recursive>:
 8009a38:	4770      	bx	lr

08009a3a <__retarget_lock_release_recursive>:
 8009a3a:	4770      	bx	lr

08009a3c <__swhatbuf_r>:
 8009a3c:	b570      	push	{r4, r5, r6, lr}
 8009a3e:	460e      	mov	r6, r1
 8009a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a44:	2900      	cmp	r1, #0
 8009a46:	b096      	sub	sp, #88	; 0x58
 8009a48:	4614      	mov	r4, r2
 8009a4a:	461d      	mov	r5, r3
 8009a4c:	da07      	bge.n	8009a5e <__swhatbuf_r+0x22>
 8009a4e:	2300      	movs	r3, #0
 8009a50:	602b      	str	r3, [r5, #0]
 8009a52:	89b3      	ldrh	r3, [r6, #12]
 8009a54:	061a      	lsls	r2, r3, #24
 8009a56:	d410      	bmi.n	8009a7a <__swhatbuf_r+0x3e>
 8009a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a5c:	e00e      	b.n	8009a7c <__swhatbuf_r+0x40>
 8009a5e:	466a      	mov	r2, sp
 8009a60:	f000 f902 	bl	8009c68 <_fstat_r>
 8009a64:	2800      	cmp	r0, #0
 8009a66:	dbf2      	blt.n	8009a4e <__swhatbuf_r+0x12>
 8009a68:	9a01      	ldr	r2, [sp, #4]
 8009a6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a72:	425a      	negs	r2, r3
 8009a74:	415a      	adcs	r2, r3
 8009a76:	602a      	str	r2, [r5, #0]
 8009a78:	e7ee      	b.n	8009a58 <__swhatbuf_r+0x1c>
 8009a7a:	2340      	movs	r3, #64	; 0x40
 8009a7c:	2000      	movs	r0, #0
 8009a7e:	6023      	str	r3, [r4, #0]
 8009a80:	b016      	add	sp, #88	; 0x58
 8009a82:	bd70      	pop	{r4, r5, r6, pc}

08009a84 <__smakebuf_r>:
 8009a84:	898b      	ldrh	r3, [r1, #12]
 8009a86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a88:	079d      	lsls	r5, r3, #30
 8009a8a:	4606      	mov	r6, r0
 8009a8c:	460c      	mov	r4, r1
 8009a8e:	d507      	bpl.n	8009aa0 <__smakebuf_r+0x1c>
 8009a90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a94:	6023      	str	r3, [r4, #0]
 8009a96:	6123      	str	r3, [r4, #16]
 8009a98:	2301      	movs	r3, #1
 8009a9a:	6163      	str	r3, [r4, #20]
 8009a9c:	b002      	add	sp, #8
 8009a9e:	bd70      	pop	{r4, r5, r6, pc}
 8009aa0:	ab01      	add	r3, sp, #4
 8009aa2:	466a      	mov	r2, sp
 8009aa4:	f7ff ffca 	bl	8009a3c <__swhatbuf_r>
 8009aa8:	9900      	ldr	r1, [sp, #0]
 8009aaa:	4605      	mov	r5, r0
 8009aac:	4630      	mov	r0, r6
 8009aae:	f7ff f987 	bl	8008dc0 <_malloc_r>
 8009ab2:	b948      	cbnz	r0, 8009ac8 <__smakebuf_r+0x44>
 8009ab4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ab8:	059a      	lsls	r2, r3, #22
 8009aba:	d4ef      	bmi.n	8009a9c <__smakebuf_r+0x18>
 8009abc:	f023 0303 	bic.w	r3, r3, #3
 8009ac0:	f043 0302 	orr.w	r3, r3, #2
 8009ac4:	81a3      	strh	r3, [r4, #12]
 8009ac6:	e7e3      	b.n	8009a90 <__smakebuf_r+0xc>
 8009ac8:	4b0d      	ldr	r3, [pc, #52]	; (8009b00 <__smakebuf_r+0x7c>)
 8009aca:	62b3      	str	r3, [r6, #40]	; 0x28
 8009acc:	89a3      	ldrh	r3, [r4, #12]
 8009ace:	6020      	str	r0, [r4, #0]
 8009ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ad4:	81a3      	strh	r3, [r4, #12]
 8009ad6:	9b00      	ldr	r3, [sp, #0]
 8009ad8:	6163      	str	r3, [r4, #20]
 8009ada:	9b01      	ldr	r3, [sp, #4]
 8009adc:	6120      	str	r0, [r4, #16]
 8009ade:	b15b      	cbz	r3, 8009af8 <__smakebuf_r+0x74>
 8009ae0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ae4:	4630      	mov	r0, r6
 8009ae6:	f000 f8d1 	bl	8009c8c <_isatty_r>
 8009aea:	b128      	cbz	r0, 8009af8 <__smakebuf_r+0x74>
 8009aec:	89a3      	ldrh	r3, [r4, #12]
 8009aee:	f023 0303 	bic.w	r3, r3, #3
 8009af2:	f043 0301 	orr.w	r3, r3, #1
 8009af6:	81a3      	strh	r3, [r4, #12]
 8009af8:	89a0      	ldrh	r0, [r4, #12]
 8009afa:	4305      	orrs	r5, r0
 8009afc:	81a5      	strh	r5, [r4, #12]
 8009afe:	e7cd      	b.n	8009a9c <__smakebuf_r+0x18>
 8009b00:	08009895 	.word	0x08009895

08009b04 <_malloc_usable_size_r>:
 8009b04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b08:	1f18      	subs	r0, r3, #4
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	bfbc      	itt	lt
 8009b0e:	580b      	ldrlt	r3, [r1, r0]
 8009b10:	18c0      	addlt	r0, r0, r3
 8009b12:	4770      	bx	lr

08009b14 <_raise_r>:
 8009b14:	291f      	cmp	r1, #31
 8009b16:	b538      	push	{r3, r4, r5, lr}
 8009b18:	4604      	mov	r4, r0
 8009b1a:	460d      	mov	r5, r1
 8009b1c:	d904      	bls.n	8009b28 <_raise_r+0x14>
 8009b1e:	2316      	movs	r3, #22
 8009b20:	6003      	str	r3, [r0, #0]
 8009b22:	f04f 30ff 	mov.w	r0, #4294967295
 8009b26:	bd38      	pop	{r3, r4, r5, pc}
 8009b28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009b2a:	b112      	cbz	r2, 8009b32 <_raise_r+0x1e>
 8009b2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b30:	b94b      	cbnz	r3, 8009b46 <_raise_r+0x32>
 8009b32:	4620      	mov	r0, r4
 8009b34:	f000 f830 	bl	8009b98 <_getpid_r>
 8009b38:	462a      	mov	r2, r5
 8009b3a:	4601      	mov	r1, r0
 8009b3c:	4620      	mov	r0, r4
 8009b3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b42:	f000 b817 	b.w	8009b74 <_kill_r>
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d00a      	beq.n	8009b60 <_raise_r+0x4c>
 8009b4a:	1c59      	adds	r1, r3, #1
 8009b4c:	d103      	bne.n	8009b56 <_raise_r+0x42>
 8009b4e:	2316      	movs	r3, #22
 8009b50:	6003      	str	r3, [r0, #0]
 8009b52:	2001      	movs	r0, #1
 8009b54:	e7e7      	b.n	8009b26 <_raise_r+0x12>
 8009b56:	2400      	movs	r4, #0
 8009b58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b5c:	4628      	mov	r0, r5
 8009b5e:	4798      	blx	r3
 8009b60:	2000      	movs	r0, #0
 8009b62:	e7e0      	b.n	8009b26 <_raise_r+0x12>

08009b64 <raise>:
 8009b64:	4b02      	ldr	r3, [pc, #8]	; (8009b70 <raise+0xc>)
 8009b66:	4601      	mov	r1, r0
 8009b68:	6818      	ldr	r0, [r3, #0]
 8009b6a:	f7ff bfd3 	b.w	8009b14 <_raise_r>
 8009b6e:	bf00      	nop
 8009b70:	20000010 	.word	0x20000010

08009b74 <_kill_r>:
 8009b74:	b538      	push	{r3, r4, r5, lr}
 8009b76:	4d07      	ldr	r5, [pc, #28]	; (8009b94 <_kill_r+0x20>)
 8009b78:	2300      	movs	r3, #0
 8009b7a:	4604      	mov	r4, r0
 8009b7c:	4608      	mov	r0, r1
 8009b7e:	4611      	mov	r1, r2
 8009b80:	602b      	str	r3, [r5, #0]
 8009b82:	f7f8 fccb 	bl	800251c <_kill>
 8009b86:	1c43      	adds	r3, r0, #1
 8009b88:	d102      	bne.n	8009b90 <_kill_r+0x1c>
 8009b8a:	682b      	ldr	r3, [r5, #0]
 8009b8c:	b103      	cbz	r3, 8009b90 <_kill_r+0x1c>
 8009b8e:	6023      	str	r3, [r4, #0]
 8009b90:	bd38      	pop	{r3, r4, r5, pc}
 8009b92:	bf00      	nop
 8009b94:	20000838 	.word	0x20000838

08009b98 <_getpid_r>:
 8009b98:	f7f8 bcb8 	b.w	800250c <_getpid>

08009b9c <__sread>:
 8009b9c:	b510      	push	{r4, lr}
 8009b9e:	460c      	mov	r4, r1
 8009ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ba4:	f000 f894 	bl	8009cd0 <_read_r>
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	bfab      	itete	ge
 8009bac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009bae:	89a3      	ldrhlt	r3, [r4, #12]
 8009bb0:	181b      	addge	r3, r3, r0
 8009bb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009bb6:	bfac      	ite	ge
 8009bb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8009bba:	81a3      	strhlt	r3, [r4, #12]
 8009bbc:	bd10      	pop	{r4, pc}

08009bbe <__swrite>:
 8009bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bc2:	461f      	mov	r7, r3
 8009bc4:	898b      	ldrh	r3, [r1, #12]
 8009bc6:	05db      	lsls	r3, r3, #23
 8009bc8:	4605      	mov	r5, r0
 8009bca:	460c      	mov	r4, r1
 8009bcc:	4616      	mov	r6, r2
 8009bce:	d505      	bpl.n	8009bdc <__swrite+0x1e>
 8009bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bd4:	2302      	movs	r3, #2
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f000 f868 	bl	8009cac <_lseek_r>
 8009bdc:	89a3      	ldrh	r3, [r4, #12]
 8009bde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009be2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009be6:	81a3      	strh	r3, [r4, #12]
 8009be8:	4632      	mov	r2, r6
 8009bea:	463b      	mov	r3, r7
 8009bec:	4628      	mov	r0, r5
 8009bee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bf2:	f000 b817 	b.w	8009c24 <_write_r>

08009bf6 <__sseek>:
 8009bf6:	b510      	push	{r4, lr}
 8009bf8:	460c      	mov	r4, r1
 8009bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bfe:	f000 f855 	bl	8009cac <_lseek_r>
 8009c02:	1c43      	adds	r3, r0, #1
 8009c04:	89a3      	ldrh	r3, [r4, #12]
 8009c06:	bf15      	itete	ne
 8009c08:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c12:	81a3      	strheq	r3, [r4, #12]
 8009c14:	bf18      	it	ne
 8009c16:	81a3      	strhne	r3, [r4, #12]
 8009c18:	bd10      	pop	{r4, pc}

08009c1a <__sclose>:
 8009c1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c1e:	f000 b813 	b.w	8009c48 <_close_r>
	...

08009c24 <_write_r>:
 8009c24:	b538      	push	{r3, r4, r5, lr}
 8009c26:	4d07      	ldr	r5, [pc, #28]	; (8009c44 <_write_r+0x20>)
 8009c28:	4604      	mov	r4, r0
 8009c2a:	4608      	mov	r0, r1
 8009c2c:	4611      	mov	r1, r2
 8009c2e:	2200      	movs	r2, #0
 8009c30:	602a      	str	r2, [r5, #0]
 8009c32:	461a      	mov	r2, r3
 8009c34:	f7f8 fca9 	bl	800258a <_write>
 8009c38:	1c43      	adds	r3, r0, #1
 8009c3a:	d102      	bne.n	8009c42 <_write_r+0x1e>
 8009c3c:	682b      	ldr	r3, [r5, #0]
 8009c3e:	b103      	cbz	r3, 8009c42 <_write_r+0x1e>
 8009c40:	6023      	str	r3, [r4, #0]
 8009c42:	bd38      	pop	{r3, r4, r5, pc}
 8009c44:	20000838 	.word	0x20000838

08009c48 <_close_r>:
 8009c48:	b538      	push	{r3, r4, r5, lr}
 8009c4a:	4d06      	ldr	r5, [pc, #24]	; (8009c64 <_close_r+0x1c>)
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	4604      	mov	r4, r0
 8009c50:	4608      	mov	r0, r1
 8009c52:	602b      	str	r3, [r5, #0]
 8009c54:	f7f8 fcb5 	bl	80025c2 <_close>
 8009c58:	1c43      	adds	r3, r0, #1
 8009c5a:	d102      	bne.n	8009c62 <_close_r+0x1a>
 8009c5c:	682b      	ldr	r3, [r5, #0]
 8009c5e:	b103      	cbz	r3, 8009c62 <_close_r+0x1a>
 8009c60:	6023      	str	r3, [r4, #0]
 8009c62:	bd38      	pop	{r3, r4, r5, pc}
 8009c64:	20000838 	.word	0x20000838

08009c68 <_fstat_r>:
 8009c68:	b538      	push	{r3, r4, r5, lr}
 8009c6a:	4d07      	ldr	r5, [pc, #28]	; (8009c88 <_fstat_r+0x20>)
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	4604      	mov	r4, r0
 8009c70:	4608      	mov	r0, r1
 8009c72:	4611      	mov	r1, r2
 8009c74:	602b      	str	r3, [r5, #0]
 8009c76:	f7f8 fcb0 	bl	80025da <_fstat>
 8009c7a:	1c43      	adds	r3, r0, #1
 8009c7c:	d102      	bne.n	8009c84 <_fstat_r+0x1c>
 8009c7e:	682b      	ldr	r3, [r5, #0]
 8009c80:	b103      	cbz	r3, 8009c84 <_fstat_r+0x1c>
 8009c82:	6023      	str	r3, [r4, #0]
 8009c84:	bd38      	pop	{r3, r4, r5, pc}
 8009c86:	bf00      	nop
 8009c88:	20000838 	.word	0x20000838

08009c8c <_isatty_r>:
 8009c8c:	b538      	push	{r3, r4, r5, lr}
 8009c8e:	4d06      	ldr	r5, [pc, #24]	; (8009ca8 <_isatty_r+0x1c>)
 8009c90:	2300      	movs	r3, #0
 8009c92:	4604      	mov	r4, r0
 8009c94:	4608      	mov	r0, r1
 8009c96:	602b      	str	r3, [r5, #0]
 8009c98:	f7f8 fcaf 	bl	80025fa <_isatty>
 8009c9c:	1c43      	adds	r3, r0, #1
 8009c9e:	d102      	bne.n	8009ca6 <_isatty_r+0x1a>
 8009ca0:	682b      	ldr	r3, [r5, #0]
 8009ca2:	b103      	cbz	r3, 8009ca6 <_isatty_r+0x1a>
 8009ca4:	6023      	str	r3, [r4, #0]
 8009ca6:	bd38      	pop	{r3, r4, r5, pc}
 8009ca8:	20000838 	.word	0x20000838

08009cac <_lseek_r>:
 8009cac:	b538      	push	{r3, r4, r5, lr}
 8009cae:	4d07      	ldr	r5, [pc, #28]	; (8009ccc <_lseek_r+0x20>)
 8009cb0:	4604      	mov	r4, r0
 8009cb2:	4608      	mov	r0, r1
 8009cb4:	4611      	mov	r1, r2
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	602a      	str	r2, [r5, #0]
 8009cba:	461a      	mov	r2, r3
 8009cbc:	f7f8 fca8 	bl	8002610 <_lseek>
 8009cc0:	1c43      	adds	r3, r0, #1
 8009cc2:	d102      	bne.n	8009cca <_lseek_r+0x1e>
 8009cc4:	682b      	ldr	r3, [r5, #0]
 8009cc6:	b103      	cbz	r3, 8009cca <_lseek_r+0x1e>
 8009cc8:	6023      	str	r3, [r4, #0]
 8009cca:	bd38      	pop	{r3, r4, r5, pc}
 8009ccc:	20000838 	.word	0x20000838

08009cd0 <_read_r>:
 8009cd0:	b538      	push	{r3, r4, r5, lr}
 8009cd2:	4d07      	ldr	r5, [pc, #28]	; (8009cf0 <_read_r+0x20>)
 8009cd4:	4604      	mov	r4, r0
 8009cd6:	4608      	mov	r0, r1
 8009cd8:	4611      	mov	r1, r2
 8009cda:	2200      	movs	r2, #0
 8009cdc:	602a      	str	r2, [r5, #0]
 8009cde:	461a      	mov	r2, r3
 8009ce0:	f7f8 fc36 	bl	8002550 <_read>
 8009ce4:	1c43      	adds	r3, r0, #1
 8009ce6:	d102      	bne.n	8009cee <_read_r+0x1e>
 8009ce8:	682b      	ldr	r3, [r5, #0]
 8009cea:	b103      	cbz	r3, 8009cee <_read_r+0x1e>
 8009cec:	6023      	str	r3, [r4, #0]
 8009cee:	bd38      	pop	{r3, r4, r5, pc}
 8009cf0:	20000838 	.word	0x20000838

08009cf4 <_init>:
 8009cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf6:	bf00      	nop
 8009cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cfa:	bc08      	pop	{r3}
 8009cfc:	469e      	mov	lr, r3
 8009cfe:	4770      	bx	lr

08009d00 <_fini>:
 8009d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d02:	bf00      	nop
 8009d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d06:	bc08      	pop	{r3}
 8009d08:	469e      	mov	lr, r3
 8009d0a:	4770      	bx	lr
